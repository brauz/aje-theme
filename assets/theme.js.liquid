window.theme = window.theme || {};

/* ================ SLATE ================ */
window.theme = window.theme || {};

theme.Sections = function Sections() {
  this.constructors = {};
  this.instances = [];

  $(document)
    .on('shopify:section:load', this._onSectionLoad.bind(this))
    .on('shopify:section:unload', this._onSectionUnload.bind(this))
    .on('shopify:section:select', this._onSelect.bind(this))
    .on('shopify:section:deselect', this._onDeselect.bind(this))
    .on('shopify:block:select', this._onBlockSelect.bind(this))
    .on('shopify:block:deselect', this._onBlockDeselect.bind(this));
};

theme.Sections.prototype = _.assignIn({}, theme.Sections.prototype, {
  _createInstance: function(container, constructor) {
    var $container = $(container);
    var id = $container.attr('data-section-id');
    var type = $container.attr('data-section-type');

    constructor = constructor || this.constructors[type];

    if (_.isUndefined(constructor)) {
      return;
    }

    var instance = _.assignIn(new constructor(container), {
      id: id,
      type: type,
      container: container
    });

    this.instances.push(instance);
  },

  _onSectionLoad: function(evt) {
    var container = $('[data-section-id]', evt.target)[0];
    if (container) {
      this._createInstance(container);
    }
  },

  _onSectionUnload: function(evt) {
    this.instances = _.filter(this.instances, function(instance) {
      var isEventInstance = instance.id === evt.detail.sectionId;

      if (isEventInstance) {
        if (_.isFunction(instance.onUnload)) {
          instance.onUnload(evt);
        }
      }

      return !isEventInstance;
    });
  },

  _onSelect: function(evt) {
    // eslint-disable-next-line no-shadow
    var instance = _.find(this.instances, function(instance) {
      return instance.id === evt.detail.sectionId;
    });

    if (!_.isUndefined(instance) && _.isFunction(instance.onSelect)) {
      instance.onSelect(evt);
    }
  },

  _onDeselect: function(evt) {
    // eslint-disable-next-line no-shadow
    var instance = _.find(this.instances, function(instance) {
      return instance.id === evt.detail.sectionId;
    });

    if (!_.isUndefined(instance) && _.isFunction(instance.onDeselect)) {
      instance.onDeselect(evt);
    }
  },

  _onBlockSelect: function(evt) {
    // eslint-disable-next-line no-shadow
    var instance = _.find(this.instances, function(instance) {
      return instance.id === evt.detail.sectionId;
    });

    if (!_.isUndefined(instance) && _.isFunction(instance.onBlockSelect)) {
      instance.onBlockSelect(evt);
    }
  },

  _onBlockDeselect: function(evt) {
    // eslint-disable-next-line no-shadow
    var instance = _.find(this.instances, function(instance) {
      return instance.id === evt.detail.sectionId;
    });

    if (!_.isUndefined(instance) && _.isFunction(instance.onBlockDeselect)) {
      instance.onBlockDeselect(evt);
    }
  },

  register: function(type, constructor) {
    this.constructors[type] = constructor;

    $('[data-section-type=' + type + ']').each(
      function(index, container) {
        this._createInstance(container, constructor);
      }.bind(this)
    );
  }
});

window.slate = window.slate || {};

/**
 * Slate utilities
 * -----------------------------------------------------------------------------
 * A collection of useful utilities to help build your theme
 *
 *
 * @namespace utils
 */

slate.utils = {
  /**
   * Get the query params in a Url
   * Ex
   * https://mysite.com/search?q=noodles&b
   * getParameterByName('q') = "noodles"
   * getParameterByName('b') = "" (empty value)
   * getParameterByName('test') = null (absent)
   */
  getParameterByName: function(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
      results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  },

  keyboardKeys: {
    TAB: 9,
    ENTER: 13,
    ESCAPE: 27,
    LEFTARROW: 37,
    RIGHTARROW: 39
  }
};

window.slate = window.slate || {};

/**
 * iFrames
 * -----------------------------------------------------------------------------
 * Wrap videos in div to force responsive layout.
 *
 * @namespace iframes
 */

slate.rte = {
  /**
   * Wrap tables in a container div to make them scrollable when needed
   *
   * @param {object} options - Options to be used
   * @param {jquery} options.$tables - jquery object(s) of the table(s) to wrap
   * @param {string} options.tableWrapperClass - table wrapper class name
   */
  wrapTable: function(options) {
    options.$tables.wrap(
      '<div class="' + options.tableWrapperClass + '"></div>'
    );
  },

  /**
   * Wrap iframes in a container div to make them responsive
   *
   * @param {object} options - Options to be used
   * @param {jquery} options.$iframes - jquery object(s) of the iframe(s) to wrap
   * @param {string} options.iframeWrapperClass - class name used on the wrapping div
   */
  wrapIframe: function(options) {
    options.$iframes.each(function() {
      // Add wrapper to make video responsive
      $(this).wrap('<div class="' + options.iframeWrapperClass + '"></div>');

      // Re-set the src attribute on each iframe after page load
      // for Chrome's "incorrect iFrame content on 'back'" bug.
      // https://code.google.com/p/chromium/issues/detail?id=395791
      // Need to specifically target video and admin bar
      this.src = this.src;
    });
  }
};

window.slate = window.slate || {};

/**
 * A11y Helpers
 * -----------------------------------------------------------------------------
 * A collection of useful functions that help make your theme more accessible
 * to users with visual impairments.
 *
 *
 * @namespace a11y
 */

slate.a11y = {
  /**
   * For use when focus shifts to a container rather than a link
   * eg for In-page links, after scroll, focus shifts to content area so that
   * next `tab` is where user expects if focusing a link, just $link.focus();
   *
   * @param {JQuery} $element - The element to be acted upon
   */
  pageLinkFocus: function($element) {
    var focusClass = 'js-focus-hidden';

    $element
      .first()
      .attr('tabIndex', '-1')
      .focus()
      .addClass(focusClass)
      .one('blur', callback);

    function callback() {
      $element
        .first()
        .removeClass(focusClass)
        .removeAttr('tabindex');
    }
  },

  /**
   * If there's a hash in the url, focus the appropriate element
   */
  focusHash: function() {
    var hash = window.location.hash;

    // is there a hash in the url? is it an element on the page?
    if (hash && document.getElementById(hash.slice(1))) {
      this.pageLinkFocus($(hash));
    }
  },

  /**
   * When an in-page (url w/hash) link is clicked, focus the appropriate element
   */
  bindInPageLinks: function() {
    $('a[href*=#]').on(
      'click',
      function(evt) {
        this.pageLinkFocus($(evt.currentTarget.hash));
      }.bind(this)
    );
  },

  /**
   * Traps the focus in a particular container
   *
   * @param {object} options - Options to be used
   * @param {jQuery} options.$container - Container to trap focus within
   * @param {jQuery} options.$elementToFocus - Element to be focused when focus leaves container
   * @param {string} options.namespace - Namespace used for new focus event handler
   */
  trapFocus: function(options) {
    var eventsName = {
      focusin: options.namespace ? 'focusin.' + options.namespace : 'focusin',
      focusout: options.namespace
        ? 'focusout.' + options.namespace
        : 'focusout',
      keydown: options.namespace
        ? 'keydown.' + options.namespace
        : 'keydown.handleFocus'
    };

    /**
     * Get every possible visible focusable element
     */
    var $focusableElements = options.$container.find(
      $(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex^="-"])'
      ).filter(':visible')
    );
    var firstFocusable = $focusableElements[0];
    var lastFocusable = $focusableElements[$focusableElements.length - 1];

    if (!options.$elementToFocus) {
      options.$elementToFocus = options.$container;
    }

    function _manageFocus(evt) {
      if (evt.keyCode !== slate.utils.keyboardKeys.TAB) return;

      /**
       * On the last focusable element and tab forward,
       * focus the first element.
       */
      if (evt.target === lastFocusable && !evt.shiftKey) {
        evt.preventDefault();
        firstFocusable.focus();
      }
      /**
       * On the first focusable element and tab backward,
       * focus the last element.
       */
      if (evt.target === firstFocusable && evt.shiftKey) {
        evt.preventDefault();
        lastFocusable.focus();
      }
    }

    options.$container.attr('tabindex', '-1');
    options.$elementToFocus.focus();

    $(document).off('focusin');

    $(document).on(eventsName.focusout, function() {
      $(document).off(eventsName.keydown);
    });

    $(document).on(eventsName.focusin, function(evt) {
      if (evt.target !== lastFocusable && evt.target !== firstFocusable) return;

      $(document).on(eventsName.keydown, function(evt) {
        _manageFocus(evt);
      });
    });
  },

  /**
   * Removes the trap of focus in a particular container
   *
   * @param {object} options - Options to be used
   * @param {jQuery} options.$container - Container to trap focus within
   * @param {string} options.namespace - Namespace used for new focus event handler
   */
  removeTrapFocus: function(options) {
    var eventName = options.namespace
      ? 'focusin.' + options.namespace
      : 'focusin';

    if (options.$container && options.$container.length) {
      options.$container.removeAttr('tabindex');
    }

    $(document).off(eventName);
  },

  /**
   * Add aria-describedby attribute to external and new window links
   *
   * @param {object} options - Options to be used
   * @param {object} options.messages - Custom messages to be used
   * @param {jQuery} options.$links - Specific links to be targeted
   */
  accessibleLinks: function(options) {
    var body = document.querySelector('body');

    var idSelectors = {
      newWindow: 'a11y-new-window-message',
      external: 'a11y-external-message',
      newWindowExternal: 'a11y-new-window-external-message'
    };

    if (options.$links === undefined || !options.$links.jquery) {
      options.$links = $('a[href]:not([aria-describedby])');
    }

    function generateHTML(customMessages) {
      if (typeof customMessages !== 'object') {
        customMessages = {};
      }

      var messages = $.extend(
        {
          newWindow: 'Opens in a new window.',
          external: 'Opens external website.',
          newWindowExternal: 'Opens external website in a new window.'
        },
        customMessages
      );

      var container = document.createElement('ul');
      var htmlMessages = '';

      for (var message in messages) {
        htmlMessages +=
          '<li id=' + idSelectors[message] + '>' + messages[message] + '</li>';
      }

      container.setAttribute('hidden', true);
      container.innerHTML = htmlMessages;

      body.appendChild(container);
    }

    function _externalSite($link) {
      var hostname = window.location.hostname;

      return $link[0].hostname !== hostname;
    }

    $.each(options.$links, function() {
      var $link = $(this);
      var target = $link.attr('target');
      var rel = $link.attr('rel');
      var isExternal = _externalSite($link);
      var isTargetBlank = target === '_blank';

      if (isExternal) {
        $link.attr('aria-describedby', idSelectors.external);
      }
      if (isTargetBlank) {
        if (rel === undefined || rel.indexOf('noopener') === -1) {
          $link.attr('rel', function(i, val) {
            var relValue = val === undefined ? '' : val + ' ';
            return relValue + 'noopener';
          });
        }
        $link.attr('aria-describedby', idSelectors.newWindow);
      }
      if (isExternal && isTargetBlank) {
        $link.attr('aria-describedby', idSelectors.newWindowExternal);
      }
    });

    generateHTML(options.messages);
  }
};

/**
 * Image Helper Functions
 * -----------------------------------------------------------------------------
 * A collection of functions that help with basic image operations.
 *
 */

theme.Images = (function() {
  /**
   * Preloads an image in memory and uses the browsers cache to store it until needed.
   *
   * @param {Array} images - A list of image urls
   * @param {String} size - A shopify image size attribute
   */

  function preload(images, size) {
    if (typeof images === 'string') {
      images = [images];
    }

    for (var i = 0; i < images.length; i++) {
      var image = images[i];
      this.loadImage(this.getSizedImageUrl(image, size));
    }
  }

  /**
   * Loads and caches an image in the browsers cache.
   * @param {string} path - An image url
   */
  function loadImage(path) {
    new Image().src = path;
  }

  /**
   * Swaps the src of an image for another OR returns the imageURL to the callback function
   * @param image
   * @param element
   * @param callback
   */
  function switchImage(image, element, callback) {
    var size = this.imageSize(element.src);
    var imageUrl = this.getSizedImageUrl(image.src, size);

    if (callback) {
      callback(imageUrl, image, element); // eslint-disable-line callback-return
    } else {
      element.src = imageUrl;
    }
  }

  /**
   * +++ Useful
   * Find the Shopify image attribute size
   *
   * @param {string} src
   * @returns {null}
   */
  function imageSize(src) {
    var match = src.match(
      /.+_((?:pico|icon|thumb|small|compact|medium|large|grande)|\d{1,4}x\d{0,4}|x\d{1,4})[_\\.@]/
    );

    if (match !== null) {
      if (match[2] !== undefined) {
        return match[1] + match[2];
      } else {
        return match[1];
      }
    } else {
      return null;
    }
  }

  /**
   * +++ Useful
   * Adds a Shopify size attribute to a URL
   *
   * @param src
   * @param size
   * @returns {*}
   */
  function getSizedImageUrl(src, size) {
    if (size === null) {
      return src;
    }

    if (size === 'master') {
      return this.removeProtocol(src);
    }

    var match = src.match(
      /\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?$/i
    );

    if (match !== null) {
      var prefix = src.split(match[0]);
      var suffix = match[0];

      return this.removeProtocol(prefix[0] + '_' + size + suffix);
    }

    return null;
  }

  function removeProtocol(path) {
    return path.replace(/http(s)?:/, '');
  }

  return {
    preload: preload,
    loadImage: loadImage,
    switchImage: switchImage,
    imageSize: imageSize,
    getSizedImageUrl: getSizedImageUrl,
    removeProtocol: removeProtocol
  };
})();

/**
 * Currency Helpers
 * -----------------------------------------------------------------------------
 * A collection of useful functions that help with currency formatting
 *
 * Current contents
 * - formatMoney - Takes an amount in cents and returns it as a formatted dollar value.
 *
 * Alternatives
 * - Accounting.js - http://openexchangerates.github.io/accounting.js/
 *
 */

theme.Currency = (function() {
  var moneyFormat = '${{amount}}'; // eslint-disable-line camelcase

  function formatMoney(cents, format) {
    if (typeof cents === 'string') {
      cents = cents.replace('.', '');
    }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = format || moneyFormat;

    function formatWithDelimiters(number, precision, thousands, decimal) {
      thousands = thousands || ',';
      decimal = decimal || '.';

      if (isNaN(number) || number === null) {
        return 0;
      }

      number = (number / 100.0).toFixed(precision);

      var parts = number.split('.');
      var dollarsAmount = parts[0].replace(
        /(\d)(?=(\d\d\d)+(?!\d))/g,
        '$1' + thousands
      );
      var centsAmount = parts[1] ? decimal + parts[1] : '';

      return dollarsAmount + centsAmount;
    }

    switch (formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
      case 'amount_no_decimals_with_space_separator':
        value = formatWithDelimiters(cents, 0, ' ');
        break;
      case 'amount_with_apostrophe_separator':
        value = formatWithDelimiters(cents, 2, "'");
        break;
    }

    return formatString.replace(placeholderRegex, value);
  }

  return {
    formatMoney: formatMoney
  };
})();

/**
 * Variant Selection scripts
 * ------------------------------------------------------------------------------
 *
 * Handles change events from the variant inputs in any `cart/add` forms that may
 * exist.  Also updates the master select and triggers updates when the variants
 * price or image changes.
 *
 * @namespace variants
 */

slate.Variants = (function() {
  /**
   * Variant constructor
   *
   * @param {object} options - Settings from `product.js`
   */
  function Variants(options) {
    this.$container = options.$container;
    this.product = options.product;
    this.singleOptionSelector = options.singleOptionSelector;
    this.originalSelectorId = options.originalSelectorId;
    this.enableHistoryState = options.enableHistoryState;
    this.currentVariant = this._getVariantFromOptions();

    $(this.singleOptionSelector, this.$container).on(
      'change',
      this._onSelectChange.bind(this)
    );
  }

  Variants.prototype = _.assignIn({}, Variants.prototype, {
    /**
     * Get the currently selected options from add-to-cart form. Works with all
     * form input elements.
     *
     * @return {array} options - Values of currently selected variants
     */
    _getCurrentOptions: function() {
      var currentOptions = _.map(
        $(this.singleOptionSelector, this.$container),
        function(element) {
          var $element = $(element);
          var type = $element.attr('type');
          var currentOption = {};

          if (type === 'radio' || type === 'checkbox') {
            if ($element[0].checked) {
              currentOption.value = $element.val();
              currentOption.index = $element.data('index');

              return currentOption;
            } else {
              return false;
            }
          } else {
            currentOption.value = $element.val();
            currentOption.index = $element.data('index');

            return currentOption;
          }
        }
      );

      // remove any unchecked input values if using radio buttons or checkboxes
      currentOptions = _.compact(currentOptions);

      return currentOptions;
    },

    /**
     * Find variant based on selected values.
     *
     * @param  {array} selectedValues - Values of variant inputs
     * @return {object || undefined} found - Variant object from product.variants
     */
    _getVariantFromOptions: function() {
      // Check for Back In Stock Label (label: coming soon)
      const backInStock = this.product.tags.includes('label: coming soon');
      var selectedValues = this._getCurrentOptions();
      //custom code - display current selected product size - fixed product menu
      if (selectedValues.length) {
        $('.size-picker-section .current-size .text').text(selectedValues[0].value);
      }
      //end custom code

      var variants = this.product.variants;

      var found = _.find(variants, function(variant) {
        return selectedValues.every(function(values) {
          return _.isEqual(variant[values.index], values.value);
        });
      });

      // if (selectedValues[0].value === '18') {
      //   $('.athletica-product-info .product-options--mobile').addClass('show-exclusive-message');
      // } else {
      //   $('.athletica-product-info .product-options--mobile').removeClass('show-exclusive-message');
      // }

      //custom code - current size variant inventory for variant selected
      let variantInventoryLevel = (invQty[ found.id ]);
      $('.product-form__item .product-form__cart-submit').show();
      if(variantInventoryLevel < 4){
        $('.size-picker-section .variant-inventory-message').html('<span>LOW IN STOCK<span>');
        // if ( $('#shopify-section-product-athletica').length) {
        //   $('.size-picker-section .variant-inventory-message.top-product-message').addClass('low-in-stock');
        // }
        if(variantInventoryLevel == 1){
          if ( !$('#shopify-section-product-athletica').length) {
            $('.size-picker-section .variant-inventory-message').html('<span>ONE REMAINING<span>');
          } else {
            // athletica show one left message
            $('.athletica-product-info .product-options--mobile').addClass('show-one-left');
            $('.athletica-product-info .product-options--mobile').removeClass('show-low-in-stock');
          }
        }
        else if(variantInventoryLevel <= 0){
          $('.size-picker-section .variant-inventory-message').html('<span class="stock-notify-btn">SOLD OUT</span>');

          // $('.size-picker-section .variant-inventory-message').html('<span></span>');

          // setTimeout(function() {
          //   if ($('.product-notify-me-btn').css('display') == 'inline-block'){
          //     $('.product-form__cart-submit').hide();
          //   } else {
          //     $('.product-form__cart-submit').show();
          //   }
          // }, 800);
        }
        if(variantInventoryLevel == 0){
          // athletica remove one left message
          $('.athletica-product-info .product-options--mobile').removeClass('show-one-left');
          $('.athletica-product-info .product-options--mobile').removeClass('show-low-in-stock');
        }
        if(variantInventoryLevel > 1 && variantInventoryLevel  <= 4 ){
          // athletica remove one left message
          $('.athletica-product-info .product-options--mobile').removeClass('show-one-left');
          $('.athletica-product-info .product-options--mobile').addClass('show-low-in-stock');
        }
      }
      else{
        // athletica remove one left message
        $('.athletica-product-info .product-options--mobile').removeClass('show-one-left');
        $('.athletica-product-info .product-options--mobile').removeClass('show-low-in-stock');
        $('.size-picker-section .variant-inventory-message').html('<span></span>');
        if ( $('#shopify-section-product-athletica').length) {
          $('.size-picker-section .variant-inventory-message.top-product-message').removeClass('low-in-stock');
        }
      }

      //variant inventory levels for each size variant in fixed product menu
      let invQtyArray = Object.values(invQty)
      $('.size-picker-swatch-wrapper .size-picker').each(function(index){
        let variantInventoryLevel = invQtyArray[index]
        
        if(variantInventoryLevel < 4){
          // Dont show in athletica sticky
          if ( !$('#shopify-section-product-athletica').length) {
            $(this).find('.variant-inventory-message.fixed-product-menu-display').html('<span>LOW IN STOCK<span>');
          }
  
          if(variantInventoryLevel == 1){
            // change inventory message for athletica
            let oneRemainingMessage = '<span>ONE REMAINING<span>';
            if ( $('#shopify-section-product-athletica').length) {
              oneRemainingMessage = '<span>One Left<span>';
            }
            $(this).find('.variant-inventory-message.fixed-product-menu-display').html(oneRemainingMessage);
          }
          else if(variantInventoryLevel <= 0){
            let soldOutMessage = '<span class="stock-notify-btn">SOLD OUT</span>';
            if ( $('#shopify-section-product-athletica').length) {
              soldOutMessage = '<span class="stock-notify-btn">Sold Out</span>';
            }
            $(this).find('.size').addClass('grey-out');
            $(this).find('.variant-inventory-message.fixed-product-menu-display ').html(soldOutMessage);
          }
        }
        else{
          $(this).find('.variant-inventory-message.fixed-product-menu-display').html('<span></span>');
        }
      });

      // pdp size conversion message logic

      let selectedDataConversion = false;
      if (selectedValues.length) {
        selectedDataConversion = $(`.size-picker-swatch-wrapper .size-picker input[value='${selectedValues[0].value}']`).data('size-conversion');
      }
      if(selectedDataConversion) {
        $('.size-conversion-message').html(`<span>${selectedDataConversion}</span>`)
      }
      else {
        $('.size-conversion-message').html('')
      }

      // Logic for Back In Stock - Need to render all items as 'Coming Soon'
      if (backInStock) {
        $('.size-picker-section .variant-inventory-message').html('<span>COMING SOON<span>')
        $('.size-picker-section .variant-inventory-message').addClass('grey-out');
      }

      return found;
    },

    /**
     * Event handler for when a variant input changes.
     */
    _onSelectChange: function() {
      var variant = this._getVariantFromOptions();

      this.$container.trigger({
        type: 'variantChange',
        variant: variant
      });

      if (!variant) {
        return;
      }

      this._updateMasterSelect(variant);
      this._updateImages(variant);
      this._updatePrice(variant);
      this._updateSKU(variant);
      this.currentVariant = variant;

      if (this.enableHistoryState) {
        this._updateHistoryState(variant);
      }
    },

    /**
     * Trigger event when variant image changes
     *
     * @param  {object} variant - Currently selected variant
     * @return {event}  variantImageChange
     */
    _updateImages: function(variant) {
      var variantImage = variant.featured_image || {};
      var currentVariantImage = this.currentVariant.featured_image || {};

      if (
        !variant.featured_image ||
        variantImage.src === currentVariantImage.src
      ) {
        return;
      }

      this.$container.trigger({
        type: 'variantImageChange',
        variant: variant
      });
    },

    /**
     * Trigger event when variant price changes.
     *
     * @param  {object} variant - Currently selected variant
     * @return {event} variantPriceChange
     */
    _updatePrice: function(variant) {
      if (
        variant.price === this.currentVariant.price &&
        variant.compare_at_price === this.currentVariant.compare_at_price
      ) {
        return;
      }

      this.$container.trigger({
        type: 'variantPriceChange',
        variant: variant
      });
    },

    /**
     * Trigger event when variant sku changes.
     *
     * @param  {object} variant - Currently selected variant
     * @return {event} variantSKUChange
     */
    _updateSKU: function(variant) {
      if (variant.sku === this.currentVariant.sku) {
        return;
      }

      this.$container.trigger({
        type: 'variantSKUChange',
        variant: variant
      });
    },

    /**
     * Update history state for product deeplinking
     *
     * @param  {variant} variant - Currently selected variant
     * @return {k}         [description]
     */
    _updateHistoryState: function(variant) {
      if (!history.replaceState || !variant) {
        return;
      }

      var newurl =
        window.location.protocol +
        '//' +
        window.location.host +
        window.location.pathname +
        '?variant=' +
        variant.id;
      window.history.replaceState({ path: newurl }, '', newurl);
    },

    /**
     * Update hidden master select of variant change
     *
     * @param  {variant} variant - Currently selected variant
     */
    _updateMasterSelect: function(variant) {
      $(this.originalSelectorId, this.$container).val(variant.id);
    }
  });

  return Variants;
})();


/* ================ GLOBAL ================ */
/*============================================================================
  Drawer modules
==============================================================================*/
theme.Drawers = (function() {
  function Drawer(id, position, options) {
    var defaults = {
      close: '.js-drawer-close',
      open: '.js-drawer-open-' + position,
      openClass: 'js-drawer-open',
      dirOpenClass: 'js-drawer-open-' + position
    };

    this.nodes = {
      $parent: $('html').add('body'),
      $page: $('#PageContainer')
    };

    this.config = $.extend(defaults, options);
    this.position = position;

    this.$drawer = $('#' + id);

    if (!this.$drawer.length) {
      return false;
    }

    this.drawerIsOpen = false;
    this.init();
  }

  Drawer.prototype.init = function() {
    // Attaches event listeners to open / close drawers
    $(this.config.open).on('click', $.proxy(this.open, this));
    this.$drawer.on('click', this.config.close, $.proxy(this.close, this));
  };

  Drawer.prototype.open = function(evt) {
    // Keep track if drawer was opened from a click, or called by another function
    var externalCall = false;

    // Prevent following href if link is clicked
    if (evt) {
      evt.preventDefault();
    } else {
      externalCall = true;
    }

    // Without this, the drawer opens, the click event bubbles up to nodes.$page
    // which closes the drawer.
    if (evt && evt.stopPropagation) {
      evt.stopPropagation();
      // save the source of the click, we'll focus to this on close
      this.$activeSource = $(evt.currentTarget);
    }

    if (this.drawerIsOpen && !externalCall) {
      return this.close();
    }

    // Add is-transitioning class to moved elements on open so drawer can have
    // transition for close animation
    this.$drawer.prepareTransition();

    this.nodes.$parent.addClass(
      this.config.openClass + ' ' + this.config.dirOpenClass
    );
    bodyScrollLock.disableBodyScroll(document.querySelector('.search-bar__input'))
    this.drawerIsOpen = true;

    // Set focus on drawer
    slate.a11y.trapFocus({
      $container: this.$drawer,
      namespace: 'drawer_focus'
    });

    // Run function when draw opens if set
    if (
      this.config.onDrawerOpen &&
      typeof this.config.onDrawerOpen === 'function'
    ) {
      if (!externalCall) {
        this.config.onDrawerOpen();
      }
    }

    if (this.$activeSource && this.$activeSource.attr('aria-expanded')) {
      this.$activeSource.attr('aria-expanded', 'true');
    }

    this.bindEvents();

    return this;
  };

  Drawer.prototype.close = function() {
    if (!this.drawerIsOpen) {
      // don't close a closed drawer
      return;
    }

    // deselect any focused form elements
    $(document.activeElement).trigger('blur');

    // Ensure closing transition is applied to moved elements, like the nav
    this.$drawer.prepareTransition();

    this.nodes.$parent.removeClass(
      this.config.dirOpenClass + ' ' + this.config.openClass
    );
    bodyScrollLock.enableBodyScroll(document.querySelector('.search-bar__input'))
    if (this.$activeSource && this.$activeSource.attr('aria-expanded')) {
      this.$activeSource.attr('aria-expanded', 'false');
    }

    this.drawerIsOpen = false;

    // Remove focus on drawer
    slate.a11y.removeTrapFocus({
      $container: this.$drawer,
      namespace: 'drawer_focus'
    });

    this.unbindEvents();

    // Run function when draw closes if set
    if (
      this.config.onDrawerClose &&
      typeof this.config.onDrawerClose === 'function'
    ) {
      this.config.onDrawerClose();
    }
  };

  Drawer.prototype.bindEvents = function() {
    this.nodes.$parent.on(
      'keyup.drawer',
      $.proxy(function(evt) {
        // close on 'esc' keypress
        if (evt.keyCode === 27) {
          this.close();
          return false;
        } else {
          return true;
        }
      }, this)
    );

    // Lock scrolling on mobile
    this.nodes.$page.on('touchmove.drawer', function() {
      return false;
    });

    this.nodes.$page.on(
      'click.drawer',
      $.proxy(function() {
        this.close();
        return false;
      }, this)
    );
  };

  Drawer.prototype.unbindEvents = function() {
    this.nodes.$page.off('.drawer');
    this.nodes.$parent.off('.drawer');
  };

  return Drawer;
})();


/* ================ MODULES ================ */
window.theme = window.theme || {};

theme.Header = (function() {
  var selectors = {
    body: 'body',
    multicurrencySelector: '[data-currency-selector]',
    navigation: '#AccessibleNav',
    siteNavHasDropdown: '[data-has-dropdowns]',
    siteNavChildLinks: '.site-nav__child-link',
    siteNavActiveDropdown: '.site-nav--active-dropdown',
    siteNavHasCenteredDropdown: '.site-nav--has-centered-dropdown',
    siteNavCenteredDropdown: '.site-nav__dropdown--centered',
    siteNavLinkMain: '.site-nav__link--main',
    siteNavChildLink: '.site-nav__link--last',
    siteNavDropdown: '.site-nav__dropdown',
    siteHeader: '.site-header'
  };

  var config = {
    activeClass: 'site-nav--active-dropdown',
    childLinkClass: 'site-nav__child-link',
    rightDropdownClass: 'site-nav__dropdown--right',
    leftDropdownClass: 'site-nav__dropdown--left'
  };

  var cache = {};

  function init() {
    cacheSelectors();
    styleDropdowns($(selectors.siteNavHasDropdown));
    positionFullWidthDropdowns();

    cache.$parents.on('click.siteNav', function() {
      var $el = $(this);
      // $el.hasClass(config.activeClass) ? hideDropdown($el) : showDropdown($el);
    });

    cache.$parents.hover(function() {
      $(this).addClass(config.activeClass);
    }, function() {
      $(this).removeClass(config.activeClass);
    });

    // check when we're leaving a dropdown and close the active dropdown
    $(selectors.siteNavChildLink).on('focusout.siteNav', function() {
      setTimeout(function() {
        if (
          $(document.activeElement).hasClass(config.childLinkClass) ||
          !cache.$activeDropdown.length
        ) {
          return;
        }

        hideDropdown(cache.$activeDropdown);
      });
    });

    // close dropdowns when on top level nav
    cache.$topLevel.on('focus.siteNav', function() {
      if (cache.$activeDropdown.length) {
        hideDropdown(cache.$activeDropdown);
      }
    });

    cache.$subMenuLinks.on('click.siteNav', function(evt) {
      // Prevent click on body from firing instead of link
      evt.stopImmediatePropagation();
    });

    $(selectors.multicurrencySelector).on('change', function() {
      $(this)
        .parents('form')
        .submit();
    });

    $(window).resize(
      $.debounce(50, function() {
        styleDropdowns($(selectors.siteNavHasDropdown));
        positionFullWidthDropdowns();
      })
    );
  }

  function cacheSelectors() {
    cache = {
      $nav: $(selectors.navigation),
      $topLevel: $(selectors.siteNavLinkMain),
      $parents: $(selectors.navigation).find(selectors.siteNavHasDropdown),
      $subMenuLinks: $(selectors.siteNavChildLinks),
      $activeDropdown: $(selectors.siteNavActiveDropdown),
      $siteHeader: $(selectors.siteHeader)
    };
  }

  function showDropdown($el) {
    $el.addClass(config.activeClass);

    // close open dropdowns
    if (cache.$activeDropdown.length) {
      hideDropdown(cache.$activeDropdown);
    }

    cache.$activeDropdown = $el;

    // set expanded on open dropdown
    $el.find(selectors.siteNavLinkMain).attr('aria-expanded', 'true');

    setTimeout(function() {
      $(window).on('keyup.siteNav', function(evt) {
        if (evt.keyCode === 27) {
          hideDropdown($el);
        }
      });

      $(selectors.body).on('click.siteNav', function() {
        hideDropdown($el);
      });
    }, 250);
  }

  function hideDropdown($el) {
    // remove aria on open dropdown
    $el.find(selectors.siteNavLinkMain).attr('aria-expanded', 'false');
    $el.removeClass(config.activeClass);

    // reset active dropdown
    cache.$activeDropdown = $(selectors.siteNavActiveDropdown);

    $(selectors.body).off('click.siteNav');
    $(window).off('keyup.siteNav');
  }

  function styleDropdowns($dropdownListItems) {
    $dropdownListItems.each(function() {
      var $dropdownLi = $(this).find(selectors.siteNavDropdown);
      if (!$dropdownLi.length) {
        return;
      }
      var isRightOfLogo =
        Math.ceil($(this).offset().left) >
        Math.floor(cache.$siteHeader.outerWidth()) / 2
          ? true
          : false;
      if (isRightOfLogo) {
        $dropdownLi
          .removeClass(config.leftDropdownClass)
          .addClass(config.rightDropdownClass);
      } else {
        $dropdownLi
          .removeClass(config.rightDropdownClass)
          .addClass(config.leftDropdownClass);
      }
    });
  }

  function positionFullWidthDropdowns() {
    var $listWithCenteredDropdown = $(selectors.siteNavHasCenteredDropdown);

    $listWithCenteredDropdown.each(function() {
      var $hasCenteredDropdown = $(this);
      var $fullWidthDropdown = $hasCenteredDropdown.find(
        selectors.siteNavCenteredDropdown
      );

      var fullWidthDropdownOffset = $hasCenteredDropdown.position().top + 41;
      $fullWidthDropdown.css('top', fullWidthDropdownOffset);
    });
  }

  function unload() {
    $(window).off('.siteNav');
    cache.$parents.off('.siteNav');
    cache.$subMenuLinks.off('.siteNav');
    cache.$topLevel.off('.siteNav');
    $(selectors.siteNavChildLink).off('.siteNav');
    $(selectors.body).off('.siteNav');
  }

  return {
    init: init,
    unload: unload
  };
})();

window.theme = window.theme || {};


theme.wishlist = (function() {
  function init(selector) {
    if(!window.SwymCallbacks){
      window.SwymCallbacks = [];
    }
    window.SwymCallbacks.push(swat => swat.initializeActionButtons(selector));
  }

  return {
    init: init
  };
})();

theme.MobileNav = (function() {
  var classes = {
    mobileNavOpenIcon: 'mobile-nav--open',
    mobileNavCloseIcon: 'mobile-nav--close',
    navLinkWrapper: 'mobile-nav__item',
    navLink: 'mobile-nav__link',
    subNavLink: 'mobile-nav__sublist-link',
    return: 'mobile-nav__return-btn',
    subNavActive: 'is-active',
    subNavClosing: 'is-closing',
    navOpen: 'js-menu--is-open',
    subNavShowing: 'sub-nav--is-open',
    thirdNavShowing: 'third-nav--is-open',
    subNavToggleBtn: 'js-toggle-submenu'
  };
  var cache = {};
  var isTransitioning;
  var $activeSubNav;
  var $activeTrigger;
  var menuLevel = 1;
  // Breakpoints from src/stylesheets/global/variables.scss.liquid
  var mediaQuerySmall = 'screen and (max-width: 749px)';

  function init() {
    cacheSelectors();

    cache.$mobileNavToggle.on('click', toggleMobileNav);
    cache.$subNavToggleBtn.on('click.subNav', toggleSubNav);

    // Close mobile nav when unmatching mobile breakpoint
    enquire.register(mediaQuerySmall, {
      unmatch: function() {
        if (cache.$mobileNavContainer.hasClass(classes.navOpen)) {
          closeMobileNav();
        }
      }
    });
  }

  function toggleMobileNav() {
    $(document).mouseup(function (e) {
      var container = $(".mobile-nav-wrapper");
      // if the target of the click isn't the container nor a descendant of the container
      if (!container.is(e.target) && container.has(e.target).length === 0) {
        closeMobileNav();
      }
    });
    if (cache.$mobileNavToggle.hasClass(classes.mobileNavCloseIcon)) {
      closeMobileNav();
    } else {
      mobileNavHeightAdjust();
      openMobileNav();
    }
  }

  function cacheSelectors() {
    cache = {
      $pageContainer: $('#PageContainer'),
      $siteHeader: $('.site-header'),
      $mobileNavToggle: $('.js-mobile-nav-toggle'),
      $mobileNavContainer: $('.mobile-nav-wrapper'),
      $mobileNav: $('#MobileNav'),
      $sectionHeader: $('#shopify-section-header'),
      $subNavToggleBtn: $('.' + classes.subNavToggleBtn)
    };
  }

  function mobileNavHeightAdjust() {
    if ($(window).scrollTop() > 0) {
      $('.mobile-nav-wrapper').css('height', '100vh');
    }
    else {
      if ($('.brand_tab_disabled')) {
        $('.mobile-nav-wrapper').css('height', '100vh');
      }
      else {
        $('.mobile-nav-wrapper').css('height', 'calc(100vh - 30px)');
      }
    }
  }

  function openMobileNav() {
    $("body").addClass("scroll-lock");
    // Something somewhere is overriding the scroll-lock class being added
    // Adding in-line styling is fixing what the line above is doing
    $("body").css("overflow", "hidden")
    var container = $(".mobile-nav-wrapper");
    var translateHeaderHeight = cache.$siteHeader.outerHeight();

    cache.$mobileNavContainer.prepareTransition().addClass(classes.navOpen);

    cache.$mobileNavContainer.css({
      transform: 'translateX(' + '0' + 'px)'
    });

    // cache.$pageContainer.css({
    //   transform:
    //     'translate3d(0, ' + cache.$mobileNavContainer[0].scrollHeight + 'px, 0)'
    // });

    slate.a11y.trapFocus({
      $container: cache.$sectionHeader,
      $elementToFocus: cache.$mobileNavToggle,
      namespace: 'navFocus'
    });

    cache.$mobileNavToggle
      .addClass(classes.mobileNavCloseIcon)
      .removeClass(classes.mobileNavOpenIcon)
      .attr('aria-expanded', true);

    // close on escape
    $(window).on('keyup.mobileNav', function(evt) {
      if (evt.which === 27) {
        closeMobileNav();
      }
    });

    $(document).mouseup(function (e) {
      var container = $(".mobile-nav-wrapper");
      // if the target of the click isn't the container nor a descendant of the container
      if (!container.is(e.target) && container.has(e.target).length === 0) {
        closeMobileNav();
      }
    });
    
    $(".mobile-menu-overlay").show();

  }

  function closeMobileNav() {
    $("body").removeClass("scroll-lock");
    // Something somewhere is overriding the scroll-lock class being added
    // Adding in-line styling is fixing what the line above is doing
    $("body").css("overflow", "visible")
    $(".mobile-menu-overlay").hide();

    cache.$mobileNavContainer.prepareTransition().removeClass(classes.navOpen);

    cache.$mobileNavContainer.css({
      transform: 'translateX(-100%)'
    });

    cache.$pageContainer.removeAttr('style');

    slate.a11y.trapFocus({
      $container: $('html'),
      $elementToFocus: $('body')
    });

    cache.$mobileNavContainer.one(
      'TransitionEnd.navToggle webkitTransitionEnd.navToggle transitionend.navToggle oTransitionEnd.navToggle',
      function() {
        slate.a11y.removeTrapFocus({
          $container: cache.$mobileNav,
          namespace: 'navFocus'
        });
      }
    );

    cache.$mobileNavToggle
      .addClass(classes.mobileNavOpenIcon)
      .removeClass(classes.mobileNavCloseIcon)
      .attr('aria-expanded', false)
      .focus();

    $(window).off('keyup.mobileNav');
    // scrollTo(0, 0);
  }

  function toggleSubNav(evt) {
    // if (isTransitioning) {
    //   return;
    // }

    const $toggleBtn = $(evt.currentTarget);
    if ($toggleBtn.hasClass('aje-athletica-button-link') && $toggleBtn.attr('aria-expanded') == 'true') {
      const url = $toggleBtn.find('.aje-athletica-arrow a').attr('href');
      if (url != '') {
        window.location = url;
      }
      return false;
    }
    
    $toggleBtn.siblings(".mobile-nav__dropdown").slideToggle(400, 'swing', function() {
      $toggleBtn.attr('aria-expanded', $(this).is(':visible'));
    });
    $toggleBtn.find(".mobile-nav__icon-minus, .mobile-nav__icon-plus").toggle();
    


    // var $toggleBtn = $(evt.currentTarget);
    // var isReturn = $toggleBtn.hasClass(classes.return);
    // isTransitioning = true;

    // console.log($toggleBtn)
    // console.log($activeTrigger)
    // if (isReturn) {
    //   // Close all subnavs by removing active class on buttons
    //   $(
    //     '.' + classes.subNavToggleBtn + '[data-level="' + (menuLevel - 1) + '"]'
    //   ).removeClass(classes.subNavActive);

    //   if ($activeTrigger && $activeTrigger.length) {
    //     $activeTrigger.removeClass(classes.subNavActive);
    //   }
    //   $toggleBtn.removeClass("mobile-nav__return-btn");
    // } else {
    //   $toggleBtn.addClass("mobile-nav__return-btn").addClass(classes.subNavActive);
    // }

    // $activeTrigger = $toggleBtn;
    // goToSubnav($toggleBtn.data('target'));
    // $toggleBtn.find(".mobile-nav__dropdown").slideToggle();

  }

  function goToSubnav(target) {
    /*eslint-disable shopify/jquery-dollar-sign-reference */

    var $targetMenu = target
      ? $('.mobile-nav__dropdown[data-parent="' + target + '"]')
      : cache.$mobileNav;

    menuLevel = $targetMenu.data('level') ? $targetMenu.data('level') : 1;

    if ($activeSubNav && $activeSubNav.length) {
      $activeSubNav.prepareTransition().addClass(classes.subNavClosing);
    }

    $activeSubNav = $targetMenu;

    /*eslint-enable shopify/jquery-dollar-sign-reference */

    var translateMenuHeight = $targetMenu.outerHeight();

    var openNavClass =
      menuLevel > 2 ? classes.thirdNavShowing : classes.subNavShowing;

    cache.$mobileNavContainer
      // .css('height', translateMenuHeight)
      .removeClass(classes.thirdNavShowing)
      .addClass(openNavClass);

    if (!target) {
      // Show top level nav
      cache.$mobileNavContainer
        .removeClass(classes.thirdNavShowing)
        .removeClass(classes.subNavShowing);
    }

    /* if going back to first subnav, focus is on whole header */
    var $container = menuLevel === 1 ? cache.$sectionHeader : $targetMenu;

    var $menuTitle = $targetMenu.find('[data-menu-title=' + menuLevel + ']');
    var $elementToFocus = $menuTitle ? $menuTitle : $targetMenu;

    // Focusing an item in the subnav early forces element into view and breaks the animation.
    // cache.$mobileNavContainer.one(
    //   'TransitionEnd.subnavToggle webkitTransitionEnd.subnavToggle transitionend.subnavToggle oTransitionEnd.subnavToggle',
    //   function() {
    //     slate.a11y.trapFocus({
    //       $container: $container,
    //       $elementToFocus: $elementToFocus,
    //       namespace: 'subNavFocus'
    //     });

    //     cache.$mobileNavContainer.off('.subnavToggle');
    //     isTransitioning = false;
    //   }
    // );

    // Match height of subnav
    // cache.$pageContainer.css({
    //   transform: 'translateY(' + translateMenuHeight + 'px)'
    // });

    $activeSubNav.removeClass(classes.subNavClosing);
  }

  return {
    init: init,
    closeMobileNav: closeMobileNav
  };
})(jQuery);

window.theme = window.theme || {};

theme.Search = (function() {
  var selectors = {
    search: '.search',
    searchSubmit: '.search__submit',
    searchInput: '.search__input',

    siteHeader: '.site-header',
    siteHeaderSearchToggle: '.site-header__search-toggle',
    siteHeaderSearch: '.site-header__search',

    searchDrawer: '.search-bar',
    searchDrawerInput: '.search-bar__input',

    searchHeader: '.search-header',
    searchHeaderInput: '.search-header__input',
    searchHeaderSubmit: '.search-header__submit',

    searchResultSubmit: '#SearchResultSubmit',
    searchResultInput: '#SearchInput',
    searchResultMessage: '[data-search-error-message]',

    mobileNavWrapper: '.mobile-nav-wrapper'
  };

  var classes = {
    focus: 'search--focus',
    hidden: 'hide',
    mobileNavIsOpen: 'js-menu--is-open',
    searchTemplate: 'template-search'
  };

  function init() {
    if (!$(selectors.siteHeader).length) {
      return;
    }

    this.$searchResultInput = $(selectors.searchResultInput);
    this.$searchErrorMessage = $(selectors.searchResultMessage);

    initDrawer();

    var isSearchPage =
      slate.utils.getParameterByName('q') !== null &&
      $('body').hasClass(classes.searchTemplate);

    if (isSearchPage) {
      //validateSearchResultForm.call(this);
    }

    $(selectors.searchResultSubmit).on(
      'click',
      //validateSearchResultForm.bind(this)
    );

    $(selectors.searchHeaderInput)
      .add(selectors.searchHeaderSubmit)
      .on('focus blur', function() {
        $(selectors.searchHeader).toggleClass(classes.focus);
        $(this).siblings(selectors.searchHeaderSubmit).addClass('boost-clicked');
      });

      // *** Handling of opening and closing search bar logic - 15/08/23 ***
      const searchDrawerOverlayId = '#search-drawer-overlay'

      const onSearchBarOpen = () => {
        var searchHeight = $(selectors.siteHeader).outerHeight();
        var searchOffset = $(selectors.siteHeader).offset().top - searchHeight;
        const topBarHeight = $('.announcement-bar')?.outerHeight()
        const topNavHeight = $('.site-top-nav')?.outerHeight()
        const top = topBarHeight + topNavHeight - searchHeight
        $(selectors.searchDrawer).css({
          transform: 'translateY(0%)',
          opacity: 1
        });
        $(selectors.searchDrawerInput).focus();
        
        // Add class to body when search is open
        $('body').addClass('js-drawer-open');
        $(searchDrawerOverlayId).css({
          display: 'block'
        })
      }

      const onSearchBarClose = () => {
        $(selectors.searchDrawer).css({
        transform: 'translateY(-100%)',
        opacity: 0
      });

      // Remove class to body when search is closed
      $('body').removeClass('js-drawer-open');
      
      // Remove overlay when search is closed
      $(searchDrawerOverlayId).css({
        display: 'none'
      })
    }
    
    // Open search bar when search icon is clicked
    $("#search-bar-open-icon").on('click', onSearchBarOpen);

    // Close search bar when close icon/overlay is clicked
    $('#search-bar-close-icon').on('click', onSearchBarClose);
    $(searchDrawerOverlayId).on('click', onSearchBarClose);

    // *** End of search bar logic ***
  }

  function initDrawer() {
    // Add required classes to HTML
    $('#PageContainer').addClass('drawer-page-content');
    $('.js-drawer-open-top')
      .attr('aria-controls', 'SearchDrawer')
      .attr('aria-expanded', 'false')
      .attr('aria-haspopup', 'dialog');

    // *** Preventing using class for drawer and implementing new logic above - 15/08/23 ***
    // theme.SearchDrawer = new theme.Drawers('SearchDrawer', 'top', {
    //   onDrawerOpen: searchDrawerFocus,
    //   onDrawerClose: searchDrawerFocusClose
    // });
  }

  function searchDrawerFocus() {
    searchFocus($(selectors.searchDrawerInput));

    if ($(selectors.mobileNavWrapper).hasClass(classes.mobileNavIsOpen)) {
      theme.MobileNav.closeMobileNav();
    }
  }

  function searchFocus($el) {
    $el.focus();
    // set selection range hack for iOS
    $el[0].setSelectionRange(0, $el[0].value.length);
  }

  function searchDrawerFocusClose() {
    $(selectors.siteHeaderSearchToggle).focus();
  }

  /**
   * Remove the aria-attributes and hide the error messages
   */
  function hideErrorMessage() {
    this.$searchErrorMessage.addClass(classes.hidden);
    this.$searchResultInput
      .removeAttr('aria-describedby')
      .removeAttr('aria-invalid');
  }

  /**
   * Add the aria-attributes and show the error messages
   */
  function showErrorMessage() {
    this.$searchErrorMessage.removeClass(classes.hidden);
    this.$searchResultInput
      .attr('aria-describedby', 'error-search-form')
      .attr('aria-invalid', true);
  }

  function validateSearchResultForm(evt) {
    var isInputValueEmpty = this.$searchResultInput.val().trim().length === 0;

    if (!isInputValueEmpty) {
      hideErrorMessage.call(this);
      return;
    }

    if (typeof evt !== 'undefined') {
      evt.preventDefault();
    }

    searchFocus(this.$searchResultInput);
    showErrorMessage.call(this);
  }

  return {
    init: init
  };
})();

(function() {
  var selectors = {
    backButton: '.return-link'
  };

  var $backButton = $(selectors.backButton);

  if (!document.referrer || !$backButton.length || !window.history.length) {
    return;
  }

  $backButton.one('click', function(evt) {
    evt.preventDefault();

    var referrerDomain = urlDomain(document.referrer);
    var shopDomain = urlDomain(window.location.href);

    if (shopDomain === referrerDomain) {
      history.back();
    }

    return false;
  });

  function urlDomain(url) {
    var anchor = document.createElement('a');
    anchor.ref = url;

    return anchor.hostname;
  }
})();

theme.Slideshow = (function() {
  this.$slideshow = null;
  var classes = {
    slideshow: 'slideshow',
    slickActiveMobile: 'slick-active-mobile',
    controlsHover: 'slideshow__controls--hover',
    isPaused: 'is-paused'
  };

  var selectors = {
    section: '.shopify-section',
    wrapper: '#SlideshowWrapper-',
    slides: '.slideshow__slide',
    textWrapperMobile: '.slideshow__text-wrap--mobile',
    textContentMobile: '.slideshow__text-content--mobile',
    controls: '.slideshow__controls',
    pauseButton: '.slideshow__pause',
    dots: '.slick-dots',
    arrows: '.slideshow__arrows',
    arrowsMobile: '.slideshow__arrows--mobile',
    arrowLeft: '.slideshow__arrow-left',
    arrowRight: '.slideshow__arrow-right'
  };

  function slideshow(el, sectionId) {
    var $slideshow = (this.$slideshow = $(el));
    this.adaptHeight = this.$slideshow.data('adapt-height');
    this.$wrapper = this.$slideshow.closest(selectors.wrapper + sectionId);
    this.$section = this.$wrapper.closest(selectors.section);
    this.$controls = this.$wrapper.find(selectors.controls);
    this.$arrows = this.$section.find(selectors.arrows);
    this.$arrowsMobile = this.$section.find(selectors.arrowsMobile);
    this.$pause = this.$controls.find(selectors.pauseButton);
    this.$textWrapperMobile = this.$section.find(selectors.textWrapperMobile);
    this.autorotate = this.$slideshow.data('autorotate');
    var autoplaySpeed = this.$slideshow.data('speed');
    var loadSlideA11yString = this.$slideshow.data('slide-nav-a11y');

    this.settings = {
      accessibility: true,
      arrows: false,
      dots: true,
      fade: true,
      draggable: true,
      touchThreshold: 20,
      autoplay: this.autorotate,
      autoplaySpeed: autoplaySpeed,
      // eslint-disable-next-line shopify/jquery-dollar-sign-reference
      appendDots: this.$arrows,
      customPaging: function(slick, index) {
        return (
          '<a href="' +
          selectors.wrapper +
          sectionId +
          '" aria-label="' +
          loadSlideA11yString.replace('[slide_number]', index + 1) +
          '" data-slide-number="' +
          index +
          '"></a>'
        );
      }
    };

    this.$slideshow.on('beforeChange', beforeChange.bind(this));
    this.$slideshow.on('init', slideshowA11ySetup.bind(this));

    // Add class to style mobile dots & show the correct text content for the
    // first slide on mobile when the slideshow initialises
    this.$slideshow.on(
      'init',
      function() {
        this.$mobileDots
          .find('li:first-of-type')
          .addClass(classes.slickActiveMobile);
        this.showMobileText(0);
      }.bind(this)
    );

    // Stop the autorotate when you scroll past the mobile controls, resume when
    // they are scrolled back into view
    if (this.autorotate) {
      $(document).scroll(
        $.debounce(
          250,
          function() {
            if (
              this.$arrowsMobile.offset().top +
                this.$arrowsMobile.outerHeight() <
              window.pageYOffset
            ) {
              $slideshow.slick('slickPause');
            } else if (!this.$pause.hasClass(classes.isPaused)) {
              $slideshow.slick('slickPlay');
            }
          }.bind(this)
        )
      );
    }

    if (this.adaptHeight) {
      this.setSlideshowHeight();
      $(window).resize($.debounce(50, this.setSlideshowHeight.bind(this)));
    }

    this.$slideshow.slick(this.settings);

    // This can't be called when the slick 'init' event fires due to how slick
    // adds a11y features.
    slideshowPostInitA11ySetup.bind(this)();

    this.$arrows.find(selectors.arrowLeft).on('click', function() {
      $slideshow.slick('slickPrev');
    });
    this.$arrows.find(selectors.arrowRight).on('click', function() {
      $slideshow.slick('slickNext');
    });

    this.$pause.on('click', this.togglePause.bind(this));
  }

  function slideshowA11ySetup(event, obj) {
    var $slider = obj.$slider;
    var $list = obj.$list;
    this.$dots = this.$section.find(selectors.dots);
    this.$mobileDots = this.$dots.eq(1);

    // Remove default Slick aria-live attr until slider is focused
    $list.removeAttr('aria-live');

    this.$wrapper.on('keyup', keyboardNavigation.bind(this));
    this.$controls.on('keyup', keyboardNavigation.bind(this));
    this.$textWrapperMobile.on('keyup', keyboardNavigation.bind(this));

    // When an element in the slider is focused
    // pause slideshow and set aria-live.
    this.$wrapper
      .on(
        'focusin',
        function(evt) {
          if (!this.$wrapper.has(evt.target).length) {
            return;
          }

          $list.attr('aria-live', 'polite');
          if (this.autorotate) {
            $slider.slick('slickPause');
          }
        }.bind(this)
      )
      .on(
        'focusout',
        function(evt) {
          if (!this.$wrapper.has(evt.target).length) {
            return;
          }

          $list.removeAttr('aria-live');
          if (this.autorotate) {
            // Only resume playing if the user hasn't paused using the pause
            // button
            if (!this.$pause.is('.is-paused')) {
              $slider.slick('slickPlay');
            }
          }
        }.bind(this)
      );

    // Add arrow key support when focused
    if (this.$dots) {
      this.$dots
        .find('a')
        .each(function() {
          var $dot = $(this);
          $dot.on('click keyup', function(evt) {
            if (
              evt.type === 'keyup' &&
              evt.which !== slate.utils.keyboardKeys.ENTER
            )
              return;

            evt.preventDefault();

            var slideNumber = $(evt.target).data('slide-number');

            $slider.attr('tabindex', -1).slick('slickGoTo', slideNumber);

            if (evt.type === 'keyup') {
              $slider.focus();
            }
          });
        })
        .eq(0)
        .attr('aria-current', 'true');
    }

    this.$controls
      .on('focusin', highlightControls.bind(this))
      .on('focusout', unhighlightControls.bind(this));
  }

  function slideshowPostInitA11ySetup() {
    var $slides = this.$slideshow.find(selectors.slides);

    $slides.removeAttr('role').removeAttr('aria-labelledby');
    this.$dots
      .removeAttr('role')
      .find('li')
      .removeAttr('role')
      .removeAttr('aria-selected')
      .each(function() {
        var $dot = $(this);
        var ariaControls = $dot.attr('aria-controls');
        $dot
          .removeAttr('aria-controls')
          .find('a')
          .attr('aria-controls', ariaControls);
      });
  }

  function beforeChange(event, slick, currentSlide, nextSlide) {
    var $dotLinks = this.$dots.find('a');
    var $mobileDotLinks = this.$mobileDots.find('li');

    $dotLinks
      .removeAttr('aria-current')
      .eq(nextSlide)
      .attr('aria-current', 'true');

    $mobileDotLinks
      .removeClass(classes.slickActiveMobile)
      .eq(nextSlide)
      .addClass(classes.slickActiveMobile);
    this.showMobileText(nextSlide);
  }

  function keyboardNavigation() {
    if (event.keyCode === slate.utils.keyboardKeys.LEFTARROW) {
      this.$slideshow.slick('slickPrev');
    }
    if (event.keyCode === slate.utils.keyboardKeys.RIGHTARROW) {
      this.$slideshow.slick('slickNext');
    }
  }

  function highlightControls() {
    this.$controls.addClass(classes.controlsHover);
  }

  function unhighlightControls() {
    this.$controls.removeClass(classes.controlsHover);
  }

  slideshow.prototype.togglePause = function() {
    var slideshowSelector = getSlideshowId(this.$pause);
    if (this.$pause.hasClass(classes.isPaused)) {
      this.$pause.removeClass(classes.isPaused).attr('aria-pressed', 'false');
      if (this.autorotate) {
        $(slideshowSelector).slick('slickPlay');
      }
    } else {
      this.$pause.addClass(classes.isPaused).attr('aria-pressed', 'true');
      if (this.autorotate) {
        $(slideshowSelector).slick('slickPause');
      }
    }
  };

  slideshow.prototype.setSlideshowHeight = function() {
    var minAspectRatio = this.$slideshow.data('min-aspect-ratio');
    this.$slideshow.height($(document).width() / minAspectRatio);
  };

  slideshow.prototype.showMobileText = function(slideIndex) {
    var $allTextContent = this.$textWrapperMobile.find(
      selectors.textContentMobile
    );
    var currentTextContentSelector =
      selectors.textContentMobile + '-' + slideIndex;
    var $currentTextContent = this.$textWrapperMobile.find(
      currentTextContentSelector
    );
    if (
      !$currentTextContent.length &&
      this.$slideshow.find(selectors.slides).length === 1
    ) {
      this.$textWrapperMobile.hide();
    } else {
      this.$textWrapperMobile.show();
    }
    $allTextContent.hide();
    $currentTextContent.show();
  };

  function getSlideshowId($el) {
    return '#Slideshow-' + $el.data('id');
  }

  return slideshow;
})();

// Youtube API callback
// eslint-disable-next-line no-unused-vars
function onYouTubeIframeAPIReady() {
  theme.Video.loadVideos();
}

theme.Video = (function() {
  var autoplayCheckComplete = false;
  var playOnClickChecked = false;
  var playOnClick = false;
  var youtubeLoaded = false;
  var videos = {};
  var videoPlayers = [];
  var videoOptions = {
    ratio: 16 / 9,
    scrollAnimationDuration: 400,
    playerVars: {
      // eslint-disable-next-line camelcase
      iv_load_policy: 3,
      modestbranding: 1,
      autoplay: 0,
      controls: 0,
      wmode: 'opaque',
      branding: 0,
      autohide: 0,
      rel: 0
    },
    events: {
      onReady: onPlayerReady,
      onStateChange: onPlayerChange
    }
  };
  var classes = {
    playing: 'video-is-playing',
    paused: 'video-is-paused',
    loading: 'video-is-loading',
    loaded: 'video-is-loaded',
    backgroundVideoWrapper: 'video-background-wrapper',
    videoWithImage: 'video--image_with_play',
    backgroundVideo: 'video--background',
    userPaused: 'is-paused',
    supportsAutoplay: 'autoplay',
    supportsNoAutoplay: 'no-autoplay',
    wrapperMinHeight: 'video-section-wrapper--min-height'
  };

  var selectors = {
    section: '.video-section',
    videoWrapper: '.video-section-wrapper',
    playVideoBtn: '.video-control__play',
    closeVideoBtn: '.video-control__close-wrapper',
    pauseVideoBtn: '.video__pause',
    pauseVideoStop: '.video__pause-stop',
    pauseVideoResume: '.video__pause-resume',
    fallbackText: '.icon__fallback-text'
  };

  /**
   * Public functions
   */
  function init($video) {
    if (!$video.length) {
      return;
    }

    videos[$video.attr('id')] = {
      id: $video.attr('id'),
      videoId: $video.data('id'),
      type: $video.data('type'),
      status:
        $video.data('type') === 'image_with_play' ? 'closed' : 'background', // closed, open, background
      $video: $video,
      $videoWrapper: $video.closest(selectors.videoWrapper),
      $section: $video.closest(selectors.section),
      controls: $video.data('type') === 'background' ? 0 : 1
    };

    if (!youtubeLoaded) {
      // This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');
      tag.src = 'https://www.youtube.com/iframe_api';
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    }

    playOnClickCheck();
  }

  function customPlayVideo(playerId) {
    // Make sure we have carried out the playOnClick check first
    if (!playOnClickChecked && !playOnClick) {
      return;
    }

    if (playerId && typeof videoPlayers[playerId].playVideo === 'function') {
      privatePlayVideo(playerId);
    }
  }

  function pauseVideo(playerId) {
    if (
      videoPlayers[playerId] &&
      typeof videoPlayers[playerId].pauseVideo === 'function'
    ) {
      videoPlayers[playerId].pauseVideo();
    }
  }

  function loadVideos() {
    for (var key in videos) {
      if (videos.hasOwnProperty(key)) {
        createPlayer(key);
      }
    }

    initEvents();
    youtubeLoaded = true;
  }

  function editorLoadVideo(key) {
    if (!youtubeLoaded) {
      return;
    }
    createPlayer(key);

    initEvents();
  }

  /**
   * Private functions
   */

  function privatePlayVideo(id, clicked) {
    var videoData = videos[id];
    var player = videoPlayers[id];
    var $videoWrapper = videoData.$videoWrapper;

    if (playOnClick) {
      // playOnClick means we are probably on mobile (no autoplay).
      // setAsPlaying will show the iframe, requiring another click
      // to play the video.
      setAsPlaying(videoData);
    } else if (clicked || autoplayCheckComplete) {
      // Play if autoplay is available or clicked to play
      $videoWrapper.removeClass(classes.loading);
      setAsPlaying(videoData);
      player.playVideo();
      return;
    } else {
      player.playVideo();
    }
  }

  function setAutoplaySupport(supported) {
    var supportClass = supported
      ? classes.supportsAutoplay
      : classes.supportsNoAutoplay;
    $(document.documentElement)
      .removeClass(classes.supportsAutoplay)
      .removeClass(classes.supportsNoAutoplay)
      .addClass(supportClass);

    if (!supported) {
      playOnClick = true;
    }

    autoplayCheckComplete = true;
  }

  function playOnClickCheck() {
    // Bail early for a few instances:
    // - small screen
    // - device sniff mobile browser

    if (playOnClickChecked) {
      return;
    }

    if (isMobile()) {
      playOnClick = true;
    }

    if (playOnClick) {
      // No need to also do the autoplay check
      setAutoplaySupport(false);
    }

    playOnClickChecked = true;
  }

  // The API will call this function when each video player is ready
  function onPlayerReady(evt) {
    evt.target.setPlaybackQuality('hd1080');
    var videoData = getVideoOptions(evt);
    var videoTitle = evt.target.getVideoData().title;
    playOnClickCheck();

    // Prevent tabbing through YouTube player controls until visible
    $('#' + videoData.id).attr('tabindex', '-1');

    sizeBackgroundVideos();
    setButtonLabels(videoData.$videoWrapper, videoTitle);

    // Customize based on options from the video ID
    if (videoData.type === 'background') {
      evt.target.mute();
      privatePlayVideo(videoData.id);
    }

    videoData.$videoWrapper.addClass(classes.loaded);
  }

  function onPlayerChange(evt) {
    var videoData = getVideoOptions(evt);
    if (
      videoData.status === 'background' &&
      !isMobile() &&
      !autoplayCheckComplete &&
      (evt.data === YT.PlayerState.PLAYING ||
        evt.data === YT.PlayerState.BUFFERING)
    ) {
      setAutoplaySupport(true);
      autoplayCheckComplete = true;
      videoData.$videoWrapper.removeClass(classes.loading);
    }
    switch (evt.data) {
      case YT.PlayerState.ENDED:
        setAsFinished(videoData);
        break;
      case YT.PlayerState.PAUSED:
        // Seeking on a YouTube video also fires a PAUSED state change,
        // checking the state after a delay prevents us pausing the video when
        // the user is seeking instead of pausing
        setTimeout(function() {
          if (evt.target.getPlayerState() === YT.PlayerState.PAUSED) {
            setAsPaused(videoData);
          }
        }, 200);
        break;
    }
  }

  function setAsFinished(videoData) {
    switch (videoData.type) {
      case 'background':
        videoPlayers[videoData.id].seekTo(0);
        break;
      case 'image_with_play':
        closeVideo(videoData.id);
        toggleExpandVideo(videoData.id, false);
        break;
    }
  }

  function setAsPlaying(videoData) {
    var $videoWrapper = videoData.$videoWrapper;
    var $pauseButton = $videoWrapper.find(selectors.pauseVideoBtn);

    $videoWrapper.removeClass(classes.loading);

    if ($pauseButton.hasClass(classes.userPaused)) {
      $pauseButton.removeClass(classes.userPaused);
    }

    // Do not change element visibility if it is a background video
    if (videoData.status === 'background') {
      return;
    }

    $('#' + videoData.id).attr('tabindex', '0');

    if (videoData.type === 'image_with_play') {
      $videoWrapper.removeClass(classes.paused).addClass(classes.playing);
    }

    // Update focus to the close button so we stay within the video wrapper,
    // allowing time for the scroll animation
    setTimeout(function() {
      $videoWrapper.find(selectors.closeVideoBtn).focus();
    }, videoOptions.scrollAnimationDuration);
  }

  function setAsPaused(videoData) {
    var $videoWrapper = videoData.$videoWrapper;

    // YT's events fire after our click event. This status flag ensures
    // we don't interact with a closed or background video.
    if (videoData.type === 'image_with_play') {
      if (videoData.status === 'closed') {
        $videoWrapper.removeClass(classes.paused);
      } else {
        $videoWrapper.addClass(classes.paused);
      }
    }

    $videoWrapper.removeClass(classes.playing);
  }

  function closeVideo(playerId) {
    var videoData = videos[playerId];
    var $videoWrapper = videoData.$videoWrapper;
    var classesToRemove = [classes.paused, classes.playing].join(' ');

    if (isMobile()) {
      $videoWrapper.removeAttr('style');
    }

    $('#' + videoData.id).attr('tabindex', '-1');

    videoData.status = 'closed';

    switch (videoData.type) {
      case 'image_with_play':
        videoPlayers[playerId].stopVideo();
        setAsPaused(videoData); // in case the video is already paused
        break;
      case 'background':
        videoPlayers[playerId].mute();
        setBackgroundVideo(playerId);
        break;
    }

    $videoWrapper.removeClass(classesToRemove);
  }

  function getVideoOptions(evt) {
    return videos[evt.target.a.id];
  }

  function toggleExpandVideo(playerId, expand) {
    var video = videos[playerId];
    var elementTop = video.$videoWrapper.offset().top;
    var $playButton = video.$videoWrapper.find(selectors.playVideoBtn);
    var offset = 0;
    var newHeight = 0;

    if (isMobile()) {
      video.$videoWrapper.parent().toggleClass('page-width', !expand);
    }

    if (expand) {
      if (isMobile()) {
        newHeight = $(window).width() / videoOptions.ratio;
      } else {
        newHeight = video.$videoWrapper.width() / videoOptions.ratio;
      }
      offset = ($(window).height() - newHeight) / 2;

      video.$videoWrapper
        .removeClass(classes.wrapperMinHeight)
        .animate({ height: newHeight }, 600);

      // Animate doesn't work in mobile editor, so we don't use it
      if (!(isMobile() && Shopify.designMode)) {
        $('html, body').animate(
          {
            scrollTop: elementTop - offset
          },
          videoOptions.scrollAnimationDuration
        );
      }
    } else {
      if (isMobile()) {
        newHeight = video.$videoWrapper.data('mobile-height');
      } else {
        newHeight = video.$videoWrapper.data('desktop-height');
      }

      video.$videoWrapper
        .height(video.$videoWrapper.width() / videoOptions.ratio)
        .animate({ height: newHeight }, 600);
      setTimeout(function() {
        video.$videoWrapper.addClass(classes.wrapperMinHeight);
      }, 600);
      $playButton.focus();
    }
  }

  function togglePause(playerId) {
    var $pauseButton = videos[playerId].$videoWrapper.find(
      selectors.pauseVideoBtn
    );
    var paused = $pauseButton.hasClass(classes.userPaused);
    if (paused) {
      $pauseButton.removeClass(classes.userPaused);
      customPlayVideo(playerId);
    } else {
      $pauseButton.addClass(classes.userPaused);
      pauseVideo(playerId);
    }
    $pauseButton.attr('aria-pressed', !paused);
  }

  function startVideoOnClick(playerId) {
    var video = videos[playerId];

    // add loading class to wrapper
    video.$videoWrapper.addClass(classes.loading);

    // Explicity set the video wrapper height (needed for height transition)
    video.$videoWrapper.attr(
      'style',
      'height: ' + video.$videoWrapper.height() + 'px'
    );

    video.status = 'open';

    switch (video.type) {
      case 'image_with_play':
        privatePlayVideo(playerId, true);
        break;
      case 'background':
        unsetBackgroundVideo(playerId, video);
        videoPlayers[playerId].unMute();
        privatePlayVideo(playerId, true);
        break;
    }

    toggleExpandVideo(playerId, true);

    // esc to close video player
    $(document).on('keydown.videoPlayer', function(evt) {
      var playerId = $(document.activeElement).data('controls');
      if (evt.keyCode !== slate.utils.keyboardKeys.ESCAPE || !playerId) {
        return;
      }

      closeVideo(playerId);
      toggleExpandVideo(playerId, false);
    });
  }

  function sizeBackgroundVideos() {
    $('.' + classes.backgroundVideo).each(function(index, el) {
      sizeBackgroundVideo($(el));
    });
  }

  function sizeBackgroundVideo($videoPlayer) {
    if (!youtubeLoaded) {
      return;
    }

    if (isMobile()) {
      $videoPlayer.removeAttr('style');
    } else {
      var $videoWrapper = $videoPlayer.closest(selectors.videoWrapper);
      var videoWidth = $videoWrapper.width();
      var playerWidth = $videoPlayer.width();
      var desktopHeight = $videoWrapper.data('desktop-height');

      // when screen aspect ratio differs from video, video must center and underlay one dimension
      if (videoWidth / videoOptions.ratio < desktopHeight) {
        playerWidth = Math.ceil(desktopHeight * videoOptions.ratio); // get new player width
        $videoPlayer
          .width(playerWidth)
          .height(desktopHeight)
          .css({
            left: (videoWidth - playerWidth) / 2,
            top: 0
          }); // player width is greater, offset left; reset top
      } else {
        // new video width < window width (gap to right)
        desktopHeight = Math.ceil(videoWidth / videoOptions.ratio); // get new player height
        $videoPlayer
          .width(videoWidth)
          .height(desktopHeight)
          .css({
            left: 0,
            top: (desktopHeight - desktopHeight) / 2
          }); // player height is greater, offset top; reset left
      }

      $videoPlayer.prepareTransition();
      $videoWrapper.addClass(classes.loaded);
    }
  }

  function unsetBackgroundVideo(playerId) {
    // Switch the background video to a chrome-only player once played
    $('#' + playerId)
      .removeClass(classes.backgroundVideo)
      .addClass(classes.videoWithImage);

    setTimeout(function() {
      $('#' + playerId).removeAttr('style');
    }, 600);

    videos[playerId].$videoWrapper
      .removeClass(classes.backgroundVideoWrapper)
      .addClass(classes.playing);

    videos[playerId].status = 'open';
  }

  function setBackgroundVideo(playerId) {
    $('#' + playerId)
      .removeClass(classes.videoWithImage)
      .addClass(classes.backgroundVideo);

    videos[playerId].$videoWrapper.addClass(classes.backgroundVideoWrapper);

    videos[playerId].status = 'background';
    sizeBackgroundVideo($('#' + playerId));
  }

  function isMobile() {
    return $(window).width() < 750 || window.mobileCheck();
  }

  function initEvents() {
    $(document).on('click.videoPlayer', selectors.playVideoBtn, function(evt) {
      var playerId = $(evt.currentTarget).data('controls');

      startVideoOnClick(playerId);
    });

    $(document).on('click.videoPlayer', selectors.closeVideoBtn, function(evt) {
      var playerId = $(evt.currentTarget).data('controls');

      $(evt.currentTarget).blur();
      closeVideo(playerId);
      toggleExpandVideo(playerId, false);
    });

    $(document).on('click.videoPlayer', selectors.pauseVideoBtn, function(evt) {
      var playerId = $(evt.currentTarget).data('controls');
      togglePause(playerId);
    });

    // Listen to resize to keep a background-size:cover-like layout
    $(window).on(
      'resize.videoPlayer',
      $.debounce(200, function() {
        if (!youtubeLoaded) return;
        var key;
        var fullscreen = window.innerHeight === screen.height;

        sizeBackgroundVideos();

        if (isMobile()) {
          for (key in videos) {
            if (videos.hasOwnProperty(key)) {
              if (videos[key].$videoWrapper.hasClass(classes.playing)) {
                if (!fullscreen) {
                  pauseVideo(key);
                  setAsPaused(videos[key]);
                }
              }
              videos[key].$videoWrapper.height(
                $(document).width() / videoOptions.ratio
              );
            }
          }
          setAutoplaySupport(false);
        } else {
          setAutoplaySupport(true);
          for (key in videos) {
            if (
              videos[key].$videoWrapper.find('.' + classes.videoWithImage)
                .length
            ) {
              continue;
            }
            videoPlayers[key].playVideo();
            setAsPlaying(videos[key]);
          }
        }
      })
    );

    $(window).on(
      'scroll.videoPlayer',
      $.debounce(50, function() {
        if (!youtubeLoaded) return;

        for (var key in videos) {
          if (videos.hasOwnProperty(key)) {
            var $videoWrapper = videos[key].$videoWrapper;

            // Close the video if more than 75% of it is scrolled out of view
            if (
              $videoWrapper.hasClass(classes.playing) &&
              ($videoWrapper.offset().top + $videoWrapper.height() * 0.75 <
                $(window).scrollTop() ||
                $videoWrapper.offset().top + $videoWrapper.height() * 0.25 >
                  $(window).scrollTop() + $(window).height())
            ) {
              closeVideo(key);
              toggleExpandVideo(key, false);
            }
          }
        }
      })
    );
  }

  function createPlayer(key) {
    var args = $.extend({}, videoOptions, videos[key]);
    args.playerVars.controls = args.controls;
    videoPlayers[key] = new YT.Player(key, args);
  }

  function removeEvents() {
    $(document).off('.videoPlayer');
    $(window).off('.videoPlayer');
  }

  function setButtonLabels($videoWrapper, title) {
    var $playButtons = $videoWrapper.find(selectors.playVideoBtn);
    var $closeButton = $videoWrapper.find(selectors.closeVideoBtn);
    var $pauseButton = $videoWrapper.find(selectors.pauseVideoBtn);
    var $closeButtonText = $closeButton.find(selectors.fallbackText);
    var $pauseButtonStopText = $pauseButton
      .find(selectors.pauseVideoStop)
      .find(selectors.fallbackText);
    var $pauseButtonResumeText = $pauseButton
      .find(selectors.pauseVideoResume)
      .find(selectors.fallbackText);

    // Insert the video title retrieved from YouTube into the instructional text
    // for each button
    $playButtons.each(function() {
      var $playButton = $(this);
      var $playButtonText = $playButton.find(selectors.fallbackText);

      $playButtonText.text(
        $playButtonText.text().replace('[video_title]', title)
      );
    });
    $closeButtonText.text(
      $closeButtonText.text().replace('[video_title]', title)
    );
    $pauseButtonStopText.text(
      $pauseButtonStopText.text().replace('[video_title]', title)
    );
    $pauseButtonResumeText.text(
      $pauseButtonResumeText.text().replace('[video_title]', title)
    );
  }

  return {
    init: init,
    editorLoadVideo: editorLoadVideo,
    loadVideos: loadVideos,
    playVideo: customPlayVideo,
    pauseVideo: pauseVideo,
    removeEvents: removeEvents
  };
})();

window.theme = window.theme || {};

theme.FormStatus = (function() {
  var selectors = {
    statusMessage: '[data-form-status]'
  };

  function init() {
    this.$statusMessage = $(selectors.statusMessage);

    if (!this.$statusMessage) return;

    this.$statusMessage.attr('tabindex', -1).focus();

    this.$statusMessage.on('blur', handleBlur.bind(this));
  }

  function handleBlur() {
    this.$statusMessage.removeAttr('tabindex');
  }

  return {
    init: init
  };
})();

theme.Hero = (function() {
  var classes = {
    indexSectionFlush: 'index-section--flush'
  };

  var selectors = {
    heroFixedWidthContent: '.hero-fixed-width__content',
    heroFixedWidthImage: '.hero-fixed-width__image'
  };

  function hero(el, sectionId) {
    this.$hero = $(el);
    this.layout = this.$hero.data('layout');
    var $parentSection = $('#shopify-section-' + sectionId);
    var $heroContent = $parentSection.find(selectors.heroFixedWidthContent);
    var $heroImage = $parentSection.find(selectors.heroFixedWidthImage);

    if (this.layout !== 'fixed_width') {
      return;
    }

    $parentSection.removeClass(classes.indexSectionFlush);
    heroFixedHeight();
    $(window).resize(
      $.debounce(50, function() {
        heroFixedHeight();
      })
    );

    function heroFixedHeight() {
      var contentHeight = $heroContent.height() + 50;
      var imageHeight = $heroImage.height();

      if (contentHeight > imageHeight) {
        $heroImage.css('min-height', contentHeight);
      }
    }
  }

  return hero;
})();

/* ================ TEMPLATES ================ */
(function() {
  var $filterBy = $('#BlogTagFilter');

  if (!$filterBy.length) {
    return;
  }

  $filterBy.on('change', function() {
    location.href = $(this).val();
  });
})();

window.theme = theme || {};

theme.customerTemplates = (function() {
  var selectors = {
    RecoverHeading: '#RecoverHeading',
    RecoverEmail: '#RecoverEmail',
    LoginHeading: '#LoginHeading'
  };

  function initEventListeners() {
    this.$RecoverHeading = $(selectors.RecoverHeading);
    this.$RecoverEmail = $(selectors.RecoverEmail);
    this.$LoginHeading = $(selectors.LoginHeading);

    // Show reset password form
    $('#RecoverPassword').on(
      'click',
      function(evt) {
        evt.preventDefault();
        showRecoverPasswordForm();
        this.$RecoverHeading.attr('tabindex', '-1').focus();
      }.bind(this)
    );

    // Hide reset password form
    $('#HideRecoverPasswordLink').on(
      'click',
      function(evt) {
        evt.preventDefault();
        hideRecoverPasswordForm();
        this.$LoginHeading.attr('tabindex', '-1').focus();
      }.bind(this)
    );

    this.$RecoverHeading.on('blur', function() {
      $(this).removeAttr('tabindex');
    });

    this.$LoginHeading.on('blur', function() {
      $(this).removeAttr('tabindex');
    });
  }

  /**
   *
   *  Show/Hide recover password form
   *
   */

  function showRecoverPasswordForm() {
    $('#RecoverPasswordForm').removeClass('hide');
    $('#CustomerLoginForm, #CreateAccountForm').addClass('hide');

    if (this.$RecoverEmail.attr('aria-invalid') === 'true') {
      this.$RecoverEmail.focus();
    }
  }

  function hideRecoverPasswordForm() {
    $('#RecoverPasswordForm').addClass('hide');
    $('#CustomerLoginForm, #CreateAccountForm').removeClass('hide');
  }

  /**
   *
   *  Show reset password success message
   *
   */
  function resetPasswordSuccess() {
    var $formState = $('.reset-password-success');

    // check if reset password form was successfully submited.
    if (!$formState.length) {
      return;
    }

    // show success message
    $('#ResetSuccess')
      .removeClass('hide')
      .focus();
  }

  /**
   *
   *  Show/hide customer address forms
   *
   */
  function customerAddressForm() {
    var $newAddressForm = $('#AddressNewForm');
    var $newAddressFormButton = $('#AddressNewButton');

    if (!$newAddressForm.length) {
      return;
    }

    // Initialize observers on address selectors, defined in shopify_common.js
    if (Shopify) {
      // eslint-disable-next-line no-new
      new Shopify.CountryProvinceSelector(
        'AddressCountryNew',
        'AddressProvinceNew',
        {
          hideElement: 'AddressProvinceContainerNew'
        }
      );
    }

    // Initialize each edit form's country/province selector
    $('.address-country-option').each(function() {
      var formId = $(this).data('form-id');
      var countrySelector = 'AddressCountry_' + formId;
      var provinceSelector = 'AddressProvince_' + formId;
      var containerSelector = 'AddressProvinceContainer_' + formId;

      // eslint-disable-next-line no-new
      new Shopify.CountryProvinceSelector(countrySelector, provinceSelector, {
        hideElement: containerSelector
      });
    });

    // Toggle new/edit address forms
    $('.address-new-toggle').on('click', function() {
      var isExpanded = $newAddressFormButton.attr('aria-expanded') === 'true';

      $newAddressForm.toggleClass('hide');
      $newAddressFormButton.attr('aria-expanded', !isExpanded).focus();
    });

    $('.address-edit-toggle').on('click', function() {
      var formId = $(this).data('form-id');
      var $editButton = $('#EditFormButton_' + formId);
      var $editAddress = $('#EditAddress_' + formId);
      var isExpanded = $editButton.attr('aria-expanded') === 'true';


      if(isExpanded){
        $(".address-delete").attr("disabled", false);
      }
      else{
        $(".address-delete").attr("disabled", true);
      }
     

      $editAddress.toggleClass('hide');
      $editButton.attr('aria-expanded', !isExpanded).focus();
    });

    $('.address-delete').on('click', function() {
      var $el = $(this);
      var target = $el.data('target');
      var confirmMessage = $el.data('confirm-message');

      // eslint-disable-next-line no-alert
      if (
        confirm(
          confirmMessage || 'Are you sure you wish to delete this address?'
        )
      ) {
        Shopify.postLink(target, {
          parameters: { _method: 'delete' }
        });
      }
    });
  }

  /**
   *
   *  Check URL for reset password hash
   *
   */
  function checkUrlHash() {
    var hash = window.location.hash;

    // Allow deep linking to recover password form
    if (hash === '#recover') {
      showRecoverPasswordForm.bind(this)();
    }
  }

  return {
    init: function() {
      initEventListeners();
      checkUrlHash();
      resetPasswordSuccess();
      customerAddressForm();
    }
  };
})();


/*================ SECTIONS ================*/
window.theme = window.theme || {};

theme.Cart = (function() {
  var selectors = {
    cartCount: '[data-cart-count]',
    cartCountBubble: '[data-cart-count-bubble]',
    cartDiscount: '[data-cart-discount]',
    cartDiscountTitle: '[data-cart-discount-title]',
    cartDiscountAmount: '[data-cart-discount-amount]',
    cartDiscountWrapper: '[data-cart-discount-wrapper]',
    cartErrorMessage: '[data-cart-error-message]',
    cartErrorMessageWrapper: '[data-cart-error-message-wrapper]',
    cartItem: '[data-cart-item]',
    cartItemDetails: '[data-cart-item-details]',
    cartItemDiscount: '[data-cart-item-discount]',
    cartItemDiscountedPriceGroup: '[data-cart-item-discounted-price-group]',
    cartItemDiscountTitle: '[data-cart-item-discount-title]',
    cartItemDiscountAmount: '[data-cart-item-discount-amount]',
    cartItemDiscountList: '[data-cart-item-discount-list]',
    cartItemFinalPrice: '[data-cart-item-final-price]',
    cartItemImage: '[data-cart-item-image]',
    cartItemLinePrice: '[data-cart-item-line-price]',
    cartItemOriginalPrice: '[data-cart-item-original-price]',
    cartItemPrice: '[data-cart-item-price]',
    cartItemPriceList: '[data-cart-item-price-list]',
    cartItemProperty: '[data-cart-item-property]',
    cartItemPropertyName: '[data-cart-item-property-name]',
    cartItemPropertyValue: '[data-cart-item-property-value]',
    cartItemRegularPriceGroup: '[data-cart-item-regular-price-group]',
    cartItemRegularPrice: '[data-cart-item-regular-price]',
    cartItemCompareAtPrice: '[data-cart-item-compare-at-price]',
    cartItemTitle: '[data-cart-item-title]',
    cartItemOption: '[data-cart-item-option]',
    cartLineItems: '[data-cart-line-items]',
    cartNote: '[data-cart-notes]',
    cartGiftWrap: '[data-cart-gift-wrap]',
    cartQuantityErrorMessage: '[data-cart-quantity-error-message]',
    cartQuantityErrorMessageWrapper: '[data-cart-quantity-error-message-wrapper]',
    cartRemove: '[data-cart-remove]',
    cartEdit: '[data-cart-edit]',
    cartItemAction: '.cart-item__action',
    cartStatus: '[data-cart-status]',
    cartSubtotal: '[data-cart-subtotal]',
    cartTax: '[data-cart-tax]',
    cartTotal: '[data-cart-total]',
    cartAfterPay: '[data-cart-afterpay]',
    cartTableCell: '[data-cart-table-cell]',
    cartWrapper: '[data-cart-wrapper]',
    emptyPageContent: '[data-empty-page-content]',
    quantityInput: '[data-quantity-input]',
    quantityInputMobile: '[data-quantity-input-mobile]',
    quantityInputDesktop: '[data-quantity-input-desktop]',
    quantityLabelMobile: '[data-quantity-label-mobile]',
    quantityLabelDesktop: '[data-quantity-label-desktop]',
    inputQty: '[data-quantity-input]',
    thumbnails: '.cart__image',
    unitPrice: '[data-unit-price]',
    unitPriceBaseUnit: '[data-unit-price-base-unit]',
    unitPriceGroup: '[data-unit-price-group]',
    freeShippingBar: '[data-freeshipping-bar]',
    freeShippingMessage: '[data-freeshipping-message]',
    freeShippingProgress: '[data-freeshipping-progress]',
    isoCode: '[data-iso-code]',
    currencySymbol: '[data-currency-symbol]'
  };

  var classes = {
    cartNoCookies: 'cart--no-cookies',
    cartRemovedProduct: 'cart__removed-product',
    hide: 'hide',
    inputError: 'input--error',
    freeGWP: 'free-gwp-row'
  };

  var attributes = {
    cartItemIndex: 'data-cart-item-index',
    cartItemKey: 'data-cart-item-key',
    cartItemQuantity: 'data-cart-item-quantity',
    cartItemTitle: 'data-cart-item-title',
    cartItemUrl: 'data-cart-item-url',
    quantityItem: 'data-quantity-item'
  };

  var mediumUpQuery = '(min-width: ' + theme.breakpoints.medium + 'px)';

  function Cart(container) {
    this.$container = $(container);
    this.$thumbnails = $(selectors.thumbnails, this.$container);
    this.ajaxEnabled = this.$container.data('ajax-enabled');

    if (!this.cookiesEnabled()) {
      this.$container.addClass(classes.cartNoCookies);
    }

    this.$thumbnails.css('cursor', 'pointer');
    this.$container.on(
      'click',
      selectors.thumbnails,
      this._handleThumbnailClick
    );

    this.$container.on(
      'change',
      selectors.inputQty,
      $.debounce(500, this._handleInputQty.bind(this))
    );

    this.mql = window.matchMedia(mediumUpQuery);
    this.mql.addListener(this.setQuantityFormControllers.bind(this));
    this.setQuantityFormControllers();

    // document.addEventListener("createCart", (e) => this._createCart(e.detail));

    if (this.ajaxEnabled) {
      /**
       * Because the entire cart is recreated when a cart item is updated,
       * we cannot cache the elements in the cart. Instead, we add the event
       * listeners on the cart's container to allow us to retain the event
       * listeners after rebuilding the cart when an item is updated.
       */

      this.$container.on(
        'change',
        selectors.cartNote,
        this._onNoteChange.bind(this)
      );

      this.$container.on(
        'change',
        selectors.cartGiftWrap,
        this._onGiftWrapAdd.bind(this)
      );

      this.$container.on(
        'click',
        selectors.cartRemove,
        this._onRemoveItem.bind(this)
      );

      this.$container.on(
        'click',
        selectors.cartEdit,
        this._onEditItem.bind(this)
      );

      theme.wishlist.init(selectors.cartItemAction)

      this._setupCartTemplates();
      this.freeShippingBar();
    }
  }

  Cart.prototype = _.assignIn({}, Cart.prototype, {
    _setupCartTemplates: function() {
      this.$itemTemplate = $(selectors.cartItem, this.$container)
        .first()
        .clone();
      this.$itemDiscountTemplate = $(
        selectors.cartItemDiscount,
        this.$itemTemplate
      ).clone();
      this.$itemOptionTemplate = $(
        selectors.cartItemOption,
        this.$itemTemplate
      ).clone();
      this.$itemPropertyTemplate = $(
        selectors.cartItemProperty,
        this.$itemTemplate
      ).clone();
      this.$itemPriceListTemplate = $(
        selectors.cartItemPriceList,
        this.$itemTemplate
      ).clone();
      this.$itemLinePriceTemplate = $(
        selectors.cartItemLinePrice,
        this.$itemTemplate
      ).clone();
      this.$cartDiscountTemplate = $(
        selectors.cartDiscount,
        this.$container
      ).clone();
    },

    _handleInputQty: function(evt) {
      var $input = $(evt.target);
      var itemIndex = $input.data('quantity-item');
      var $itemElement = $input.closest(selectors.cartItem);
      var $itemQtyInputs = $('[data-quantity-item=' + itemIndex + ']');
      var value = parseInt($input.val());
      var isValidValue = !(value < 0 || isNaN(value));
      $itemQtyInputs.val(value);

      this._hideCartError();
      this._hideQuantityErrorMessage();

      if (!isValidValue) {
        this._showQuantityErrorMessages($itemElement);
        return;
      }

      if (isValidValue && this.ajaxEnabled) {
        this._updateItemQuantity(
          itemIndex,
          $itemElement,
          $itemQtyInputs,
          value
        );
      }
    },

    _updateItemQuantity: function(
      itemIndex,
      $itemElement,
      $itemQtyInputs,
      value
    ) {
      var key = $itemElement.attr(attributes.cartItemKey);
      var index = $itemElement.attr(attributes.cartItemIndex);

      var params = {
        url: '/cart/change.js',
        data: { quantity: value, line: index },
        dataType: 'json'
      };

      $.post(params)
        .done(
          function(state) {
            if (state.item_count === 0) {
              this._emptyCart();
            } else {
              this._createCart(state);
              this.freeShippingBar(state.total_price);

              if (value === 0) {
                this._showRemoveMessage($itemElement.clone());
              } else {
                var $lineItem = $('[data-cart-item-key="' + key + '"]');
                var item = this.getItem(key, state);

                $(selectors.quantityInput, $lineItem).focus();
                this._updateLiveRegion(item);
              }
            }

            this._setCartCountBubble(state.item_count);
          }.bind(this)
        )
        .fail(
          function() {
            this._showCartError($itemQtyInputs);
          }.bind(this)
        );
    },

    freeShippingBar: async function(total_price) {
      const decode = str => decodeURIComponent(str).replace(/\+/g, ' '); // Hello%20World -> Hello World and replaces +
      const freeShippingBars = document.querySelectorAll(selectors.freeShippingBar); 

      if (!freeShippingBars.length) {
        console.error('No free shipping bars found on the page')
        return
      }

      const freeShippingCartTotal = freeShippingBars[0].dataset.freeshippingCartTotal
      const isoCode = freeShippingBars[0].dataset.isoCode
      const currencySymbol = freeShippingBars[0].dataset.currencySymbol

      let cart
      try {
        const res = await fetch('/cart.js')
        cart = await res.json()
      } catch (error) {
        console.error('Could not fetch cart in freeShippingBar: ', error)
        return
      }

      freeShippingBars.forEach((_freeShippingBar) => {
        const _freeShippingMessage = _freeShippingBar.querySelector(selectors.freeShippingMessage);
        const _freeShippingProgress = _freeShippingBar.querySelector(selectors.freeShippingProgress);
        let data
        try {
          const dataJson = JSON.parse(decode(_freeShippingBar.dataset.settings));
          data = dataJson.dataSetting;
        } catch (error) {
          console.error('Could not parse free shipping bar settings: ', error)
          return
        }
        // Logic to put all the 'special' currencies that don't need to be converted in an array
        const specialRatesCurrencies = ['AUD', 'NZD', 'USD']
        data.forEach(el => {
          if (el.shippingCurrency !== null) {
            specialRatesCurrencies.push(el.shippingCurrency); // ['USD', 'CAD', 'GBP']
          }
        })
        if (!specialRatesCurrencies.includes(isoCode)) {
          _toggleProgressBar('hide')
          return
        }

        _toggleProgressBar('show')
        data.forEach(el => {
          const shippingOrderValue = el.shippingOrderValue.split('-').map(item => parseInt(item.replace('$', '').trim()));
          let cartTotal = total_price ? parseInt(total_price, 10) / 100 : parseInt(freeShippingCartTotal, 10) / 100;
          // Start Gift Card exclusion Logic
          // Using Filter instead of Find as there can be multiple gift cards in the cart
          const ajeGiftCards = cart.items.filter(product => product.handle === 'aje-gift-voucher')
          const normalItems = cart.items.filter(product => product.handle !== 'aje-gift-voucher')
          // Early Return if there are only gift cards in the cart
          if (ajeGiftCards.length > 0 && normalItems.length === 0) {
            _toggleProgressBar('hide')
            return
          }
          // Excludes GiftCard Pricing from the cart total
          if (ajeGiftCards) {
            let giftCardTotalPrice = ajeGiftCards.reduce((total, ajeGiftCard) => {
              const cardPrice = parseInt(ajeGiftCard.price, 10) / 100;
              return total + cardPrice;
            }, 0);
            cartTotal -= giftCardTotalPrice;
          }
          // End Gift Card exclusion Logic
          if (
            shippingOrderValue.length > 1
            && shippingOrderValue[0] <= cartTotal
            && cartTotal < shippingOrderValue[1]
            && (el.shippingCurrency === null || el.shippingCurrency === isoCode)
          ) {

            let remainder = isoCode === 'JPY' ? 
              ((Math.abs(cartTotal - shippingOrderValue[1])).toLocaleString('ja-JP')) 
              : 
              ((Math.abs(cartTotal - shippingOrderValue[1])).toLocaleString('en-US', { minimumFractionDigits: 2 }))

              switch (isoCode) {
                case 'SAR':
                case 'AED':
                  amount = el.shippingMessage.replace('$XX', remainder + ' ' + isoCode);
                  break;
                case 'NZD':
                case 'USD':
                  amount = el.shippingMessage.replace('$XX', isoCode + ' ' + currencySymbol + remainder);
                  break;
                case 'AUD':
                  amount = el.shippingMessage.replace('$XX', currencySymbol + remainder);
                  break;
                default:
                  amount = el.shippingMessage.replace('$XX', currencySymbol + remainder + ' ' + isoCode);
                  break;
              }

            _freeShippingMessage.innerText = amount
            _setProgressBar(cartTotal, shippingOrderValue[1]);
          }
          if (
            shippingOrderValue.length === 1 
            && shippingOrderValue[0] <= cartTotal
            && (el.shippingCurrency === null || el.shippingCurrency === isoCode)
          )  {
            _freeShippingMessage.innerText = el.shippingMessage;
            _setProgressBar(cartTotal, shippingOrderValue[0])
          }
        });
        
        function _setProgressBar(cartTotal, thresholdInDollars) {
          const progress = cartTotal <= thresholdInDollars ? cartTotal / thresholdInDollars * 100 : 100;
          _freeShippingProgress.style.setProperty("--progress-width", "".concat(progress, "%"));
        }

        function _toggleProgressBar(state) {
          if (state === 'show') {
            freeShippingBars.forEach(bar => bar.classList.remove('hide'))
            _freeShippingMessage.classList.remove('hide');
          }
          if (state === 'hide') {
            freeShippingBars.forEach(bar => bar.classList.add('hide'))
            _freeShippingMessage.classList.add('hide');
          }
        }
      });
    },

    getItem: function(key, state) {
      return state.items.find(function(item) {
        return item.key === key;
      });
    },

    _liveRegionText: function(item) {
      // Dummy content for live region
      var liveRegionText =
        theme.strings.update +
        ': [QuantityLabel]: [Quantity], [Regular] [$$] [DiscountedPrice] [$]. [PriceInformation]';

      // Update Quantity
      liveRegionText = liveRegionText
        .replace('[QuantityLabel]', theme.strings.quantity)
        .replace('[Quantity]', item.quantity);

      // Update pricing information
      var regularLabel = '';
      var regularPrice = theme.Currency.formatMoney(
        item.original_line_price,
        theme.moneyFormat
      );
      var discountLabel = '';
      var discountPrice = '';
      var discountInformation = '';

      if (item.original_line_price > item.final_line_price) {
        regularLabel = theme.strings.regularTotal;

        discountLabel = theme.strings.discountedTotal;
        discountPrice = theme.Currency.formatMoney(
          item.final_line_price,
          theme.moneyFormat
        );

        discountInformation = theme.strings.priceColumn;
      }

      liveRegionText = liveRegionText
        .replace('[Regular]', regularLabel)
        .replace('[$$]', regularPrice)
        .replace('[DiscountedPrice]', discountLabel)
        .replace('[$]', discountPrice)
        .replace('[PriceInformation]', discountInformation)
        .trim();

      return liveRegionText;
    },

    _updateLiveRegion: function(item) {
      var $liveRegion = $(selectors.cartStatus);
      $liveRegion.html(this._liveRegionText(item)).attr('aria-hidden', false);

      // hide content from accessibility tree after announcement
      setTimeout(function() {
        $liveRegion.attr('aria-hidden', true);
      }, 1000);
    },

    _createCart: function(state) {
      var cartDiscountList = this._createCartDiscountList(state);

      $(selectors.cartLineItems, this.$container).html(
        this._createLineItemList(state)
      );

      state.items.map(function(item) {
        const selector = `.main-content [data-cart-item-key="${item.key}"]`
        theme.wishlist.init(selector)
      });
    
      this.setQuantityFormControllers();

      $(selectors.cartNote, this.$container).val(state.note);

      if (cartDiscountList.length === 0) {
        $(selectors.cartDiscountWrapper, this.$container)
          .html('')
          .addClass(classes.hide);
      } else {
        $(selectors.cartDiscountWrapper, this.$container)
          .html(cartDiscountList)
          .removeClass(classes.hide);
      }
      
      let shopCurrency = '';
      if (theme.moneyFormatWithCurrency.indexOf('NZD') !== -1) {
        shopCurrency = 'NZD'
      } else if (theme.moneyFormatWithCurrency.indexOf('AUD') !== -1) {
        shopCurrency = 'AUD'
      }
     
      const subTotal = (shopCurrency.length && shopCurrency == 'NZD') ? state.total_price / 115 * 100 : state.total_price / 11 * 10;
      const tax = (shopCurrency.length && shopCurrency == 'NZD') ? state.total_price / 115 * 15 : state.total_price / 11 ;

      $(selectors.cartSubtotal, this.$container).html(
        theme.Currency.formatMoney(
          subTotal,
          theme.moneyFormatWithCurrency
        )
      );

      $(selectors.cartTax, this.$container).html(
        theme.Currency.formatMoney(
          tax,
          theme.moneyFormatWithCurrency
        )
      );

      $(selectors.cartTotal, this.$container).html(
        theme.Currency.formatMoney(
          state.total_price,
          theme.moneyFormatWithCurrency
        )
      );

      const afterpay = state.total_price / 4;
      $(selectors.cartAfterPay, this.$container).html(
        theme.Currency.formatMoney(
          afterpay,
          theme.moneyFormatWithCurrency
        )
      );

      // Start: "Free Express Delivery" is only displayed when the total order value is above the amount set in settings.price_free
      const totalPrice = state.total_price * 0.01;
      const dataToggleDeliveryType = document.querySelector('[data-toggle-delivery-type="delivery"]')
      const checkExistence = document.querySelector('[data-toggle-delivery-type="delivery"] .cart-toggle__text')
      const freeExpressDelivery = `<span class="cart-toggle__text">Free Express Delivery</span>`

      if (totalPrice > '{{ settings.price_free }}') {
        if (!checkExistence) {
          dataToggleDeliveryType.innerHTML += freeExpressDelivery
        }
      } else {
        document.querySelector('[data-toggle-delivery-type="delivery"] .cart-toggle__text').remove();
      }
      // end

      
      if (window.enable_free_gift == true) {

        //only 1 free gift with purchase item
        if((window.free_gift_over_price_2 == '') && (window.free_gift_id_2 == '' )){
          $.getJSON('/cart.js', function(cart) {
            var free_gift_over_price = window.free_gift_over_price,
                variant_id = window.free_gift_variant_id, //Shopify.theme_settings.free_gift_id,
                cartItems = cart.items,
                qtyInTheCart = 0,
                cartUpdates = {},
                cartTotal = cart.total_price;
      
        
            for (var i = 0; i < cartItems.length; i++) {
              if (cartItems[i].id == variant_id ) {
                qtyInTheCart = cartItems[i].quantity;
                break;
              }
            }
      

          //Automatically remove free gift when the gift is in the cart and the cart total price is less than the threshold
          cartItems.map((o, index) => {
            if((o.id == variant_id) && (o.quantity == 1) && (qtyInTheCart == 1)){
              o.freeGift = true;
              if((o.freeGift == true) && (Number(cartTotal - o.final_price) < free_gift_over_price) && (qtyInTheCart == 1) && (cartItems[index] == o)){
                //Shopify.theme.quantityBox.updateCart(cartItems.indexOf(o), 0);
                cartUpdates = { [variant_id] : 0 }
      
                
                $.post('/cart/update.js', {
                  updates: cartUpdates,
                  success: function success() {
                    window.setTimeout(function () {
                      // Shopify.theme.jsAjaxCart.updateView();
                      // Shopify.theme.jsCart.updateView(cart);
                    }, 1000);
                  }
                });
                return;
              }
            }
          });
      
      
      
            if ( (cartItems.length === 1) && (qtyInTheCart > 0) ) {
              //cartUpdates = { [variant_id] : 0 }
            } else if ( (cartItems.length >= 1) && (qtyInTheCart !== 1) && (cartTotal >= free_gift_over_price) ) {
              if(qtyInTheCart >= 1){
                return;
              }
              else{
                cartUpdates = { [variant_id] : 1 }
              }
              
            } else {
              return;
            }
      
            $.post('/cart/update.js', {
              updates: cartUpdates,
              success: function success() {
                window.setTimeout(function () {
                  Shopify.theme.jsAjaxCart.updateView();
                  Shopify.theme.jsCart.updateView(cart);
                }, 1000);
              }
            });
          });
        }
        else{
          //2 free GWP
            //additional free gift with purchase item
            $.getJSON('/cart.js', function(cart) {
              var free_gift_over_price =  window.free_gift_over_price,
                  free_gift_over_price_2 =  window.free_gift_over_price_2, //additional free gwp
                  variant_id = window.free_gift_variant_id,
                  variant_id_2 = window.free_gift_variant_id_2, //additional free gwp
                  cartItems = cart.items,
                  qtyInTheCart = 0,
                  qtyInTheCart2 = 0, //additional free gwp
                  cartUpdates = {},
                  cartTotal = cart.total_price,
                  free_gift_over_price_count = 0,
                  free_gift_over_price_count_2 = 0;

              for (var i = 0; i < cartItems.length; i++) {
                if (cartItems[i].id == variant_id ) {
                  qtyInTheCart = cartItems[i].quantity;
                  break;
                }
              }

              //additional free gwp
              for (var i = 0; i < cartItems.length; i++) {
                if (cartItems[i].id == variant_id_2 ) {
                  qtyInTheCart2 = cartItems[i].quantity;
                  break;
                }
              }

              cartItems.map((o, index) => {
                if((o.vendor).toUpperCase() == (window.from_vendor).toUpperCase()){
                  free_gift_over_price_count += o.final_line_price;
                }

                if((o.vendor).toUpperCase() == (window.from_vendor_2).toUpperCase()){
                  free_gift_over_price_count_2 += o.final_line_price;
                }
                
              })

              cartItems.map((o, index) => {

      
                //Automatically remove free gift when the gift is in the cart and the cart total price is less than the threshold
                if((o.variant_id == variant_id) && (o.quantity == 1) && (qtyInTheCart == 1)){
                  
                  o.freeGift = true;
                  if((o.freeGift == true) && (Number(free_gift_over_price_count - o.final_price) < free_gift_over_price)){
                    
                    //Shopify.theme.quantityBox.updateCart(cartItems.indexOf(o), 0);
                    cartUpdates = { [variant_id] : 0 }
      
                    $.post('/cart/update.js', {
                      updates: cartUpdates,
                      success: function success() {
                        window.setTimeout(function () {
                          // Shopify.theme.jsAjaxCart.updateView();
                          // Shopify.theme.jsCart.updateView(cart);
                        }, 1000);
                      }
                    });
                    return;
                  }
                }
      
               
      
                //Automatically remove free gift when the additional gift is in the cart and the cart total price is less than the threshold
                if((o.id == variant_id_2) && (o.quantity == 1) && (qtyInTheCart2 == 1)){
                  o.freeGift = true;
                  if((o.freeGift == true) && (Number(free_gift_over_price_count_2 - o.final_price) < free_gift_over_price_2)){
                    //Shopify.theme.quantityBox.updateCart(cartItems.indexOf(o), 0);
                    let newObject= { [variant_id_2] : 0 };
                    cartUpdates = {...newObject, ...cartUpdates }
      
                    $.post('/cart/update.js', {
                      updates: cartUpdates,
                      success: function success() {
                        window.setTimeout(function () {
                          // Shopify.theme.jsAjaxCart.updateView();
                          // Shopify.theme.jsCart.updateView(cart);
                        }, 1000);
                      }
                    });
                    return;
      
                  }
                }
      
                
              });
      
              
              // if ( (cartItems.length === 1) && (qtyInTheCart > 0) ) {
              //   cartUpdates = { [variant_id] : 0 }
              // } 
              if ( (cartItems.length >= 1) && (qtyInTheCart !== 1) && (free_gift_over_price_count >= free_gift_over_price) ) {
                if(qtyInTheCart >= 1){
                  return;
                }
                else{
                  cartUpdates = { [variant_id] : 1 }
                }
                
              }
              //additional free gwp
              if ( (cartItems.length >= 1) && (qtyInTheCart2 !== 1) && (free_gift_over_price_count_2 >= free_gift_over_price_2) ) {
                if(qtyInTheCart2 >= 1){
                  return;
                }
                else{
                  let newObject= { [variant_id_2] : 1 };
                  cartUpdates = {...newObject, ...cartUpdates }
                }
                
              } else {
      
                $.post('/cart/update.js', {
                  updates: cartUpdates,
                  success: function success() {
                    window.setTimeout(function () {

                      
                      // Shopify.theme.jsAjaxCart.updateView();
                      // Shopify.theme.jsCart.updateView(cart);
                      //location.reload();
                    
                      $("#shopify-section-cart-template form").load(location.href+'?t='+Date.now()+" #shopify-section-cart-template form>*", "");
      
                    }, 1000);
                  }
                });
                return;
              }
      

              $.post('/cart/update.js', {
                updates: cartUpdates,
                success: function success() {
                  window.setTimeout(function () {
                    
                    // Shopify.theme.jsAjaxCart.updateView();
                    // Shopify.theme.jsCart.updateView(cart);
                    //location.reload();
                  
                  }, 1000);
                }
              });
            });
        }
      }
    },

    _createCartDiscountList: function(cart) {
      return $.map(
        cart.cart_level_discount_applications,
        function(discount) {
          var $discount = this.$cartDiscountTemplate.clone();
          $discount.find(selectors.cartDiscountTitle).text(discount.title);
          $discount
            .find(selectors.cartDiscountAmount)
            .html(
              theme.Currency.formatMoney(
                discount.total_allocated_amount,
                theme.moneyFormat
              )
            );
          return $discount[0];
        }.bind(this)
      );
    },

    _createLineItemList: function(state) {
      return $.map(
        state.items,
        function(item, index) {

          //use existing html if the same item is found, so that price and variant is perseved through ajax cart updates.
          //if ($('[data-cart-item-key="'+item.key+'"]').length === 1){
          //  $('[data-cart-item-key="'+item.key+'"]').find('input.quantity').val(item.quantity);
          //  return $('[data-cart-item-key="'+item.key+'"]')[0];
          //}

          var $item = $('['+attributes.cartItemKey+'="'+item.key+'"]', this.$container).clone();
          var $itemPriceList = $(selectors.cartItemPriceList, $item).clone(); // $(selectors.cartItemPriceList, $item).clone();
          var $itemLinePriceTemplate = $(selectors.cartItemLinePrice, $item).clone();

          item.compare_at_line_price = false;
          if (item.original_line_price === item.final_line_price && $(selectors.cartItemRegularPriceGroup, $item).find('[data-cart-item-compare-at-price-unit]').length) {
            item.compare_at_line_price =  $(selectors.cartItemRegularPriceGroup, $item).clone().find('[data-cart-item-compare-at-price-unit]').attr('data-cart-item-compare-at-price-unit') * item.quantity;
          }
          this._setLineItemAttributes($item, item, index);
          this._setLineItemImage($item, item.featured_image);

          $(selectors.cartItemTitle, $item)
            .text(item.product_title)
            .attr('href', item.url);

          var productDetailsList = this._createProductDetailsList(
            item.product_has_only_default_variant,
            item.options_with_values,
            item.properties
          );
          this._setProductDetailsList($item, productDetailsList);

          this._setItemRemove($item, item.title);

          $itemPriceList.html(
            this._createItemPrice(
              item.original_price,
              item.final_price,
              this.$itemPriceListTemplate
            )
          );

          if (item.unit_price_measurement) {
            $itemPriceList.append(
              this._createUnitPrice(
                item.unit_price,
                item.unit_price_measurement,
                this.$itemPriceListTemplate
              )
            );
          }

          this._setItemPrice($item, $itemPriceList);

          var itemDiscountList = this._createItemDiscountList(item);
          this._setItemDiscountList($item, itemDiscountList);

          this._setQuantityInputs($item, item, index);

          var itemLinePrice = this._createItemPrice(
            item.original_line_price,
            item.final_line_price,
            $itemLinePriceTemplate,
            item.compare_at_line_price
          );
          this._setItemLinePrice($item, itemLinePrice);

          
          if(window.enable_free_gift){
            this._setGWPProperties($item, item);
          }

          return $item[0];
        }.bind(this)
      );
    },

    _setLineItemAttributes: function($item, item, index) {
      $item
        .attr(attributes.cartItemKey, item.key)
        .attr(attributes.cartItemUrl, item.url)
        .attr(attributes.cartItemTitle, item.title)
        .attr(attributes.cartItemIndex, index + 1)
        .attr(attributes.cartItemQuantity, item.quantity);
    },


    _setGWPProperties: function($item, item){

      if((item.product_id == (window.free_gift_id) || (window.free_gift_id_2)) && item.final_line_price == 0){
        $item.addClass(classes.freeGWP);
        $item.find('.free-gwp-badge').addClass('show');
      }
      if((item.product_id == (window.free_gift_id) || (window.free_gift_id_2)) && item.final_line_price != 0){
        $item.removeClass(classes.freeGWP);
        $item.find('.free-gwp-badge').removeClass('show');

      }
    },

    _setLineItemImage: function($item, featuredImage) {
      var $image = $(selectors.cartItemImage, $item);

      var sizedImageUrl =
        featuredImage.url !== null
          ? theme.Images.getSizedImageUrl(featuredImage.url, 'x190')
          : null;

      if (sizedImageUrl) {
        $image
          .attr('alt', featuredImage.alt)
          .attr('src', sizedImageUrl)
          .removeClass(classes.hide);
      } else {
        $image.remove();
      }
    },

    _setProductDetailsList: function($item, productDetailsList) {
      var $itemDetails = $(selectors.cartItemDetails, $item);

      if (productDetailsList.length === 0) {
        $itemDetails.addClass(classes.hide).text('');
      } else {
        $itemDetails.removeClass(classes.hide).html(productDetailsList);
      }
    },

    _setItemPrice: function($item, price) {
      $(selectors.cartItemPrice, $item).html(price);
    },

    _setItemDiscountList: function($item, discountList) {
      var $itemDiscountList = $(selectors.cartItemDiscountList, $item);

      if (discountList.length === 0) {
        $itemDiscountList.html('').addClass(classes.hide);
      } else {
        $itemDiscountList.html(discountList).removeClass(classes.hide);
      }
    },

    _setItemRemove: function($item, title) {
      $(selectors.cartRemove, $item).attr(
        'aria-label',
        theme.strings.removeLabel.replace('[product]', title)
      );
    },

    _setQuantityInputs: function($item, item, index) {
      $(selectors.quantityInputMobile, $item)
        .attr('id', 'updates_' + item.key)
        .attr(attributes.quantityItem, index + 1)
        .val(item.quantity);

      $(selectors.quantityInputDesktop, $item)
        .attr('id', 'updates_large_' + item.key)
        .attr(attributes.quantityItem, index + 1)
        .val(item.quantity);

      $(selectors.quantityLabelMobile, $item).attr(
        'for',
        'updates_' + item.key
      );

      $(selectors.quantityLabelDesktop, $item).attr(
        'for',
        'updates_large_' + item.key
      );
    },

    setQuantityFormControllers: function() {
      if (this.mql.matches) {
        $(selectors.quantityInputDesktop).attr('name', 'updates[]');
        $(selectors.quantityInputMobile).removeAttr('name');
      } else {
        $(selectors.quantityInputMobile).attr('name', 'updates[]');
        $(selectors.quantityInputDesktop).removeAttr('name');
      }
    },

    _setItemLinePrice: function($item, price) {
      $(selectors.cartItemLinePrice, $item).html(price);
    },

    _createProductDetailsList: function(
      product_has_only_default_variant,
      options,
      properties
    ) {
      var optionsPropertiesHTML = [];

      if (!product_has_only_default_variant) {
        optionsPropertiesHTML = optionsPropertiesHTML.concat(
          this._getOptionList(options)
        );
      }

      if (properties !== null && Object.keys(properties).length !== 0) {
        optionsPropertiesHTML = optionsPropertiesHTML.concat(
          this._getPropertyList(properties)
        );
      }

      return optionsPropertiesHTML;
    },

    _getOptionList: function(options) {
      return $.map(
        options,
        function(option, index) {
          var $optionElement = this.$itemOptionTemplate.clone();

          $optionElement
            // .text(option.name + ': <span class="data-cart-option">' + option.value + '</span>')
            .removeClass(classes.hide);

          return $optionElement[index];
        }.bind(this)
      );
    },

    _getPropertyList: function(properties) {
      var propertiesArray =
        properties !== null ? Object.entries(properties) : [];

      return $.map(
        propertiesArray,
        function(property) {
          if (this.$itemPropertyTemplate.attr('data-list-disable') == property[0]) {
            return;
          }
          var $propertyElement = this.$itemPropertyTemplate.clone();

          // Line item properties prefixed with an underscore are not to be displayed
          if (property[0].charAt(0) === '_') return;

          // if the property value has a length of 0 (empty), don't display it
          if (property[1].length === 0) return;

          $propertyElement
            .find(selectors.cartItemPropertyName)
            .text(property[0]);

          if (property[0].indexOf('/uploads/') === -1) {
            $propertyElement
              .find(selectors.cartItemPropertyValue)
              .text(': ' + property[1]);
          } else {
            $propertyElement
              .find(selectors.cartItemPropertyValue)
              .html(
                ': <a href="' +
                  property[1] +
                  '"> ' +
                  property[1].split('/').pop() +
                  '</a>'
              );
          }

          $propertyElement.removeClass(classes.hide);

          return $propertyElement[0];
        }.bind(this)
      );
    },

    _createItemPrice: function(original_price, final_price, $priceTemplate, compare_at_price) {
      if (original_price !== final_price) {
        var $discountedPrice = $(
          selectors.cartItemDiscountedPriceGroup,
          $priceTemplate
        ).clone();

        $(selectors.cartItemOriginalPrice, $discountedPrice).html(
          {% if shop.permanent_domain != 'ajeworld.myshopify.com' %}
            theme.Currency.formatMoney(original_price, theme.moneyFormat)
          {% else %}
            theme.Currency.formatMoney(original_price, theme.moneyFormatWithCurrency)
          {% endif %}
        );
        $(selectors.cartItemFinalPrice, $discountedPrice).html(
          {% if shop.permanent_domain != 'ajeworld.myshopify.com' %}
            theme.Currency.formatMoney(final_price, theme.moneyFormat)
          {% else %}
            theme.Currency.formatMoney(final_price, theme.moneyFormatWithCurrency)
          {% endif %}
        );
        $discountedPrice.removeClass(classes.hide);

        return $discountedPrice[0];
      } else {
        var $regularPrice = $(
          selectors.cartItemRegularPriceGroup,
          $priceTemplate
        ).clone();
        if(compare_at_price) {
          $(selectors.cartItemCompareAtPrice, $regularPrice).html(
            {% if shop.permanent_domain != 'ajeworld.myshopify.com' %}
              theme.Currency.formatMoney(compare_at_price, theme.moneyFormat)
            {% else %}
              theme.Currency.formatMoney(compare_at_price, theme.moneyFormatWithCurrency)
            {% endif %}
          );
        }

        $(selectors.cartItemRegularPrice, $regularPrice).html(
          {% if shop.permanent_domain != 'ajeworld.myshopify.com' %}
            theme.Currency.formatMoney(final_price, theme.moneyFormat)
          {% else %}
            theme.Currency.formatMoney(final_price, theme.moneyFormatWithCurrency)
          {% endif %}
        );

        $regularPrice.removeClass(classes.hide);

        return $regularPrice[0];
      }
    },

    _createUnitPrice: function(
      unitPrice,
      unitPriceMeasurement,
      $itemPriceGroup
    ) {
      var $unitPriceGroup = $(
        selectors.unitPriceGroup,
        $itemPriceGroup
      ).clone();

      var unitPriceBaseUnit =
        (unitPriceMeasurement.reference_value !== 1
          ? unitPriceMeasurement.reference_value
          : '') + unitPriceMeasurement.reference_unit;

      $(selectors.unitPriceBaseUnit, $unitPriceGroup).text(unitPriceBaseUnit);
      $(selectors.unitPrice, $unitPriceGroup).html(
        theme.Currency.formatMoney(unitPrice, theme.moneyFormat)
      );

      $unitPriceGroup.removeClass(classes.hide);

      return $unitPriceGroup[0];
    },

    _createItemDiscountList: function(item) {
      return $.map(
        item.line_level_discount_allocations,
        function(discount) {
          var $discount = this.$itemDiscountTemplate.clone();
          $discount
            .find(selectors.cartItemDiscountTitle)
            .text(discount.discount_application.title);
          $discount
            .find(selectors.cartItemDiscountAmount)
            .html(
              theme.Currency.formatMoney(discount.amount, theme.moneyFormat)
            );
          return $discount[0];
        }.bind(this)
      );
    },

    _showQuantityErrorMessages: function(itemElement) {
      $(selectors.cartQuantityErrorMessage, itemElement).text(
        theme.strings.quantityMinimumMessage
      );

      $(selectors.cartQuantityErrorMessageWrapper, itemElement).removeClass(
        classes.hide
      );

      $(selectors.inputQty, itemElement)
        .addClass(classes.inputError)
        .focus();
    },

    _hideQuantityErrorMessage: function() {
      var $errorMessages = $(
        selectors.cartQuantityErrorMessageWrapper
      ).addClass(classes.hide);

      $(selectors.cartQuantityErrorMessage, $errorMessages).text('');

      $(selectors.inputQty, this.$container).removeClass(classes.inputError);
    },

    _handleThumbnailClick: function(evt) {
      var url = $(evt.target)
        .closest(selectors.cartItem)
        .data('cart-item-url');

      window.location.href = url;
    },

    _onNoteChange: function(evt) {
      var note = evt.currentTarget.value;
      this._hideCartError();
      this._hideQuantityErrorMessage();

      var params = {
        url: '/cart/update.js',
        data: { note: note },
        dataType: 'json'
      };

      $.post(params).fail(
        function() {
          this._showCartError(evt.currentTarget);
        }.bind(this)
      );
    },

    _onGiftWrapAdd: function(evt) {

      var currentCheckbox = evt.currentTarget;

      this._hideCartError();
      this._hideQuantityErrorMessage();

      var hasGiftWrap = currentCheckbox.checked ? "Yes" : "No";
      
      const cartAttributes = {
        "Has Gift Wrap": hasGiftWrap
      };

      var params = {
        url: '/cart/update.js',
        data: { attributes: cartAttributes},
        dataType: 'json'
      };

      $.post(params).fail(
        function() {
          this._showCartError(evt.currentTarget);
        }.bind(this)
      );
     
      // Sync checkboxs
      this._syncOtherCheckbox(currentCheckbox);
    },

    _syncOtherCheckbox: function(currentCheckbox) {
      
      let otherCheckboxSelector;

      if ($(currentCheckbox).closest('[data-cart-popup-wrapper]').length) {
        otherCheckboxSelector = '[data-cart-wrapper] ' + selectors.cartGiftWrap;
      } else if ($(currentCheckbox).closest('[data-cart-wrapper]').length) {
        otherCheckboxSelector = '[data-cart-popup-wrapper] ' + selectors.cartGiftWrap;
      }

      const otherCheckbox = $(otherCheckboxSelector);

      if (otherCheckbox && otherCheckbox.length) {
        otherCheckbox.prop('checked', currentCheckbox.checked);
      }
    },

    _showCartError: function(elementToFocus) {
      $(selectors.cartErrorMessage).text(theme.strings.cartError);

      $(selectors.cartErrorMessageWrapper).removeClass(classes.hide);

      elementToFocus.focus();
    },

    _hideCartError: function() {
      $(selectors.cartErrorMessageWrapper).addClass(classes.hide);
      $(selectors.cartErrorMessage).text('');
    },

    _onRemoveItem: function(evt) {
      evt.preventDefault();
      var $remove = $(evt.target);
      var $lineItem = $remove.closest(selectors.cartItem);
      var index = $lineItem.attr(attributes.cartItemIndex);
      this._hideCartError();

      var params = {
        url: '/cart/change.js',
        data: { quantity: 0, line: index },
        dataType: 'json'
      };

      $.post(params)
        .done(
          function(state) {
            if (state.item_count === 0) {
              this._emptyCart();
            } else {
              this._createCart(state);
              this._showRemoveMessage($lineItem.clone());
              this.freeShippingBar(state.total_price);
            }

            this._setCartCountBubble(state.item_count);
          }.bind(this)
        )
        .fail(
          function() {
            this._showCartError(null);
          }.bind(this)
        );
    },

    _onEditItem: function(evt) {
      const dataItemKey = evt.target.parentElement.getAttribute('data-cart-item-key');
      const point = `.cart__row[data-cart-item-key="${dataItemKey}"]`
      const size = $(`${point} .product-details__item.size .product-details__variant-value`).text();
      const quantity = $(point).find(".cart-quantity .cart__qty-input").val()
      theme.MiniCart.setPopupEditProductCart(evt, size, quantity)
    },

    _showRemoveMessage: function(lineItem) {
      var index = lineItem.data('cart-item-index');
      var removeMessage = this._getRemoveMessage(lineItem);
      var $lineItemAtIndex;

      if (index - 1 === 0) {
        $lineItemAtIndex = $('[data-cart-item-index="1"]', this.$container);
        $(removeMessage).insertBefore($lineItemAtIndex);
      } else {
        $lineItemAtIndex = $(
          '[data-cart-item-index="' + (index - 1) + '"]',
          this.$container
        );
        removeMessage.insertAfter($lineItemAtIndex);
      }
      removeMessage.focus();
    },

    _getRemoveMessage: function(lineItem) {
      var formattedMessage = this._formatRemoveMessage(lineItem);

      var $tableCell = $(selectors.cartTableCell, lineItem).clone();
      $tableCell
        .removeClass()
        .addClass(classes.cartRemovedProduct)
        .attr('colspan', '4')
        .html(formattedMessage);

      lineItem
        .attr('role', 'alert')
        .html($tableCell)
        .attr('tabindex', '-1');

      return lineItem;
    },

    _formatRemoveMessage: function(lineItem) {
      var quantity = lineItem.data('cart-item-quantity');
      var url = lineItem.attr(attributes.cartItemUrl);
      var title = lineItem.attr(attributes.cartItemTitle);

      return theme.strings.removedItemMessage
        .replace('[quantity]', quantity)
        .replace(
          '[link]',
          '<a ' +
            'href="' +
            url +
            '" class="text-link text-link--accent">' +
            title +
            '</a>'
        );
    },

    _setCartCountBubble: function(quantity) {
      this.$cartCountBubble =
        this.$cartCountBubble || $(selectors.cartCountBubble);
      this.$cartCount = this.$cartCount || $(selectors.cartCount);

      if (quantity > 0) {
        this.$cartCountBubble.removeClass(classes.hide);
        this.$cartCount.html(quantity);
      } else {
        this.$cartCountBubble.addClass(classes.hide);
        this.$cartCount.html('');
      }
    },

    _emptyCart: function() {
      this.$emptyPageContent =
        this.$emptyPageContent ||
        $(selectors.emptyPageContent, this.$container);
      this.$cartWrapper =
        this.$cartWrapper || $(selectors.cartWrapper, this.$container);

      this.$emptyPageContent.removeClass(classes.hide);
      this.$cartWrapper.addClass(classes.hide);
    },

    cookiesEnabled: function() {
      var cookieEnabled = navigator.cookieEnabled;

      if (!cookieEnabled) {
        document.cookie = 'testcookie';
        cookieEnabled = document.cookie.indexOf('testcookie') !== -1;
      }
      return cookieEnabled;
    }
  });

  return Cart;
})();

window.theme = window.theme || {};

theme.Filters = (function() {
  var settings = {
    // Breakpoints from src/stylesheets/global/variables.scss.liquid
    mediaQueryMediumUp: 'screen and (min-width: 750px)'
  };

  var selectors = {
    mainContent: '#MainContent',
    filterSelection: '#FilterTags',
    sortSelection: '#SortBy'
  };

  var data = {
    sortBy: 'data-default-sortby'
  };

  function Filters(container) {
    var $container = (this.$container = $(container));

    this.$filterSelect = $(selectors.filterSelection, $container);
    this.$sortSelect = $(selectors.sortSelection, $container);
    this.$selects = $(selectors.filterSelection, $container).add(
      $(selectors.sortSelection, $container)
    );

    this.defaultSort = this._getDefaultSortValue();
    this.$selects.removeClass('hidden');

    this.$filterSelect.on('change', this._onFilterChange.bind(this));
    this.$sortSelect.on('change', this._onSortChange.bind(this));
    this._initBreakpoints();
    this._initParams();
  }

  Filters.prototype = _.assignIn({}, Filters.prototype, {
    _initBreakpoints: function() {
      var self = this;

      enquire.register(settings.mediaQueryMediumUp, {
        match: function() {
          self._resizeSelect(self.$selects);
        }
      });
    },

    _initParams: function() {
      self.queryParams = {};
      if (location.search.length) {
        var aKeyValue;
        var aCouples = location.search.substr(1).split('&');
        for (var i = 0; i < aCouples.length; i++) {
          aKeyValue = aCouples[i].split('=');
          if (aKeyValue.length > 1) {
            self.queryParams[
              decodeURIComponent(aKeyValue[0])
            ] = decodeURIComponent(aKeyValue[1]);
          }
        }
      }
    },

    _onSortChange: function() {
      self.queryParams.sort_by = this._getSortValue();

      if (self.queryParams.page) {
        delete self.queryParams.page;
      }
      window.location.search = decodeURIComponent($.param(self.queryParams));
    },

    _onFilterChange: function() {
      document.location.href = this._getFilterValue();
    },

    _getFilterValue: function() {
      return this.$filterSelect.val();
    },

    _getSortValue: function() {
      return this.$sortSelect.val() || this.defaultSort;
    },

    _getDefaultSortValue: function() {
      return this.$sortSelect.attr(data.sortBy);
    },

    _resizeSelect: function($selection) {
      $selection.each(function() {
        var $this = $(this);
        var arrowWidth = 10;
        // create test element
        var text = $this.find('option:selected').text();
        var $test = $('<span>').html(text);

        // add to body, get width, and get out
        $test.appendTo('body');
        var width = $test.width();
        $test.remove();

        // set select width
        $this.width(width + arrowWidth);
      });
    },

    onUnload: function() {
      this.$filterSelect.off('change', this._onFilterChange);
      this.$sortSelect.off('change', this._onSortChange);
    }
  });

  return Filters;
})();

window.theme = window.theme || {};

theme.HeaderSection = (function() {
  function Header() {
    theme.Header.init();
    theme.MobileNav.init();
    theme.Search.init();
    theme.MiniCart.init();
  }

  Header.prototype = _.assignIn({}, Header.prototype, {
    onUnload: function() {
      theme.Header.unload();
    }
  });

  return Header;
})();

theme.Maps = (function() {
  var config = {
    zoom: 14
  };
  var apiStatus = null;
  var mapsToLoad = [];

  var errors = {
    addressNoResults: theme.strings.addressNoResults,
    addressQueryLimit: theme.strings.addressQueryLimit,
    addressError: theme.strings.addressError,
    authError: theme.strings.authError
  };

  var selectors = {
    section: '[data-section-type="map"]',
    map: '[data-map]',
    mapOverlay: '[data-map-overlay]'
  };

  var classes = {
    mapError: 'map-section--load-error',
    errorMsg: 'map-section__error errors text-center'
  };

  // Global function called by Google on auth errors.
  // Show an auto error message on all map instances.
  // eslint-disable-next-line camelcase, no-unused-vars
  window.gm_authFailure = function() {
    if (!Shopify.designMode) {
      return;
    }

    $(selectors.section).addClass(classes.mapError);
    $(selectors.map).remove();
    $(selectors.mapOverlay).after(
      '<div class="' +
        classes.errorMsg +
        '">' +
        theme.strings.authError +
        '</div>'
    );
  };

  function Map(container) {
    this.$container = $(container);
    this.$map = this.$container.find(selectors.map);
    this.key = this.$map.data('api-key');

    if (typeof this.key === 'undefined') {
      return;
    }

    if (apiStatus === 'loaded') {
      this.createMap();
    } else {
      mapsToLoad.push(this);

      if (apiStatus !== 'loading') {
        apiStatus = 'loading';
        if (typeof window.google === 'undefined') {
          $.getScript(
            'https://maps.googleapis.com/maps/api/js?key=' + this.key
          ).then(function() {
            apiStatus = 'loaded';
            initAllMaps();
          });
        }
      }
    }
  }

  function initAllMaps() {
    // API has loaded, load all Map instances in queue
    $.each(mapsToLoad, function(index, instance) {
      instance.createMap();
    });
  }

  function geolocate($map) {
    var deferred = $.Deferred();
    var geocoder = new google.maps.Geocoder();
    var address = $map.data('address-setting');

    geocoder.geocode({ address: address }, function(results, status) {
      if (status !== google.maps.GeocoderStatus.OK) {
        deferred.reject(status);
      }

      deferred.resolve(results);
    });

    return deferred;
  }

  Map.prototype = _.assignIn({}, Map.prototype, {
    createMap: function() {
      var $map = this.$map;

      return geolocate($map)
        .then(
          function(results) {
            var mapOptions = {
              zoom: config.zoom,
              center: results[0].geometry.location,
              draggable: false,
              clickableIcons: false,
              scrollwheel: false,
              disableDoubleClickZoom: true,
              disableDefaultUI: true
            };

            var map = (this.map = new google.maps.Map($map[0], mapOptions));
            var center = (this.center = map.getCenter());

            //eslint-disable-next-line no-unused-vars
            var marker = new google.maps.Marker({
              map: map,
              position: map.getCenter()
            });

            google.maps.event.addDomListener(
              window,
              'resize',
              $.debounce(250, function() {
                google.maps.event.trigger(map, 'resize');
                map.setCenter(center);
                $map.removeAttr('style');
              })
            );
          }.bind(this)
        )
        .fail(function() {
          var errorMessage;

          switch (status) {
            case 'ZERO_RESULTS':
              errorMessage = errors.addressNoResults;
              break;
            case 'OVER_QUERY_LIMIT':
              errorMessage = errors.addressQueryLimit;
              break;
            case 'REQUEST_DENIED':
              errorMessage = errors.authError;
              break;
            default:
              errorMessage = errors.addressError;
              break;
          }

          // Show errors only to merchant in the editor.
          if (Shopify.designMode) {
            $map
              .parent()
              .addClass(classes.mapError)
              .html(
                '<div class="' +
                  classes.errorMsg +
                  '">' +
                  errorMessage +
                  '</div>'
              );
          }
        });
    },

    onUnload: function() {
      if (this.$map.length === 0) {
        return;
      }
      google.maps.event.clearListeners(this.map, 'resize');
    }
  });

  return Map;
})();

/* eslint-disable no-new */
theme.Product = (function() {
  function Product(container) {
    var $container = (this.$container = $(container));
    var sectionId = $container.attr('data-section-id');
    this.ajaxEnabled = $container.data('ajax-enabled');

    this.settings = {
      // Breakpoints from src/stylesheets/global/variables.scss.liquid
      mediaQueryMediumUp: 'screen and (min-width: 750px)',
      mediaQuerySmall: 'screen and (max-width: 749px)',
      bpSmall: false,
      enableHistoryState: $container.data('enable-history-state') || false,
      namespace: '.slideshow-' + sectionId,
      sectionId: sectionId,
      sliderActive: false,
      zoomEnabled: false
    };

    this.selectors = {
      addToCart: '[data-add-to-cart]',
      addToCartText: '[data-add-to-cart-text]',
      loader: '[data-loader]',
      loaderStatus: '[data-loader-status]',
      quantity: '[data-quantity-input]',
      SKU: '.variant-sku',
      productStatus: '[data-product-status]',
      originalSelectorId: '#ProductSelect-' + sectionId,
      productForm: '[data-product-form]',
      errorMessage: '[data-error-message]',
      errorMessageWrapper: '[data-error-message-wrapper]',
      productImageWraps: '.product-single__photo',
      productThumbImages: '.product-single__thumbnail--' + sectionId,
      productThumbs: '.product-single__thumbnails-' + sectionId,
      productThumbListItem: '.product-single__thumbnails-item',
      productFeaturedImage: '.product-featured-img',
      productThumbsWrapper: '.thumbnails-wrapper',
      saleLabel: '.product-price__sale-label-' + sectionId,
      singleOptionSelector: '.single-option-selector-' + sectionId,
      shopifyPaymentButton: '.shopify-payment-button',
      priceContainer: '[data-price]',
      regularPrice: '[data-regular-price]',
      salePrice: '[data-sale-price]',
      unitPrice: '[data-unit-price]',
      unitPriceBaseUnit: '[data-unit-price-base-unit]',
      addToCartPopupEditItem: '[quickviewAddToCart]'
    };

    this.classes = {
      hidden: 'hide',
      inputError: 'input--error',
      productOnSale: 'price--on-sale',
      productUnitAvailable: 'price--unit-available',
      productUnavailable: 'price--unavailable',
      productFormErrorMessageWrapperHidden:
        'product-form__error-message-wrapper--hidden',
      activeClass: 'active-thumb'
    };

    this.$quantityInput = $(this.selectors.quantity, $container);
    this.$errorMessageWrapper = $(
      this.selectors.errorMessageWrapper,
      $container
    );
    this.$addToCart = $(this.selectors.addToCart, $container);
    this.$addToCartText = $(this.selectors.addToCartText, this.$addToCart);
    this.$shopifyPaymentButton = $(
      this.selectors.shopifyPaymentButton,
      $container
    );

    this.$loader = $(this.selectors.loader, this.$addToCart);
    this.$loaderStatus = $(this.selectors.loaderStatus, $container);
    this.$addToCartPopupEditItem = $(this.selectors.addToCartPopupEditItem, $container);
    // Stop parsing if we don't have the product json script tag when loading
    // section in the Theme Editor
    if (!$('#ProductJson-' + sectionId).html()) {
      return;
    }

    this.productSingleObject = JSON.parse(
      document.getElementById('ProductJson-' + sectionId).innerHTML
    );

    this.settings.zoomEnabled = $(this.selectors.productImageWraps).hasClass(
      'js-zoom-enabled'
    );

    this._initBreakpoints();
    this._stringOverrides();
    this._initVariants();
    this._initImageSwitch();
    this._initAddToCart();
    this._setActiveThumbnail();
    this._addToCartPopupItem();
    theme.MiniCart.addToCartModal();
  }

  Product.prototype = _.assignIn({}, Product.prototype, {
    _stringOverrides: function() {
      theme.productStrings = theme.productStrings || {};
      $.extend(theme.strings, theme.productStrings);
    },

    _initBreakpoints: function() {
      var self = this;

      enquire.register(this.settings.mediaQuerySmall, {
        match: function() {
          // initialize thumbnail slider on mobile if more than three thumbnails
          if ($(self.selectors.productThumbImages).length > 3) {
            self._initThumbnailSlider();
          }

          // destroy image zooming if enabled
          if (self.settings.zoomEnabled) {
            $(self.selectors.productImageWraps).each(function() {
              _destroyZoom(this);
            });
          }

          self.settings.bpSmall = true;
        },
        unmatch: function() {
          if (self.settings.sliderActive) {
            self._destroyThumbnailSlider();
          }

          self.settings.bpSmall = false;
        }
      });

      enquire.register(this.settings.mediaQueryMediumUp, {
        match: function() {
          if (self.settings.zoomEnabled) {
            $(self.selectors.productImageWraps).each(function() {
              _enableZoom(this);
            });
          }
        }
      });
    },

    _initVariants: function() {
      var options = {
        $container: this.$container,
        enableHistoryState:
          this.$container.data('enable-history-state') || false,
        singleOptionSelector: this.selectors.singleOptionSelector,
        originalSelectorId: this.selectors.originalSelectorId,
        product: this.productSingleObject
      };

      this.variants = new slate.Variants(options);

      this.$container.on(
        'variantChange' + this.settings.namespace,
        this._updateAvailability.bind(this)
      );
      this.$container.on(
        'variantImageChange' + this.settings.namespace,
        this._updateImages.bind(this)
      );
      this.$container.on(
        'variantPriceChange' + this.settings.namespace,
        this._updatePrice.bind(this)
      );
      this.$container.on(
        'variantSKUChange' + this.settings.namespace,
        this._updateSKU.bind(this)
      );
    },

    _initImageSwitch: function() {
      if (!$(this.selectors.productThumbImages).length) {
        return;
      }

      var self = this;

      $(this.selectors.productThumbImages)
        .on('click', function(evt) {
          evt.preventDefault();
          var $el = $(this);

          var imageId = $el.data('thumbnail-id');

          self._switchImage(imageId);
          self._setActiveThumbnail(imageId);
        })
        .on('keyup', self._handleImageFocus.bind(self));
    },

    _initAddToCart: function() {
      $(this.selectors.productForm, this.$container).on(
        'submit',
        function(evt) {
          if (this.$addToCart.is('[aria-disabled]')) {
            evt.preventDefault();
            return;
          }

          if (!this.ajaxEnabled) return;

          evt.preventDefault();

          this.$previouslyFocusedElement = $(':focus');

          var isInvalidQuantity = this.$quantityInput.val() <= 0;

          if (isInvalidQuantity) {
            this._showErrorMessage(theme.strings.quantityMinimumMessage);
            return;
          }

          if (!isInvalidQuantity && this.ajaxEnabled) {
            // disable the addToCart and dynamic checkout button while
            // request/cart popup is loading and handle loading state
            this._handleButtonLoadingState(true);
            var $data = $(this.selectors.productForm, this.$container);
            this._addItemToCart($data);
            return;
          }
        }.bind(this)
      );
    },

    // func show modal product get the look on product page
    _addToCartPopupItem: function() {
      this.$addToCartPopupEditItem.on('click', function(event){
        event.preventDefault();
        theme.MiniCart.renderModalProduct($(this))
      });
    },

    _addItemToCart: function(data) {
      var params = {
        url: '/cart/add.js',
        data: $(data).serialize(),
        dataType: 'json'
      };
      $.post(params)
        .done(
          function(item) {
            this._hideErrorMessage();
            $('.site-header__icons-wrapper [data-show-minicart]').trigger('click');
            this._handleButtonLoadingState(false);
          }.bind(this)
        )
        .fail(
          function(response) {
            this.$previouslyFocusedElement.focus();
            var errorMessage = response.responseJSON
              ? response.responseJSON.description
              : theme.strings.cartError;
            if (errorMessage === "Required parameter missing or invalid: items") {
              errorMessage = "Please select size above";
            }
            this._showErrorMessage(errorMessage);
            this._handleButtonLoadingState(false);
          }.bind(this)
        );
    },

    _handleButtonLoadingState: function(isLoading) {
      if (isLoading) {
        this.$addToCart.attr('aria-disabled', true);
        this.$addToCartText.addClass(this.classes.hidden);
        this.$loader.removeClass(this.classes.hidden);
        this.$shopifyPaymentButton.attr('disabled', true);
        this.$loaderStatus.attr('aria-hidden', false);
      } else {
        this.$addToCart.removeAttr('aria-disabled');
        this.$addToCartText.removeClass(this.classes.hidden);
        this.$loader.addClass(this.classes.hidden);
        this.$shopifyPaymentButton.removeAttr('disabled');
        this.$loaderStatus.attr('aria-hidden', true);
      }
    },

    _showErrorMessage: function(errorMessage) {
      console.log(errorMessage)
      $(this.selectors.errorMessage, this.$container).html(errorMessage);

      if (this.$quantityInput.length !== 0) {
        this.$quantityInput.addClass(this.classes.inputError);
      }

      this.$errorMessageWrapper
        .removeClass(this.classes.productFormErrorMessageWrapperHidden)
        .attr('aria-hidden', true)
        .removeAttr('aria-hidden');
    },

    _hideErrorMessage: function() {
      this.$errorMessageWrapper.addClass(
        this.classes.productFormErrorMessageWrapperHidden
      );

      if (this.$quantityInput.length !== 0) {
        this.$quantityInput.removeClass(this.classes.inputError);
      }
    },

    _setCartQuantity: function(quantity) {
      this.$cartPopupCartQuantity =
        this.$cartPopupCartQuantity || $(this.selectors.cartPopupCartQuantity);
      var ariaLabel;

      if (quantity === 1) {
        ariaLabel = theme.strings.oneCartCount;
      } else if (quantity > 1) {
        ariaLabel = theme.strings.otherCartCount.replace('[count]', quantity);
      }

      this.$cartPopupCartQuantity.text(quantity).attr('aria-label', ariaLabel);
    },

    _setCartCountBubble: function(quantity) {
      this.$cartCountBubble =
        this.$cartCountBubble || $(this.selectors.cartCountBubble);
      this.$cartCount = this.$cartCount || $(this.selectors.cartCount);

      this.$cartCountBubble.removeClass(this.classes.hidden);
      this.$cartCount.text(quantity);
    },

    _setActiveThumbnail: function(imageId) {
      // If there is no element passed, find it by the current product image
      if (typeof imageId === 'undefined') {
        imageId = $(
          this.selectors.productImageWraps + ':not(.hide)',
          this.$container
        ).data('image-id');
      }

      var $thumbnailWrappers = $(
        this.selectors.productThumbListItem + ':not(.slick-cloned)',
        this.$container
      );

      var $activeThumbnail = $thumbnailWrappers.find(
        this.selectors.productThumbImages +
          "[data-thumbnail-id='" +
          imageId +
          "']"
      );

      $(this.selectors.productThumbImages)
        .removeClass(this.classes.activeClass)
        .removeAttr('aria-current');

      $activeThumbnail.addClass(this.classes.activeClass);
      $activeThumbnail.attr('aria-current', true);

      if (!$thumbnailWrappers.hasClass('slick-slide')) {
        return;
      }

      var slideIndex = $activeThumbnail.parent().data('slick-index');

      $(this.selectors.productThumbs).slick('slickGoTo', slideIndex, true);
    },

    _switchImage: function(imageId) {
      var $newImage = $(
        this.selectors.productImageWraps + "[data-image-id='" + imageId + "']",
        this.$container
      );
      var $otherImages = $(
        this.selectors.productImageWraps +
          ":not([data-image-id='" +
          imageId +
          "'])",
        this.$container
      );

      $newImage.removeClass(this.classes.hidden);
      $otherImages.addClass(this.classes.hidden);
    },

    _handleImageFocus: function(evt) {
      if (evt.keyCode !== slate.utils.keyboardKeys.ENTER) return;

      $(this.selectors.productFeaturedImage + ':visible').focus();
    },

    _initThumbnailSlider: function() {
      var options = {
        slidesToShow: 4,
        slidesToScroll: 3,
        infinite: false,
        prevArrow: '.thumbnails-slider__prev--' + this.settings.sectionId,
        nextArrow: '.thumbnails-slider__next--' + this.settings.sectionId,
        responsive: [
          {
            breakpoint: 321,
            settings: {
              slidesToShow: 3
            }
          }
        ]
      };

      $(this.selectors.productThumbs).slick(options);

      // Accessibility concerns not yet fixed in Slick Slider
      $(this.selectors.productThumbsWrapper, this.$container)
        .find('.slick-list')
        .removeAttr('aria-live');
      $(this.selectors.productThumbsWrapper, this.$container)
        .find('.slick-disabled')
        .removeAttr('aria-disabled');

      this.settings.sliderActive = true;
    },

    _destroyThumbnailSlider: function() {
      $(this.selectors.productThumbs).slick('unslick');
      this.settings.sliderActive = false;

      // Accessibility concerns not yet fixed in Slick Slider
      $(this.selectors.productThumbsWrapper, this.$container)
        .find('[tabindex="-1"]')
        .removeAttr('tabindex');
    },

    _liveRegionText: function(variant) {
      // Dummy content for live region
      var liveRegionText =
        '[Availability] [Regular] [$$] [Sale] [$]. [UnitPrice] [$$$]';

      if (!variant) {
        liveRegionText = theme.strings.unavailable;
        return liveRegionText;
      }

      // Update availability
      var availability = variant.available ? '' : theme.strings.soldOut + ',';
      liveRegionText = liveRegionText.replace('[Availability]', availability);

      // Update pricing information
      var regularLabel = '';
      var regularPrice = theme.Currency.formatMoney(
        variant.price,
        theme.moneyFormat
      );
      var saleLabel = '';
      var salePrice = '';
      var unitLabel = '';
      var unitPrice = '';

      if (variant.compare_at_price > variant.price) {
        regularLabel = theme.strings.regularPrice;
        regularPrice =
          theme.Currency.formatMoney(
            variant.compare_at_price,
            theme.moneyFormat
          ) + ',';
        saleLabel = theme.strings.sale;
        salePrice = theme.Currency.formatMoney(
          variant.price,
          theme.moneyFormat
        );
      }

      if (variant.unit_price) {
        unitLabel = theme.strings.unitPrice;
        unitPrice =
          theme.Currency.formatMoney(variant.unit_price, theme.moneyFormat) +
          ' ' +
          theme.strings.unitPriceSeparator +
          ' ' +
          this._getBaseUnit(variant);
      }

      liveRegionText = liveRegionText
        .replace('[Regular]', regularLabel)
        .replace('[$$]', regularPrice)
        .replace('[Sale]', saleLabel)
        .replace('[$]', salePrice)
        .replace('[UnitPrice]', unitLabel)
        .replace('[$$$]', unitPrice)
        .trim();

      return liveRegionText;
    },

    _updateLiveRegion: function(evt) {
      var variant = evt.variant;
      var liveRegion = this.container.querySelector(
        this.selectors.productStatus
      );
      liveRegion.innerHTML = this._liveRegionText(variant);
      liveRegion.setAttribute('aria-hidden', false);

      // hide content from accessibility tree after announcement
      setTimeout(function() {
        liveRegion.setAttribute('aria-hidden', true);
      }, 1000);
    },

    _updateAddToCart: function(evt) {
      var variant = evt.variant;

      if (variant) {
        if (variant.available) {
          this.$addToCart
            .removeAttr('aria-disabled')
            .removeClass('hidden')
            .attr('aria-label', theme.strings.addToCart);
          $(this.selectors.addToCartText, this.$container).text(
            theme.strings.addToCart
          );
          this.$shopifyPaymentButton.show();
        } else {
          // The variant doesn't exist, disable submit button and change the text.
          // This may be an error or notice that a specific variant is not available.
          this.$addToCart
            .attr('aria-disabled', true)
            .addClass('hidden')
            .attr('aria-label', theme.strings.soldOut);
          $(this.selectors.addToCartText, this.$container).text(
            theme.strings.soldOut
          );
          this.$shopifyPaymentButton.hide();
        }
      } else {
        this.$addToCart
          .attr('aria-disabled', true)
          .addClass('hidden')
          .attr('aria-label', theme.strings.unavailable);
        $(this.selectors.addToCartText, this.$container).text(
          theme.strings.unavailable
        );
        this.$shopifyPaymentButton.hide();
      }
    },

    _updateAvailability: function(evt) {
      // remove error message if one is showing
      this._hideErrorMessage();

      // update form submit
      this._updateAddToCart(evt);
      // update live region
      this._updateLiveRegion(evt);

      this._updatePrice(evt);
    },

    _updateImages: function(evt) {
      var variant = evt.variant;
      var imageId = variant.featured_image.id;

      this._switchImage(imageId);
      this._setActiveThumbnail(imageId);
    },

    _updatePrice: function(evt) {
      var variant = evt.variant;

      var $priceContainer = $(this.selectors.priceContainer, this.$container);

      $priceContainer = $priceContainer.filter(function() {
        if(!$(this).parents('.athletica-get-the-look').length) {
          return $(this);
        }
      });
      $priceContainer = $priceContainer.filter(function() {
        if(!$(this).parents('.get-the-look').length) {
          return $(this);
        }
      });

      var $regularPrice = $(this.selectors.regularPrice, $priceContainer);
      var $salePrice = $(this.selectors.salePrice, $priceContainer);
      var $unitPrice = $(this.selectors.unitPrice, $priceContainer);
      var $unitPriceBaseUnit = $(
        this.selectors.unitPriceBaseUnit,
        $priceContainer
      );

      // Reset product price state
      $priceContainer
        .removeClass(this.classes.productUnavailable)
        .removeClass(this.classes.productOnSale)
        .removeClass(this.classes.productUnitAvailable)
        .removeAttr('aria-hidden');

      // Unavailable
      if (!variant) {
        $priceContainer
          .addClass(this.classes.productUnavailable)
          .attr('aria-hidden', true);
        return;
      }

      // On sale
      if (variant.compare_at_price > variant.price) {
        if ( $('.athletica-product-info').length ) {
          $regularPrice.html(
            theme.Currency.formatMoney(
              variant.compare_at_price,
              theme.moneyFormat
            )
          );
          $salePrice.html(
            theme.Currency.formatMoney(variant.price, theme.moneyFormat)
          );
        } else {
          $regularPrice.html(
            theme.Currency.formatMoney(
              variant.compare_at_price,
              theme.moneyFormatWithCurrency
            )
          );
          $salePrice.html(
            theme.Currency.formatMoney(variant.price, theme.moneyFormatWithCurrency)
          );
        }
        
        $priceContainer.addClass(this.classes.productOnSale);
      } else {
        // Regular price
        if ( $('.athletica-product-info').length ) {
          $regularPrice.html(
            theme.Currency.formatMoney(variant.price, theme.moneyFormat)
          );
        } else {
          $regularPrice.html(
            theme.Currency.formatMoney(variant.price, theme.moneyFormatWithCurrency)
          );
        }
      }

      // Unit price
      if (variant.unit_price) {
        $unitPrice.html(
          theme.Currency.formatMoney(variant.unit_price, theme.moneyFormat)
        );
        $unitPriceBaseUnit.html(this._getBaseUnit(variant));
        $priceContainer.addClass(this.classes.productUnitAvailable);
      }
    },

    _getBaseUnit: function(variant) {
      return variant.unit_price_measurement.reference_value === 1
        ? variant.unit_price_measurement.reference_unit
        : variant.unit_price_measurement.reference_value +
            variant.unit_price_measurement.reference_unit;
    },

    _updateSKU: function(evt) {
      var variant = evt.variant;

      // Update the sku
      $(this.selectors.SKU).html(variant.sku);
    },

    onUnload: function() {
      this.$container.off(this.settings.namespace);
    }
  });

  function _enableZoom(el) {
    var zoomUrl = $(el).data('zoom');
    $(el).zoom({
      url: zoomUrl
    });
  }

  function _destroyZoom(el) {
    $(el).trigger('zoom.destroy');
  }

  return Product;
})();

window.theme = window.theme || {};

theme.MiniCart = (function(){
  const classes = {
    cartPopupWrapperHidden: 'cart-popup-wrapper--hidden',
    hidden: 'hide',
    cartImage: 'cart-popup-item__image'
  };
  
  const selectors = {
    cartMiniCartIcon: '[data-show-minicart]',
    cartCount: '[data-cart-count]',
    cartCountContainer: '.site-header__cart',
    cartCountBubble: '[data-cart-count-bubble]',
    cartPopup: '[data-cart-popup]',
    cartPopupItemsContainer: '.cart-popup-items',
    getTheLookPopupItemContainer: '.getTheLookPopupItem',
    getTheLookPopupItemContainerMobile: '.getTheLookPopupItemMobile',
    cartPopupRemoveItem: '[data-cartpopup-remove]',
    accordionMobile: '[accordion-mobile]',
    cartPopupEditItem: '[data-cartpopup-edit]',
    addToCartPopupEditItem: '[miniCartQuickview]',
    cartPopupCartQuantity: '[data-cart-popup-cart-quantity]',
    cartPopupImage: '[data-cart-popup-image]',
    cartPopupImageWrapper: '[data-cart-popup-image-wrapper]',
    cartPopupImagePlaceholder: '[data-cart-popup-image-placeholder]',
    cartPopupPlaceholderSize: '[data-placeholder-size]',
    cartPopupQuantity: '[data-cart-popup-quantity]',
    cartPopupQuantityLabel: '[data-cart-popup-quantity-label]',
    cartPopupTitle: '[data-cart-popup-title]',
    cartPopupSubtotal: '[data-cart-popup-subtotal]',
    cartPopupWrapper: '[data-cart-popup-wrapper]',
    quantityInput: '[data-quantity-input]',
    quantityInputMobile: '[data-quantity-input-mobile]',
    quantityInputDesktop: '[data-quantity-input-desktop]',
    cartPopupFooter: '.cart-popup-footer',
    cartPopupLoader: '.loader',
    cartPopupEmpty: '.empty-cart',
    cartGiftWrap: '[data-cart-gift-wrap]',
    cartItemAction: '.cart-item__action',
    freeShippingBar: '[data-freeshipping-bar]',
    freeShippingMessage: '[data-freeshipping-message]',
    freeShippingProgress: '[data-freeshipping-progress]',
    messageMoreItems: '.messaging-more-items',
    messageOneItem: '.messaging-one-item',
    discountMessagesTee: '.discount_messages_tee'
  };

  function initToggleCartPopup (){
    // get cart when first load page
    getCartPopupContent(true);

    $(selectors.cartMiniCartIcon).on('click', function(event){
      event.preventDefault();

      if( $(selectors.cartPopupWrapper).hasClass(classes.cartPopupWrapperHidden) ){
        setupCartPopup();
        $('#background-overlay-cart').addClass('active');
      } else {
        hideCartPopup();
        $('#background-overlay-cart').removeClass('active');
      }
    });
  }

  function setupCartPopup() {
    displayLoader(true);
    $(selectors.cartPopupEmpty).addClass(classes.hidden);
    setupCartPopupEventListeners();
    updateCartPopupContent();
  }

  function setupCartPopupEventListeners() {
    $(selectors.cartPopupWrapper).on(
      'keyup',
      function(event) {
        if (event.keyCode === slate.utils.keyboardKeys.ESCAPE) {
          hideCartPopup();
          $('#background-overlay-cart').removeClass('active');
        }
      }.bind(this)
    );

    $('body').on('click', onBodyClick.bind(this));

    $(selectors.cartPopupWrapper).on(
      'change',
      selectors.cartGiftWrap,
      onGiftWrapAdd.bind(this)
    );
  }

  function onBodyClick(event) {
    var $target = $(event.target);
    
    if ( $target !== $(selectors.cartPopupWrapper) && !$target.parents(selectors.cartPopup).length ){
      if($target !== $(selectors.cartCountContainer) && !$target.parents(selectors.cartCountContainer).length){
        if($target.is('a.site-header__icon.site-header__cart')){
          event.preventDefault();
          return;
        } else {
          hideCartPopup(); 
        }
      }
    }
  }

  function hideCartPopup(){
    $(selectors.cartPopupWrapper)
      .prepareTransition()
      .addClass(classes.cartPopupWrapperHidden);
      $('#background-overlay-cart').removeClass('active');
      const $getTheLookPopupItemContainer = $(selectors.getTheLookPopupItemContainer)
      const $getTheLookPopupItemContainerMobile = $(selectors.getTheLookPopupItemContainerMobile)
      $getTheLookPopupItemContainer.empty();
      $getTheLookPopupItemContainerMobile.empty();
    //$('body').off('click');
  }

  function showCartPopup() {
    $(selectors.cartPopupWrapper)
      .prepareTransition()
      .removeClass(classes.cartPopupWrapperHidden);
  }

  function updateCartPopupContent() {
    var quantity = $(selectors.quantityInput).length ? $(selectors.quantityInput).val() : 1;
    $(selectors.cartPopupQuantity).text(quantity);
    $(selectors.cartPopupQuantityLabel).text(
      theme.strings.quantityLabel.replace('[count]', quantity)
    );
    
    getCartPopupContent();


    if (window.enable_free_gift == true) {

      //only 1 free gift with purchase item
      if((window.free_gift_over_price_2 == '') && (window.free_gift_id_2 == '' )){
        $.getJSON('/cart.js', function(cart) {
          var free_gift_over_price = window.free_gift_over_price,
              variant_id = window.free_gift_variant_id, //Shopify.theme_settings.free_gift_id,
              cartItems = cart.items,
              qtyInTheCart = 0,
              cartUpdates = {},
              cartTotal = cart.total_price;
    
      
          for (var i = 0; i < cartItems.length; i++) {
            if (cartItems[i].id == variant_id ) {
              qtyInTheCart = cartItems[i].quantity;
              break;
            }
          }
    
        //Automatically remove free gift when the gift is in the cart and the cart total price is less than the threshold
        cartItems.map((o, index) => {
          if((o.id == variant_id) && (o.quantity == 1) && (qtyInTheCart == 1)){
            o.freeGift = true;
            if((o.freeGift == true) && (Number(cartTotal - o.final_price) < free_gift_over_price) && (qtyInTheCart == 1) && (cartItems[index] == o)){
              //Shopify.theme.quantityBox.updateCart(cartItems.indexOf(o), 0);
              cartUpdates = { [variant_id] : 0 }
    
              
              $.post('/cart/update.js', {
                updates: cartUpdates,
                success: function success() {
                  window.setTimeout(function () {
                    // Shopify.theme.jsAjaxCart.updateView();
                    // Shopify.theme.jsCart.updateView(cart);
                  }, 1000);
                }
              });
              return;
            }
          }
        });
    
    
    
          if ( (cartItems.length === 1) && (qtyInTheCart > 0) ) {
            //cartUpdates = { [variant_id] : 0 }
          } else if ( (cartItems.length >= 1) && (qtyInTheCart !== 1) && (cartTotal >= free_gift_over_price) ) {
            if(qtyInTheCart >= 1){
              return;
            }
            else{
              cartUpdates = { [variant_id] : 1 }
            }
            
          } else {
            return;
          }
    
          $.post('/cart/update.js', {
            updates: cartUpdates,
            success: function success() {
              window.setTimeout(function () {
                Shopify.theme.jsAjaxCart.updateView();
                Shopify.theme.jsCart.updateView(cart);
              }, 1000);
            }
          });
        });
      }
      else{
        //2 free GWP
          //additional free gift with purchase item
          $.getJSON('/cart.js', function(cart) {
            var free_gift_over_price =  window.free_gift_over_price,
                free_gift_over_price_2 =  window.free_gift_over_price_2, //additional free gwp
                variant_id = window.free_gift_variant_id,
                variant_id_2 = window.free_gift_variant_id_2, //additional free gwp
                cartItems = cart.items,
                qtyInTheCart = 0,
                qtyInTheCart2 = 0, //additional free gwp
                cartUpdates = {},
                cartTotal = cart.total_price,
                free_gift_over_price_count = 0,
                free_gift_over_price_count_2 = 0;
    
    
    

            //aje            
            for (var i = 0; i < cartItems.length; i++) {
              if (cartItems[i].id == variant_id ) {
                qtyInTheCart = cartItems[i].quantity;
                break;
              }
            }
    
    
            //additional free gwp
            for (var i = 0; i < cartItems.length; i++) {
              if (cartItems[i].id == variant_id_2 ) {
                qtyInTheCart2 = cartItems[i].quantity;
                break;
              }
            }
    
    
    
            
            cartItems.map((o, index) => {
              if((o.vendor).toUpperCase() == (window.from_vendor).toUpperCase()){
                free_gift_over_price_count += o.final_line_price;
              }

              if((o.vendor).toUpperCase() == (window.from_vendor_2).toUpperCase()){
                free_gift_over_price_count_2 += o.final_line_price;
              }
            })

            cartItems.map((o, index) => {

    
              //Automatically remove free gift when the gift is in the cart and the cart total price is less than the threshold
              if((o.variant_id == variant_id) && (o.quantity == 1) && (qtyInTheCart == 1)){
                o.freeGift = true;
                if((o.freeGift == true) && (Number(free_gift_over_price_count - o.final_price) < free_gift_over_price) && (qtyInTheCart == 1) && (cartItems[index] == o)){
                  //Shopify.theme.quantityBox.updateCart(cartItems.indexOf(o), 0);
                  cartUpdates = { [variant_id] : 0 }
    
                  $.post('/cart/update.js', {
                    updates: cartUpdates,
                    success: function success() {
                      window.setTimeout(function () {
                        // Shopify.theme.jsAjaxCart.updateView();
                        // Shopify.theme.jsCart.updateView(cart);
                      }, 1000);
                    }
                  });
                  return;
                }
              }
    
              
    
              //Automatically remove free gift when the additional gift is in the cart and the cart total price is less than the threshold
              if((o.id == variant_id_2) && (o.quantity == 1) && (qtyInTheCart2 == 1)){
                o.freeGift = true;
                if((o.freeGift == true) && (Number(free_gift_over_price_count_2 - o.final_price) < free_gift_over_price_2) && (qtyInTheCart2 == 1) && (cartItems[index] == o)){
                  //Shopify.theme.quantityBox.updateCart(cartItems.indexOf(o), 0);
                  let newObject= { [variant_id_2] : 0 };
                  cartUpdates = {...newObject, ...cartUpdates }
    
                  $.post('/cart/update.js', {
                    updates: cartUpdates,
                    success: function success() {
                      window.setTimeout(function () {
                        // Shopify.theme.jsAjaxCart.updateView();
                        // Shopify.theme.jsCart.updateView(cart);
                      }, 1000);
                    }
                  });
                  return;
    
                }
              }
    
              
            });
    
            
            // if ( (cartItems.length === 1) && (qtyInTheCart > 0) ) {
            //   cartUpdates = { [variant_id] : 0 }
            // } 
            if ( (cartItems.length >= 1) && (qtyInTheCart !== 1) && (free_gift_over_price_count >= free_gift_over_price) ) {
              if(qtyInTheCart >= 1){
                return;
              }
              else{
                cartUpdates = { [variant_id] : 1 }
              }
              
            }
            //additional free gwp
            if ( (cartItems.length >= 1) && (qtyInTheCart2 !== 1) && (free_gift_over_price_count_2 >= free_gift_over_price_2) ) {
              if(qtyInTheCart2 >= 1){
                return;
              }
              else{
                let newObject= { [variant_id_2] : 1 };
                cartUpdates = {...newObject, ...cartUpdates }
              }
              
            } else {
    
              $.post('/cart/update.js', {
                updates: cartUpdates,
                success: function success() {
                  window.setTimeout(function () {
 
                    // Shopify.theme.jsAjaxCart.updateView();
                    // Shopify.theme.jsCart.updateView(cart);
                    //location.reload();
                  
                    getCartPopupContent();
    
                  }, 1000);
                }
              });
              return;
            }
    
            $.post('/cart/update.js', {
              updates: cartUpdates,
              success: function success() {
                window.setTimeout(function () {
                  
                  // Shopify.theme.jsAjaxCart.updateView();
                  // Shopify.theme.jsCart.updateView(cart);
                  //location.reload();
                
                  getCartPopupContent();
  
                }, 1000);
              }
            });
          });
      }
    }
  }

  function getCartPopupContent(notShowCart){
    // get all items]
    if (!notShowCart) {
      showCartPopup();
    }
    
    $.getJSON('/cart.js').then(
      function(cart) {
        createCartPopup(cart);
      }.bind(this)
    );
  }

  function getCartPopupPricesInventory(productData, prices, isGiftProduct) {
    let priceHTML = '<li class="product-details__item product-variant__Price">';
    let inventoryHTML = '';
     
      productData.variants.forEach(function(variant) {
        if(variant.id === prices.itemID) {
          // get compare price
          let comparePrice = "";
          if (variant.compare_at_price != null) {
            comparePrice = variant.compare_at_price;
            if (comparePrice > prices.price) {
              priceHTML += '<span class="original-price">' + theme.Currency.formatMoney(
                  comparePrice * prices.quantity,
                  theme.moneyFormatWithCurrency
              ) + '</span><br/>';
            }
          } else if (prices.original_line_price !== prices.final_line_price) {
              priceHTML += '<span class="original-price">' + theme.Currency.formatMoney(
                  prices.original_line_price,
                  theme.moneyFormatWithCurrency
              ) + '</span><br/>'
              + '<span class="discounted-price">' + theme.Currency.formatMoney(
                  prices.final_line_price,
                  theme.moneyFormatWithCurrency
              ) + '</span></li>';
          }
          // get Inventory
          if (!isGiftProduct) {
            inventoryHTML = '<li class="product-details__item product-variant__Inventory">'+ stockStatus(variant.inventory_quantity) +'</li>';
          }
        }
      });

      priceHTML += '<span class="regular-price">' + theme.Currency.formatMoney(
        prices.final_line_price,
        theme.moneyFormatWithCurrency
      ) +'</span></li>';
    
    return inventoryHTML + priceHTML;
  }

  function emptyCartDisplay(){
    setCartQuantity(0);
    setCartCountBubble(0);
    $(selectors.cartPopupEmpty).removeClass(classes.hidden);
    $(selectors.cartCountContainer).removeClass(classes.hidden);
    $(selectors.cartPopupLoader).addClass(classes.hidden);
  }
  var $window = $(window)
  var windowsize = $window.width()

  // reload get the look on mini cart when resize
  $(window).on("resize", function(event){
    windowsize = $(this).width();
    $.getJSON('/cart.js').then(
      function(cart) {
        createCartPopup(cart);
      }.bind(this)
    );
  });

  function createCartPopup(cart){
    const items = cart.items;
    const $cartPopupItems_container = $(selectors.cartPopupItemsContainer);
    const $getTheLookPopupItemContainer = $(selectors.getTheLookPopupItemContainer)
    const $getTheLookPopupItemContainerMobile = $(selectors.getTheLookPopupItemContainerMobile)
    const $messageMoreItems = $(selectors.messageMoreItems);
    const $messageOneItem = $(selectors.messageOneItem);
    const $discountMessagesTee = $(selectors.discountMessagesTee);
    let cartPopupItem = '';
    let getTheLookPopupItem = '';
    
    emptyCartPopup();

    let productMetafield = []
    let isMetafieldSpendAndSave = false
    $getTheLookPopupItemContainer.empty();
    $getTheLookPopupItemContainerMobile.empty();

    if( items.length == 0) {
      emptyCartDisplay();
      $messageMoreItems.hide()
      $messageOneItem.hide()
      $discountMessagesTee.hide()
    } else {
      productMetafield = []
      isMetafieldSpendAndSave = false
      let quantity = 0;
      let isProductTee = false
      items.forEach(function(item, index){
        $.ajax({ 
          url: '/products/' + item.handle + '?view=json', 
          dataType: 'html',
          async: false, 
          success: function(product){ 
            const productData = JSON.parse(product);
            
            const itemprices = {
              "original_line_price": item.original_line_price,
              "original_price":  item.original_price,
              "final_line_price":  item.final_line_price,
              "final_price":  item.final_price,
              "price": item.price,
              "itemHandle": item.handle,
              "itemID": item.id,
              "quantity": item.quantity
            };

            let isFreeGWP = ((window.enable_free_gift == true) && ((item.product_id == window.free_gift_id) || (item.product_id == window.free_gift_id_2)) && ((cart.total_price >= window.free_gift_over_price) || (cart.total_price >= window.free_gift_over_price_2)) && (item.final_line_price == 0)) ? true : false;
            let freeGWPClass = isFreeGWP ? ' free-gwp-row' : '';

            let freeGWPBadge = isFreeGWP ? '<div class="free-gwp-badge"><span>OUR GIFT TO YOU</span></div>' : '';

            let isGiftProduct = 'hide';
            if (!item.handle.includes("gift-voucher")) {
              isGiftProduct = ''
              quantity += item.quantity
            }
            if (productData.tags.includes('x-category:TEES')) {
              isProductTee = true
            }
            cartPopupItem += '<div class="cart-popup-item' + freeGWPClass +'" data-cart-item-key="'+ item.key +'" data-cartpopup-variantID="'+ item.variant_id +'" data-product-url="'+ item.url +'">'
                + '<div class="cart-popup-item__description"><div>'
                + freeGWPBadge
                  + '<div class="cart-popup-item__title" data-cart-popup-title>'+ item.product_title +'</div>'
                  + '<ul class="product-details" data-cart-popup-product-details>'
                    + setCartPopupProductDetails(
                        item.product_has_only_default_variant,
                        item.options_with_values,
                        item.properties,
                        productData.tags)
                    + getCartPopupPricesInventory(productData, itemprices, isGiftProduct)
                    + '<li class="product-details__item product-quantity"><span>Quantity: </span><span class="quantity">' + item.quantity + '</span></li>'
                  + '</ul>'
                  + `<div class="cart-item__action" data-cartpopup-variantID="${item.variant_id}" data-product-url="${item.url}" data-cart-item-key="${item.key}">`
                    + `<a href="javascript:void(0)" class="cart-popup_edit ${isGiftProduct ? 'hide' : ''}" data-line="${index + 1}" data-cartpopup-edit>`
                      + 'Edit'
                    + '</a>'
                    + '<a href="javascript:void(0)" class="text-link" data-cartpopup-remove>'
                      + 'Remove'
                    + '</a>'
                    + `<button data-with-epi="true" class="swym-button swym-add-to-wishlist-view-product product_${item.product_id}" data-swaction="addToWishlist" data-product-id="${item.product_id}" data-variant-id="${item.variant_id}" data-product-url="${window.location.origin}/${item.url}"></button>`
                  + '</div>'
                + '</div></div>'
                + '<div class="cart-popup-item__image-wrapper" data-cart-popup-image-wrapper>'
                  + setCartPopupImage(item.featured_image.url, item.featured_image.alt)
                + '</div>'
              + '</div>'; 
              if (productData.metafield_spend_and_save) {
                productMetafield.push(productData.metafield_spend_and_save)
                isMetafieldSpendAndSave = true
              } else if (productData.metafield) {
                productMetafield.push(productData.metafield)
                isMetafieldSpendAndSave = false
              }
          } 
        });
        displayLoader(false);
      });

      const giftVoucher = items.filter(item => item.handle.includes("gift-voucher"))

      if (giftVoucher.length == items.length || !items.length) {   
        $messageMoreItems.hide()
        $messageOneItem.hide()
        $discountMessagesTee.hide()
      } else {
        if (isProductTee) {
          $discountMessagesTee.show()
          $messageMoreItems.hide()
          $messageOneItem.hide()
        } else {
          if (quantity > 1) {
            $messageMoreItems.show()
            $messageOneItem.hide()
            $discountMessagesTee.hide()
          } else {
            $messageOneItem.show()
            $messageMoreItems.hide()
            $discountMessagesTee.hide()
          }
        }
      }
      
      if (productMetafield.length > 0) {
        $getTheLookPopupItemContainer.empty();
        $getTheLookPopupItemContainerMobile.empty();
        if (isMetafieldSpendAndSave) {
          getTheLookPopupItem += '<h1 class="title" accordion-mobile>spend and save</h1>'
        } else {
          getTheLookPopupItem += '<h1 class="title" accordion-mobile>GET THE LOOK</h1>'
        }
        getTheLookPopupItem += '<div class="wrap-product-the-look">'
          +'<ul class="grid--view-items">'
          + renderProductTheLook(productMetafield, isMetafieldSpendAndSave)
          + '</ul>'
          +'</div';
          if (windowsize > 768) {
            $getTheLookPopupItemContainer.append(getTheLookPopupItem);
          } else {
            $getTheLookPopupItemContainerMobile.append(getTheLookPopupItem);
          }
      } else {
        getTheLookPopupItem = '';
        $getTheLookPopupItemContainer.empty();
        $getTheLookPopupItemContainerMobile.empty();
      }

      if (items.length) {
        const pushCartItemsWithScarabQueueEvent = new CustomEvent('pushCartItemsWithScarabQueueEvent', {
          detail: {
            items: items
          }
        });
        document.dispatchEvent(pushCartItemsWithScarabQueueEvent);
      }

      $cartPopupItems_container.append(cartPopupItem);
      editCartPopupItem();
      removeCartPopupItem();
      addToCartPopupItem();
      accordionMobile();
      setCartQuantity(cart.item_count);
      setCartCountBubble(cart.item_count);
      setSubTotal(cart.total_price);
      freeShippingBar(cart.total_price);
      items.forEach(function(item){
        const selector = `[data-cart-item-key="${item.key}"]`
        theme.wishlist.init(selector)
      })

      productMetafield.length > 0 && productMetafield[0].forEach(function(item){
        const selector = `[data-wishlist-product="${item.variants[0].id}"]`
      theme.wishlist.init(selector)
      })
      addToCartModal()
      
    }
  }

  function swymCallbackFn(swat){
    swat.initializeActionButtons(".getTheLookPopupItem");
  }

  function accordionMobile(tags) {
    $(selectors.accordionMobile).on('click', function(){
      if ($(this).parents('.getTheLookPopupItemMobile').hasClass('open')) {
        $(this).parents('.getTheLookPopupItemMobile').find('.wrap-product-the-look').slideUp()
        $(this).parents('.getTheLookPopupItemMobile').removeClass('open')
      } else {
        $('.wrap-product-the-look').slideUp()
        $('.getTheLookPopupItemMobile').removeClass('open')
        $(this).parents('.getTheLookPopupItemMobile').find('.wrap-product-the-look').slideDown()
        $(this).parents('.getTheLookPopupItemMobile').addClass('open')
      }
    })
  }

  function renderProductTheLook(productMetafield, isMetafieldSpendAndSave) {
    let html = ''
    productMetafield[0].forEach(function(item){
      if (isMetafieldSpendAndSave) {
        html += renderCardPorduct(item)
      } else {
        html += renderCardPorduct(item)
      }
    })
    return html
  }

  function renderCardPorduct(item) {
    const productHandle = `/products/${item.handle}`
    return '<div class="quickview btn_quick_add" id="quick_add" handle="'+ productHandle +'" miniCartQuickview data-cartpopup-variantid="'+ item.variants[0].id +'">'
      +'<li class="grid__item grid__item--' + item.id +'" data-wishlist-product="'+ item.variants[0].id +'">'
        + '<div class="grid-view-item__image-wrapper product-card__image-wrapper js">'
          + renderImages(item)
        + '</div>'
        + '<div class="product-card-details">'
          + '<div class="h4 grid-view-item__title product-card__title" aria-hidden="true">'
            + '<div>' + item.title + '</div>'
          + '</div>'
          + '<span class="regular-price">' 
            + renderComparePrice(item)
            + '<span class="price-item--sale">' + theme.Currency.formatMoney(
              item.price,
              theme.moneyFormatWithCurrency
            ) 
            + '</span>'
          + '</span>'
          + renderBtnAddToBag(item)
          +'</span>'
        + '</div>'
        + '<div class="product-card-details__wishlist">'
          + '<button data-with-epi="true" class="swym-button swym-add-to-wishlist-view-product product_'+ item.id +'" data-swaction="addToWishlist" data-product-id="'+ item.id +'" data-variant-id="'+ item.variants[0].id +'" data-product-url="'+ window.location.origin +''+ "/" +''+ productHandle +'"></button>'
        + '</div>'
      +'</li>'
    + '</div>'
  }

  function renderBtnAddToBag(item) {
    var btnHtml = '';
    if (item.available){
      btnHtml = '<div class="add-to-bag"><span>Add To Bag</span></div>';
    } else {
      btnHtml = '<div class="add-to-bag sold-out"><span>Sold Out</span></div>';
    }
    return btnHtml;
  }

  function renderImages(item) {
    let imageHtml = '<img src="'+ item.images[1] +'" alt="'+item.images[1]+'" class="'+ classes.cartImage +'">';
    for (const tag of item.tags) {
      let newTag = tag.toLowerCase();
      if (newTag == 'accessories') {
        imageHtml = '<img src="'+ item.images[0] +'" alt="'+item.images[0]+'" class="'+ classes.cartImage +'">';
      }
    }
    return imageHtml;
  }

  function renderComparePrice(item) {
    var priceHTML = '';
    if (item.compare_at_price > item.price) {
      priceHTML = '<span class="original-price">' + theme.Currency.formatMoney(
        item.compare_at_price,
          theme.moneyFormatWithCurrency
      ) + '</span>';
    } 

    return priceHTML;
  }
  
  function displayLoader(status){
    if(status){
      $(selectors.cartCountContainer).addClass(classes.hidden);
      $(selectors.cartPopupItemsContainer).addClass(classes.hidden);
      $(selectors.cartPopupFooter).addClass(classes.hidden);
      $(selectors.cartPopupLoader).removeClass(classes.hidden);
    }else{
      $(selectors.cartCountContainer).removeClass(classes.hidden);
      $(selectors.cartPopupItemsContainer).removeClass(classes.hidden);
      $(selectors.cartPopupFooter).removeClass(classes.hidden);
      $(selectors.cartPopupLoader).addClass(classes.hidden);
    }
  }

  function setSubTotal(total_price){
    $(selectors.cartPopupSubtotal).html(
      theme.Currency.formatMoney(
        total_price,
        theme.moneyFormatWithCurrency
      )
    );
  }

  async function freeShippingBar(total_price) {
    const decode = str => decodeURIComponent(str).replace(/\+/g, ' '); // Hello%20World -> Hello World and replaces +
    const freeShippingBars = document.querySelectorAll(selectors.freeShippingBar); 

    if (!freeShippingBars.length) {
      console.error('No free shipping bars found on the page')
      return
    }

    const freeShippingCartTotal = freeShippingBars[0].dataset.freeshippingCartTotal
    const isoCode = freeShippingBars[0].dataset.isoCode
    const currencySymbol = freeShippingBars[0].dataset.currencySymbol

    let cart
    try {
      const res = await fetch('/cart.js')
      cart = await res.json()
    } catch (error) {
      console.error('Could not fetch cart in freeShippingBar: ', error)
      return
    }

    freeShippingBars.forEach((_freeShippingBar) => {
      const _freeShippingMessage = _freeShippingBar.querySelector(selectors.freeShippingMessage);
      const _freeShippingProgress = _freeShippingBar.querySelector(selectors.freeShippingProgress);
      let data
      try {
        const dataJson = JSON.parse(decode(_freeShippingBar.dataset.settings));
        data = dataJson.dataSetting;
      } catch (error) {
        console.error('Could not parse free shipping bar settings: ', error)
        return
      }
      // Logic to put all the 'special' currencies that don't need to be converted in an array
      const specialRatesCurrencies = ['AUD', 'NZD', 'USD']
      data.forEach(el => {
        if (el.shippingCurrency !== null) {
          specialRatesCurrencies.push(el.shippingCurrency); // ['USD', 'CAD', 'GBP']
        }
      })
      if (!specialRatesCurrencies.includes(isoCode)) {
        _toggleProgressBar('hide')
        return
      }

      _toggleProgressBar('show')
      data.forEach(el => {
        const shippingOrderValue = el.shippingOrderValue.split('-').map(item => parseInt(item.replace('$', '').trim()));
        let cartTotal = total_price ? parseInt(total_price, 10) / 100 : parseInt(freeShippingCartTotal, 10) / 100;
        // Start Gift Card exclusion Logic
        // Using Filter instead of Find as there can be multiple gift cards in the cart
        const ajeGiftCards = cart.items.filter(product => product.handle === 'aje-gift-voucher')
        const normalItems = cart.items.filter(product => product.handle !== 'aje-gift-voucher')
        // Early Return if there are only gift cards in the cart
        if (ajeGiftCards.length > 0 && normalItems.length === 0) {
          _toggleProgressBar('hide')
          return
        }
        // Excludes GiftCard Pricing from the cart total
        if (ajeGiftCards) {
          let giftCardTotalPrice = ajeGiftCards.reduce((total, ajeGiftCard) => {
            const cardPrice = parseInt(ajeGiftCard.price, 10) / 100;
            return total + cardPrice;
          }, 0);
          cartTotal -= giftCardTotalPrice;
        }
        // End Gift Card exclusion Logic
        if (
          shippingOrderValue.length > 1
          && shippingOrderValue[0] <= cartTotal
          && cartTotal < shippingOrderValue[1]
          && (el.shippingCurrency === null || el.shippingCurrency === isoCode)
        ) {

          let remainder = isoCode === 'JPY' ? 
            ((Math.abs(cartTotal - shippingOrderValue[1])).toLocaleString('ja-JP')) 
            : 
            ((Math.abs(cartTotal - shippingOrderValue[1])).toLocaleString('en-US', { minimumFractionDigits: 2 }))

            switch (isoCode) {
              case 'SAR':
              case 'AED':
                amount = el.shippingMessage.replace('$XX', remainder + ' ' + isoCode);
                break;
              case 'NZD':
              case 'USD':
                amount = el.shippingMessage.replace('$XX', isoCode + ' ' + currencySymbol + remainder);
                break;
              case 'AUD':
                amount = el.shippingMessage.replace('$XX', currencySymbol + remainder);
                break;
              default:
                amount = el.shippingMessage.replace('$XX', currencySymbol + remainder + ' ' + isoCode);
                break;
            }

          _freeShippingMessage.innerText = amount
          _setProgressBar(cartTotal, shippingOrderValue[1]);
        }
        if (
          shippingOrderValue.length === 1 
          && shippingOrderValue[0] <= cartTotal
          && (el.shippingCurrency === null || el.shippingCurrency === isoCode)
        )  {
          _freeShippingMessage.innerText = el.shippingMessage;
          _setProgressBar(cartTotal, shippingOrderValue[0])
        }
      });
      
      function _setProgressBar(cartTotal, thresholdInDollars) {
        const progress = cartTotal <= thresholdInDollars ? cartTotal / thresholdInDollars * 100 : 100;
        _freeShippingProgress.style.setProperty("--progress-width", "".concat(progress, "%"));
      }

      function _toggleProgressBar(state) {
        if (state === 'show') {
          freeShippingBars.forEach(bar => bar.classList.remove('hide'))
          _freeShippingMessage.classList.remove('hide');
        }
        if (state === 'hide') {
          freeShippingBars.forEach(bar => bar.classList.add('hide'))
          _freeShippingMessage.classList.add('hide');
        }
      }
    });
  }

  function emptyCartPopup(){
    const $cartPopupItems_container = $(selectors.cartPopupItemsContainer);
    $cartPopupItems_container.empty();
  }

  function setCartPopupProductDetails (
    product_has_only_default_variant,
    options,
    properties,
    tags
  ) {
    var variantPropertiesHTML = '';

    if (!product_has_only_default_variant) {
      variantPropertiesHTML =
        variantPropertiesHTML + getVariantOptionList(options);
    }
    if (properties !== null && Object.keys(properties).length !== 0) {
      variantPropertiesHTML =
        variantPropertiesHTML + getPropertyList(properties, tags);
    }

    if (variantPropertiesHTML.length) {
      return variantPropertiesHTML;
    } 
  }

  function getVariantOptionList(variantOptions) {
    var variantOptionListHTML = '';

    variantOptions.forEach(function(variantOption) {
      variantOptionListHTML =
        variantOptionListHTML +
        '<li class="product-details__item product-variant__'+ variantOption.name +' product-details__item--variant-option">' +
          '<span>' + variantOption.value + '</span>' +
        '</li>';
    });

    return variantOptionListHTML;
  }

  function getPropertyList(properties, tags) {
    var propertListHTML = '';

    var propertiesArray =
    properties !== null ? Object.entries(properties) : [];

    return $.map(
      propertiesArray,
      function(property) {
        const finalSaleTags = '{{ settings.finalsale_tag }}';
        let percentage_off = 0;
        for (const tag of tags) {
          if(tag.includes('x-markdown-pc:')) {
            percentage_off = tag.split(':')[1]
          }
        }
        
        let finalSaleLabel = false
        for (const tag of tags) {
          if (finalSaleTags.includes(tag)) {
              finalSaleLabel = true
              break
          }
        }
        if (finalSaleLabel) {
          var propertyName = '{{ settings.finalsale_msg }}';
          var propertyColour = '{{ settings.finalsale_colour }}';

          propertListHTML =
          propertListHTML +
          '<li class="product-details__item product-variant__Property property_'+ property[0] +'">' +
            '<span style="color: '+ propertyColour +'">' + propertyName + '</span>' +
          '</li>';
  
          return propertListHTML;
        }

      }.bind(this)
    );
  }

  function stockStatus(inventoryQuantity) {
    let status = '';

    if(inventoryQuantity < 4 && inventoryQuantity >= 2){
      status = "LOW IN STOCK";
    }
    if(inventoryQuantity < 2){
      status = "ONE REMAINING";
    }
    return status;
  }

  function setCartPopupImage(imageUrl, imageAlt) {
    if (imageUrl === null) return;

    var sizedImageUrl = theme.Images.getSizedImageUrl(imageUrl, '200x');
    const image = '<img src="'+ sizedImageUrl +'" alt="'+imageAlt+'" class="'+ classes.cartImage +'">';
    return image;
  }

  function editCartPopupItem() {
    $(selectors.cartPopupEditItem).on('click', function(event){ 
      const size = $(this).parent().closest('.cart-popup-item').find(".product-variant__Size span").text()
      const quantity = $(this).parent().closest('.cart-popup-item').find(".product-quantity .quantity").text()
      setPopupEditProductCart(event, size, quantity)
    });
  }

  // func show modal product get the look on mini cart
  function addToCartPopupItem() {
    $(selectors.addToCartPopupEditItem).on('click', function(event){
      event.preventDefault();
      renderModalProduct($(this))
    });
  }

  function showErrorMessageAddToBag(message) {
    const productModal = document.querySelector('#popup-add-to-cart');
    var errorMessage = productModal.querySelector("[data-error-message]");
    var errorMessageWrapper = productModal.querySelector("[data-error-message-wrapper]");
    errorMessageWrapper.style.display = 'block';
    errorMessage.textContent = message;
  }

  // func render modal product in get the look
  function renderModalProduct($this) {
    const data_product_url = $this.attr('handle');
    const productModal = document.querySelector('#popup-add-to-cart .modal-body');
    let data_variant_id = $this.attr('data-cartpopup-variantid');
    fetch(data_product_url)
      .then((response) => response.text())
      .then((responseText) => {
        const html = document.createElement('div');
        html.innerHTML = responseText;
        const productInfo = html.querySelector('.product-single');
        if (productInfo && productInfo.innerHTML.trim().length) {
          productModal.innerHTML = productInfo.innerHTML;
          const btnSubmit = productModal.querySelector("[data-add-to-cart]")
          const productForm = productModal.querySelector("#product-form")
          const magicForm = productModal.querySelector(".magic-zoom-form")
          const finalSale = productModal.querySelector(".final-sale-message")
          const buttonByTwoTees = productModal.querySelector("[button-by-two-tees]")
          productModal.querySelector(".MagicToolboxContainer.mobile-gallery").remove()
          $(".magic-zoom-form").removeClass("product-single__meta")
          $("#popup-add-to-cart .MagicToolboxContainer").addClass("product-single__meta")
          $(finalSale).appendTo("#popup-add-to-cart .product-title-price-container");
          const btnSubmitText = productModal.querySelector("[data-add-to-cart-text]")
          const select = productModal.querySelector("select[name='id']")
          const options = select.querySelectorAll("option")
          const currentColor = productModal.querySelector(".current-colour-label").getAttribute("data-current-color")
          const magicTool = productModal.querySelector(".MagicToolboxContainer")
          const btnSwym = productModal.querySelector(".swym-button")
          $(productForm).appendTo("#popup-add-to-cart .MagicToolboxContainer");
          $(magicForm).removeClass("product-single__meta")
          $(magicTool).addClass("product-single__meta")
          const getTheLook = productModal.querySelector(".get-the-look")
          const predictPlacement = productModal.querySelector(".predict-placement.wair-rec-placement-mobile")
          if (buttonByTwoTees) {
            const shopTeesLink = buttonByTwoTees.querySelector(".shop_tees_link")
            $(buttonByTwoTees).prependTo("#popup-add-to-cart .product-form__item--submit");
            $(shopTeesLink).hide()
          }
          $(getTheLook).hide();
          $(predictPlacement).hide();
          hideCartPopup();
          const sizes = productModal.querySelectorAll(".size-picker")
          sizes.length > 1 && btnSubmit.setAttribute('disabled', true)
          sizes && sizes.forEach((size, index) => {    
            var id = `size__${index + 1}`
            var input = size.querySelector('input');
            var label = size.querySelector('label');
            input.setAttribute("id", id)
            label.setAttribute("for", id)
            $(label).on('click', function(event) {
              if (select && options.length && currentColor) {
                const currentOption = currentColor.trim() + " / " + event.target.innerText.trim()
                options.forEach((option, index) => {
                  if (option.textContent.includes(currentOption)) {
                    if (btnSwym) {
                      btnSwym.setAttribute("data-variant-id", option.value)
                      theme.wishlist.init("#popup-add-to-cart")
                    }
                    if (option.disabled) {
                      btnSubmit.setAttribute('disabled', true)
                      btnSubmitText.textContent = 'sold out'
                    } else {
                      btnSubmit.removeAttribute('disabled')
                      btnSubmitText.textContent = 'Add To Bag'
                      select.selectedIndex = index;
                    }
                  }
                }) 
              }
            
            });
          })
          if (btnSwym) {
            btnSwym.setAttribute("data-variant-id", data_variant_id)
            theme.wishlist.init("#popup-add-to-cart")
          }
          $('#popup-add-to-cart').modal('show');
        }
      });
  }

  var submitClicked = false; //Check and only do it once per click

  // func submit add to bag in get the look
  function addToCartModal() {
    submitClicked = false;
    $('body').on('click', '#popup-add-to-cart .btn.product-form__cart-submit', (e) => {
    const dataProductForm = document.querySelector("#popup-add-to-cart .modal-body [data-product-form]")
      e.preventDefault()
      if(submitClicked === false){
        addToBag(dataProductForm)
      }
      submitClicked = true;
    });
  }
  
  // func add product in get the look
  function addToBag(dataProductForm) {
    $.ajax({
      type: 'POST',
      url: '/cart/add.js',
      data: $(dataProductForm).serialize(),
      dataType: 'json', 
      error : function(data) {
        if (data) showErrorMessageAddToBag(data.responseJSON.description)
        submitClicked = false
      },
      success: function () {
        $("#popup-add-to-cart .MagicToolboxContainer").remove();
        $("#popup-add-to-cart .modal-body [data-product-form]").remove();
        $("#popup-add-to-cart .size-picker-swatch-wrapper").remove();
        $("#popup-add-to-cart").modal('hide');
        $('#background-overlay-cart').addClass('active');
        setupCartPopup();
        showCartPopup();
        submitClicked = true;
      }
    });
  }
  
  function setPopupEditProductCart(event, size, quantity) {
    const data_product_url = event.target.parentElement.getAttribute('data-product-url');
    const data_variant_id = event.target.parentElement.getAttribute('data-cartpopup-variantID');
    const productModal = document.querySelector('#popup-cart-update .modal-body');
    const line = event.target.getAttribute('data-line');

    if (!data_product_url || !data_variant_id || !productModal || !line) {
      console.warn("Modal is not exist")
      return;
    }

    fetch(data_product_url)
      .then((response) => response.text())
      .then((responseText) => {
        hideCartPopup(); 
        const html = document.createElement('div');
        html.innerHTML = responseText;
        const productInfo = html.querySelector('.product-single');

        if (productInfo && productInfo.innerHTML.trim().length) {
          productModal.innerHTML = productInfo.innerHTML;
          const btnSubmit = productModal.querySelector("[data-add-to-cart]")
          const btnUpdate = productModal.querySelector("[data-update-to-cart]")
          const productForm = productModal.querySelector("#product-form")
          const magicForm = productModal.querySelector(".magic-zoom-form")
          const finalSale = productModal.querySelector(".final-sale-message")
          const minus = productModal.querySelector(".quantity-icon.minus")
          const plus = productModal.querySelector(".quantity-icon.plus")
          productModal.querySelector(".MagicToolboxContainer.mobile-gallery").remove()
          const magicTool = productModal.querySelector(".MagicToolboxContainer")
          const getTheLook = productModal.querySelector(".get-the-look")
          const buttonByTwoTees = productModal.querySelector("[button-by-two-tees]")
          if (buttonByTwoTees) {
            const shopTeesLink = buttonByTwoTees.querySelector(".shop_tees_link")
            $(shopTeesLink).hide()
          }
        
          $(getTheLook).hide();
          $(btnSubmit).hide();
          $(btnUpdate).show();
          $(productForm).appendTo("#popup-cart-update .MagicToolboxContainer");
          $(productForm).attr("id", "product_form_edit")
          $(magicForm).removeClass("product-single__meta")
          $(magicTool).addClass("product-single__meta")
          $(finalSale).appendTo("#popup-cart-update .product-title-price-container");

          $(btnUpdate).on('click', () => onUpdateCartModal(data_variant_id, data_product_url, line));
          $(minus).on('click', () => onPressQuantityIcon(false));
          $(plus).on('click', () => onPressQuantityIcon(true));

          initSelectionSize(size, quantity)
          initWishlistButton(data_variant_id)
          $('#popup-cart-update').modal('show');
        }
      })
  }

  function initSelectionSize(size, quantity) {
    const {productModal, quantityIp} = querySelectorItem()
    productModal.querySelectorAll(".size-picker").forEach((sizePicker, index) => {    
      var id = `size_${index + 1}`
      var input = sizePicker.querySelector('input');
      var label = sizePicker.querySelector('label');
      input.setAttribute("id", id)
      label.setAttribute("for", id)
      $(label).on('click', (event) => onSelectSize(event, {size, quantity}));

      if (size && label.textContent.trim() == size) { // set size is selected
        label?.click()
        quantityIp.value = quantity  
      } else if (!size && index === 0) { // if size not exist, select first option
        label?.click()
      }
    })
  }

  function initWishlistButton(data_variant_id) {
    const {btnSwym} = querySelectorItem()
    if (btnSwym) {
      btnSwym.setAttribute("data-variant-id", data_variant_id)
      theme.wishlist.init("#popup-cart-update")
    }
  }

  function onPressQuantityIcon(isPlus) {
    const {quantityIp} = querySelectorItem()
    if (!quantityIp) {
      showErrorMessage("Can not find input field")
      return;
    }
    const quantity = parseInt(quantityIp.value)
    if (isPlus) quantityIp.value = quantity + 1
    else if (!isPlus && quantity > 0) quantityIp.value = quantity - 1
  }

  function onSelectSize(event, oldOptionVariant) {
    const {productModal, btnUpdate, btnUpdateText, selectSize, quantityIp} = querySelectorItem()
    if (!productModal || !selectSize || !btnUpdate || !btnUpdateText || !quantityIp ) {
      showErrorMessage("Data Select Error")
      return;
    }

    const currentColor = productModal.querySelector(".current-colour-label").getAttribute("data-current-color").trim()
    const currentSize = event.target.innerText.trim()
    const currentOption = currentColor + " / " + currentSize
    const oldOption = currentColor + " / " + oldOptionVariant.size
    selectSize.querySelectorAll("option").forEach((option, index) => {
      if (option.textContent.includes(currentOption)) {
        initWishlistButton(option.value)
        if (option.disabled) {
          btnUpdate.setAttribute('disabled', true)
          btnUpdateText.textContent = 'sold out'
          quantityIp.value = 0
        } else {
          btnUpdate.removeAttribute('disabled')
          btnUpdateText.textContent = 'update'
          selectSize.selectedIndex = index;
          quantityIp.value = currentOption == oldOption ? oldOptionVariant.quantity : 1;
        }
      }
    }) 
  }

  function querySelectorItem() {
    const productModal = document.querySelector('#popup-cart-update');
    const quantityIp = productModal.querySelector('.product-form__input')
    const btnUpdate = productModal.querySelector("[data-update-to-cart]")
    const btnUpdateText = productModal.querySelector("[data-update-to-cart-text]")
    const selectSize = productModal.querySelector("select[name='id']")
    const btnSwym = productModal.querySelector(".swym-button")

    return {productModal, quantityIp, btnUpdate, btnUpdateText, selectSize, btnSwym}
  }

  function onUpdateCartModal(oldVariantID, dataProductUrl, line) {
    const {selectSize, quantityIp} = querySelectorItem()
    if (!selectSize || !quantityIp ) {
      showErrorMessage("Select or input quantity not found")
      return;
    }

    $.getJSON(dataProductUrl, function(data) {
      if (data.product) {
        const newVariantID = selectSize.value
        const productVariant = data.product.variants.filter(variant => variant.id == newVariantID)
        if (!productVariant || productVariant.length == 0) {
          showErrorMessage(`Can not edit this product variant for now`)
          return 
        }
        let inventory_quantity = productVariant[0].inventory_quantity;
        document.querySelectorAll(".cart-popup-items .cart-popup-item").forEach((cartItem, index) => {
          const cartItemVariantID = cartItem.getAttribute("data-cartpopup-variantid")
          if (cartItemVariantID == newVariantID && line != (index + 1)) {
            const quantity = cartItem.querySelector(".product-quantity .quantity").textContent
            inventory_quantity -= quantity
          }
        })
        if (inventory_quantity < quantityIp.value) {
          showErrorMessage(`You can only add ${inventory_quantity} ${productVariant[0].title} product to the cart`)
          return 
        }
        if (oldVariantID == newVariantID) {
          changeCart(line, quantityIp.value)
          return;
        } 
        changeCart(line, 0, true)
      }
    })
  }

  function changeCart(line, quantity, callAddToCart) {
    $.ajax({
      type: 'POST',
      url: '/cart/change.js',
      data: {
        'line': line,
        'quantity': quantity
      },
      dataType: 'json', 
      error : function(data) {
        console.log({data})
        if (data) showErrorMessage(data.responseJSON.message)
      },
      success: function () { 
        if (callAddToCart) {
          addToCart()
          return 
        }
        
        handleCompleteEdit()
      }
    }); 
  }

  function addToCart() {
    const form = document.querySelector('#popup-cart-update form.product-form');
    $.ajax({
      type: 'POST',
      url: '/cart/add.js',
      data: $(form).serialize(),
      dataType: 'json', 
      error : function(data) {
        if (data) showErrorMessage(data.responseJSON.description)
      },
      success: function () {
        handleCompleteEdit()
      }
    });
  }

  function handleCompleteEdit() {
    $('#popup-cart-update').modal('hide');
    if (location.pathname === "/cart") {
      location.reload()
    } else {
      $('#background-overlay-cart').addClass('active');
      setupCartPopup()
      // $.getJSON('/cart.js', function(state) {
      //   setCartCountBubble(state.item_count);
      // })
    }
  }

  function showErrorMessage(message) {
    const productModal = document.querySelector('#popup-cart-update');
    var errorMessage = productModal.querySelector("[data-error-message]");
    var errorMessageWrapper = productModal.querySelector("[data-error-message-wrapper]");
    errorMessageWrapper.style.display = 'block';
    errorMessage.textContent = message;
  }

  function removeCartPopupItem() {
    $(selectors.cartPopupRemoveItem).on('click', function(){
      const itemVariantID = $(this).parent().closest('.cart-popup-item').attr('data-cartpopup-variantID');
      let itemData = {};
      itemData[itemVariantID] = 0;

      displayLoader(true);

      const params = {
        url: '/cart/update.js',
        data: { updates: itemData },
        dataType: 'json'
      };
      
      $.post(params)
        .done(
          function(cart) {
            createCartPopup(cart);

            if (window.enable_free_gift == true) {

              //only 1 free gift with purchase item
              if((window.free_gift_over_price_2 == '') && (window.free_gift_id_2 == '' )){
                $.getJSON('/cart.js', function(cart) {
                  var free_gift_over_price = window.free_gift_over_price,
                      variant_id = window.free_gift_variant_id, //Shopify.theme_settings.free_gift_id,
                      cartItems = cart.items,
                      qtyInTheCart = 0,
                      cartUpdates = {},
                      cartTotal = cart.total_price;
            
              
                  for (var i = 0; i < cartItems.length; i++) {
                    if (cartItems[i].id == variant_id ) {
                      qtyInTheCart = cartItems[i].quantity;
                      break;
                    }
                  }
            
                //Automatically remove free gift when the gift is in the cart and the cart total price is less than the threshold
                cartItems.map((o, index) => {
                  if((o.id == variant_id) && (o.quantity == 1) && (qtyInTheCart == 1)){
                    o.freeGift = true;
                    if((o.freeGift == true) && (Number(cartTotal - o.final_price) < free_gift_over_price) && (qtyInTheCart == 1) && (cartItems[index] == o)){
                      //Shopify.theme.quantityBox.updateCart(cartItems.indexOf(o), 0);
                      cartUpdates = { [variant_id] : 0 }
            
                      
                      $.post('/cart/update.js', {
                        updates: cartUpdates,
                        success: function success() {
                          window.setTimeout(function () {
                            // Shopify.theme.jsAjaxCart.updateView();
                            // Shopify.theme.jsCart.updateView(cart);
                          }, 1000);
                        }
                      });
                      return;
                    }
                  }
                });
            
            
            
                  if ( (cartItems.length === 1) && (qtyInTheCart > 0) ) {
                    //cartUpdates = { [variant_id] : 0 }
                  } else if ( (cartItems.length >= 1) && (qtyInTheCart !== 1) && (cartTotal >= free_gift_over_price) ) {
                    if(qtyInTheCart >= 1){
                      return;
                    }
                    else{
                      cartUpdates = { [variant_id] : 1 }
                    }
                    
                  } else {
                    return;
                  }
            
                  $.post('/cart/update.js', {
                    updates: cartUpdates,
                    success: function success() {
                      window.setTimeout(function () {
                        Shopify.theme.jsAjaxCart.updateView();
                        Shopify.theme.jsCart.updateView(cart);
                      }, 1000);
                    }
                  });
                });
              }
              else{
                //2 free GWP
                  //additional free gift with purchase item
                  $.getJSON('/cart.js', function(cart) {
                    var free_gift_over_price =  window.free_gift_over_price,
                        free_gift_over_price_2 =  window.free_gift_over_price_2, //additional free gwp
                        variant_id = window.free_gift_variant_id,
                        variant_id_2 = window.free_gift_variant_id_2, //additional free gwp
                        cartItems = cart.items,
                        qtyInTheCart = 0,
                        qtyInTheCart2 = 0, //additional free gwp
                        cartUpdates = {},
                        cartTotal = cart.total_price,
                        free_gift_over_price_count = 0,
                        free_gift_over_price_count_2 = 0;
            
            
            
      
                    //aje            
                    for (var i = 0; i < cartItems.length; i++) {
                      if (cartItems[i].id == variant_id ) {
                        qtyInTheCart = cartItems[i].quantity;
                        break;
                      }
                    }
            
            
                    //additional free gwp
                    for (var i = 0; i < cartItems.length; i++) {
                      if (cartItems[i].id == variant_id_2 ) {
                        qtyInTheCart2 = cartItems[i].quantity;
                        break;
                      }
                    }
            
            
            
                    
                    cartItems.map((o, index) => {
                      if((o.vendor).toUpperCase() == (window.from_vendor).toUpperCase()){
                        free_gift_over_price_count += o.final_line_price;
                      }

                      if((o.vendor).toUpperCase() == (window.from_vendor_2).toUpperCase()){
                        free_gift_over_price_count_2 += o.final_line_price;
                      }
                    })
      
                    cartItems.map((o, index) => {
      
            
                      //Automatically remove free gift when the gift is in the cart and the cart total price is less than the threshold
                      if((o.variant_id == variant_id) && (o.quantity == 1) && (qtyInTheCart == 1)){

                        o.freeGift = true;
                        if((o.freeGift == true) && (Number(free_gift_over_price_count - o.final_price) < free_gift_over_price) && (qtyInTheCart == 1) && (cartItems[index] == o)){

                          //Shopify.theme.quantityBox.updateCart(cartItems.indexOf(o), 0);
                          cartUpdates = { [variant_id] : 0 }
            
                          $.post('/cart/update.js', {
                            updates: cartUpdates,
                            success: function success() {
                              window.setTimeout(function () {
                                // Shopify.theme.jsAjaxCart.updateView();
                                // Shopify.theme.jsCart.updateView(cart);
                              }, 1000);
                            }
                          });
                          return;
                        }
                      }
            
                      
            
                      //Automatically remove free gift when the additional gift is in the cart and the cart total price is less than the threshold
                      if((o.id == variant_id_2) && (o.quantity == 1) && (qtyInTheCart2 == 1)){
                        o.freeGift = true;
                        if((o.freeGift == true) && (Number(free_gift_over_price_count_2 - o.final_price) < free_gift_over_price_2) && (qtyInTheCart2 == 1) && (cartItems[index] == o)){
                          //Shopify.theme.quantityBox.updateCart(cartItems.indexOf(o), 0);
                          let newObject= { [variant_id_2] : 0 };
                          cartUpdates = {...newObject, ...cartUpdates }
            
                          $.post('/cart/update.js', {
                            updates: cartUpdates,
                            success: function success() {
                              window.setTimeout(function () {
                                // Shopify.theme.jsAjaxCart.updateView();
                                // Shopify.theme.jsCart.updateView(cart);
                              }, 1000);
                            }
                          });
                          return;
            
                        }
                      }
            
                      
                    });
            
                    
                    // if ( (cartItems.length === 1) && (qtyInTheCart > 0) ) {
                    //   cartUpdates = { [variant_id] : 0 }
                    // } 
                    if ( (cartItems.length >= 1) && (qtyInTheCart !== 1) && (free_gift_over_price_count >= free_gift_over_price) ) {
                      if(qtyInTheCart >= 1){
                        return;
                      }
                      else{
                        cartUpdates = { [variant_id] : 1 }
                      }
                      
                    }
                    //additional free gwp
                    if ( (cartItems.length >= 1) && (qtyInTheCart2 !== 1) && (free_gift_over_price_count_2 >= free_gift_over_price_2) ) {
                      if(qtyInTheCart2 >= 1){
                        return;
                      }
                      else{
                        let newObject= { [variant_id_2] : 1 };
                        cartUpdates = {...newObject, ...cartUpdates }
                      }
                      
                    } else {
            
                      $.post('/cart/update.js', {
                        updates: cartUpdates,
                        success: function success() {
                          window.setTimeout(function () {
                            
                            // Shopify.theme.jsAjaxCart.updateView();
                            // Shopify.theme.jsCart.updateView(cart);
                            //location.reload();
                          
                            getCartPopupContent();
            
                          }, 1000);
                        }
                      });
                      return;
                    }
            
                    $.post('/cart/update.js', {
                      updates: cartUpdates,
                      success: function success() {
                        window.setTimeout(function () {
                          
                          // Shopify.theme.jsAjaxCart.updateView();
                          // Shopify.theme.jsCart.updateView(cart);
                          //location.reload();
                        
                          getCartPopupContent();
          
                        }, 1000);
                      }
                      
                    });
                  });
              }
            }

          }.bind(this)
        )
        .fail(
          function() {
            showCartError(null);
          }.bind(this)
        );
    });
  }

  function setCartQuantity(quantity) {
    var ariaLabel;

    if (quantity === 1) {
      ariaLabel = theme.strings.oneCartCount;
    } else if (quantity > 1) {
      ariaLabel = theme.strings.otherCartCount.replace('[count]', quantity);
    }

    $(selectors.cartPopupCartQuantity).text(quantity).attr('aria-label', ariaLabel);
  }

  function setCartCountBubble(quantity) {
    $(selectors.cartCountBubble).removeClass(classes.hidden);
    $(selectors.cartCount).text(quantity);
  }

  function syncOtherCheckbox(currentCheckbox) {

    let otherCheckboxSelector;

    if ($(currentCheckbox).closest('[data-cart-popup-wrapper]').length) {
      otherCheckboxSelector = '[data-cart-wrapper] ' + selectors.cartGiftWrap;
    } else if ($(currentCheckbox).closest('[data-cart-wrapper]').length) {
      otherCheckboxSelector = '[data-cart-popup-wrapper] ' + selectors.cartGiftWrap;
    }

    const otherCheckbox = $(otherCheckboxSelector);

    if (otherCheckbox && otherCheckbox.length) {
      otherCheckbox.prop('checked', currentCheckbox.checked);
    }
  }

  function onGiftWrapAdd(evt){
    var currentCheckbox = evt.currentTarget;

    var hasGiftWrap = currentCheckbox.checked ? "Yes" : "No";
      
    const cartAttributes = {
      "Has Gift Wrap": hasGiftWrap
    };

    var params = {
      url: '/cart/update.js',
      data: { attributes: cartAttributes},
      dataType: 'json'
    };

    $.post(params)
      .done(function(cart) {
        createCartPopup(cart);
      })
      .fail(function() {
        showCartError(null);
      });

    // Sync checkboxs
    syncOtherCheckbox(currentCheckbox);
  }

  return {
    init: initToggleCartPopup,
    setPopupEditProductCart: setPopupEditProductCart,
    addToBag: addToBag,
    renderModalProduct: renderModalProduct,
    addToCartModal: addToCartModal
  };
})();

theme.ProductRecommendations = (function() {
  function ProductRecommendations(container) {
    this.$container = $(container);

    var productId = this.$container.data('productId');
    var recommendationsSectionUrl =
      '/recommendations/products?&section_id=product-recommendations&product_id=' +
      productId +
      '&limit=4';

    $.get(recommendationsSectionUrl).then(
      function(section) {
        var recommendationsMarkup = $(section).html();
        if (recommendationsMarkup.trim() !== '') {
          this.$container.html(recommendationsMarkup);
        }
      }.bind(this)
    );
  }

  return ProductRecommendations;
})();

theme.Quotes = (function() {
  var config = {
    mediaQuerySmall: 'screen and (max-width: 749px)',
    mediaQueryMediumUp: 'screen and (min-width: 750px)',
    slideCount: 0
  };
  var defaults = {
    accessibility: true,
    arrows: false,
    dots: true,
    autoplay: false,
    touchThreshold: 20,
    slidesToShow: 3,
    slidesToScroll: 3
  };

  function Quotes(container) {
    var $container = (this.$container = $(container));
    var sectionId = $container.attr('data-section-id');
    var wrapper = (this.wrapper = '.quotes-wrapper');
    var slider = (this.slider = '#Quotes-' + sectionId);
    var $slider = $(slider, wrapper);

    var sliderActive = false;
    var mobileOptions = $.extend({}, defaults, {
      slidesToShow: 1,
      slidesToScroll: 1,
      adaptiveHeight: true
    });

    config.slideCount = $slider.data('count');

    // Override slidesToShow/Scroll if there are not enough blocks
    if (config.slideCount < defaults.slidesToShow) {
      defaults.slidesToShow = config.slideCount;
      defaults.slidesToScroll = config.slideCount;
    }

    $slider.on('init', this.a11y.bind(this));

    enquire.register(config.mediaQuerySmall, {
      match: function() {
        initSlider($slider, mobileOptions);
      }
    });

    enquire.register(config.mediaQueryMediumUp, {
      match: function() {
        initSlider($slider, defaults);
      }
    });

    function initSlider(sliderObj, args) {
      if (sliderActive) {
        sliderObj.slick('unslick');
        sliderActive = false;
      }

      sliderObj.slick(args);
      sliderActive = true;
    }
  }

  Quotes.prototype = _.assignIn({}, Quotes.prototype, {
    onUnload: function() {
      enquire.unregister(config.mediaQuerySmall);
      enquire.unregister(config.mediaQueryMediumUp);

      $(this.slider, this.wrapper).slick('unslick');
    },

    onBlockSelect: function(evt) {
      // Ignore the cloned version
      var $slide = $(
        '.quotes-slide--' + evt.detail.blockId + ':not(.slick-cloned)'
      );
      var slideIndex = $slide.data('slick-index');

      // Go to selected slide, pause autoplay
      $(this.slider, this.wrapper).slick('slickGoTo', slideIndex);
    },

    a11y: function(event, obj) {
      var $list = obj.$list;
      var $wrapper = $(this.wrapper, this.$container);

      // Remove default Slick aria-live attr until slider is focused
      $list.removeAttr('aria-live');

      // When an element in the slider is focused set aria-live
      $wrapper.on('focusin', function(evt) {
        if ($wrapper.has(evt.target).length) {
          $list.attr('aria-live', 'polite');
        }
      });

      // Remove aria-live
      $wrapper.on('focusout', function(evt) {
        if ($wrapper.has(evt.target).length) {
          $list.removeAttr('aria-live');
        }
      });
    }
  });

  return Quotes;
})();

theme.slideshows = {};

theme.SlideshowSection = (function() {
  function SlideshowSection(container) {
    var $container = (this.$container = $(container));
    var sectionId = $container.attr('data-section-id');
    var slideshow = (this.slideshow = '#Slideshow-' + sectionId);

    theme.slideshows[slideshow] = new theme.Slideshow(slideshow, sectionId);
  }

  return SlideshowSection;
})();

theme.SlideshowSection.prototype = _.assignIn(
  {},
  theme.SlideshowSection.prototype,
  {
    onUnload: function() {
      delete theme.slideshows[this.slideshow];
    },

    onBlockSelect: function(evt) {
      var $slideshow = $(this.slideshow);
      var adaptHeight = $slideshow.data('adapt-height');

      if (adaptHeight) {
        theme.slideshows[this.slideshow].setSlideshowHeight();
      }

      // Ignore the cloned version
      var $slide = $(
        '.slideshow__slide--' + evt.detail.blockId + ':not(.slick-cloned)'
      );
      var slideIndex = $slide.data('slick-index');

      // Go to selected slide, pause auto-rotate
      $slideshow.slick('slickGoTo', slideIndex).slick('slickPause');
    },

    onBlockDeselect: function() {
      // Resume auto-rotate
      $(this.slideshow).slick('slickPlay');
    }
  }
);

theme.slideshows = {};

theme.VideoSection = (function() {
  function VideoSection(container) {
    var $container = (this.$container = $(container));

    $('.video', $container).each(function() {
      var $el = $(this);
      theme.Video.init($el);
      theme.Video.editorLoadVideo($el.attr('id'));
    });
  }

  return VideoSection;
})();

theme.VideoSection.prototype = _.assignIn({}, theme.VideoSection.prototype, {
  onUnload: function() {
    theme.Video.removeEvents();
  }
});

theme.heros = {};

theme.HeroSection = (function() {
  function HeroSection(container) {
    var $container = (this.$container = $(container));
    var sectionId = $container.attr('data-section-id');
    var hero = '#Hero-' + sectionId;
    theme.heros[hero] = new theme.Hero(hero, sectionId);
  }

  return HeroSection;
})();


$(document).ready(function() {
  var sections = new theme.Sections();

  sections.register('cart-template', theme.Cart);
  sections.register('product', theme.Product);
  sections.register('collection-template', theme.Filters);
  sections.register('collection-athletica', theme.Filters);
  sections.register('product-template', theme.Product);
  sections.register('header-section', theme.HeaderSection);
  sections.register('map', theme.Maps);
  sections.register('slideshow-section', theme.SlideshowSection);
  sections.register('video-section', theme.VideoSection);
  sections.register('quotes', theme.Quotes);
  sections.register('hero-section', theme.HeroSection);
  sections.register('product-recommendations', theme.ProductRecommendations);
});

theme.init = function() {
  theme.customerTemplates.init();
  var wasLight = false;
  var pageStores = [];

  // Theme-specific selectors to make tables scrollable
  var tableSelectors = '.rte table,' + '.custom__item-inner--html table';

  slate.rte.wrapTable({
    $tables: $(tableSelectors),
    tableWrapperClass: 'scrollable-wrapper'
  });

  // Theme-specific selectors to make iframes responsive
  var iframeSelectors =
    '.rte iframe[src*="youtube.com/embed"],' +
    '.rte iframe[src*="player.vimeo"],' +
    '.custom__item-inner--html iframe[src*="youtube.com/embed"],' +
    '.custom__item-inner--html iframe[src*="player.vimeo"]';

  slate.rte.wrapIframe({
    $iframes: $(iframeSelectors),
    iframeWrapperClass: 'video-wrapper'
  });

  // Common a11y fixes
  slate.a11y.pageLinkFocus($(window.location.hash));

  $('.in-page-link').on('click', function(evt) {
    slate.a11y.pageLinkFocus($(evt.currentTarget.hash));
  });

  $('a[href="#"]').on('click', function(evt) {
    evt.preventDefault();
  });

  slate.a11y.accessibleLinks({
    messages: {
      newWindow: theme.strings.newWindow,
      external: theme.strings.external,
      newWindowExternal: theme.strings.newWindowExternal
    },
    $links: $('a[href]:not([aria-describedby], .product-single__thumbnail)')
  });

  theme.FormStatus.init();

  var selectors = {
    image: '[data-image]',
    imagePlaceholder: '[data-image-placeholder]',
    imageWithPlaceholderWrapper: '[data-image-with-placeholder-wrapper]'
  };

  var classes = {
    hidden: 'hide'
  };

  $(document).on('lazyloaded', function(e) {
    var $target = $(e.target);

    if (!$target.is(selectors.image)) {
      return;
    }

    $target
      .closest(selectors.imageWithPlaceholderWrapper)
      .find(selectors.imagePlaceholder)
      .addClass(classes.hidden);
  });

  // When the theme loads, lazysizes might load images before the "lazyloaded"
  // event listener has been attached. When this happens, the following function
  // hides the loading placeholders.
  function onLoadHideLazysizesAnimation() {
    $(selectors.image + '.lazyloaded')
      .closest(selectors.imageWithPlaceholderWrapper)
      .find(selectors.imagePlaceholder)
      .addClass(classes.hidden);
  }
  onLoadHideLazysizesAnimation();

  function changeTheme(selector, themeLight, themeDark) {
    if ($(selector).hasClass(themeLight)) {
      $(selector).removeClass(themeLight);
      wasLight = true;
    }
    $(selector).addClass(themeDark);
  }

  function toDarkTheme() {
    changeTheme("header.site-header", "light-theme", "dark-theme");
    $(".template-index header.site-header, .landing-page header.site-header").attr("style", "border-bottom: 1px solid #efefef; background: #fff");
    $(".template-index .site-header__mobile-nav, .landing-page .site-header__mobile-nav").attr("style", "background: #fff;");
    $("body").find("#Desktop-Homepage, #White-Nav-Overlay, #White-Nav-Overlay #Group-3 #Fill-1, #White-Nav-Overlay #Group-6 #Fill-4").attr("fill", "#000");
    $("#Bag-Icon path#Fill-1").css({"fill": "#000"});
    $("body").find(".site-header__wishlist #White-Nav-Overlay, .site-header__menu #White-Nav-Overlay").attr("stroke", "#000");
    $('.site-header__logo-image.site-header__logo-image--centered #White-Nav-Overlay').attr("fill", "#fff");

    if ($("header.site-header").hasClass("black-background")) {
      applyBlackSiteHeader();
    }
  }

  function revertToOriginal() {
    if ($("body").find(".btn--link.site-header__icon.mobile-nav--close").length <= 0 &&
      $("body").find(".mobile-nav-wrapper.js-menu--is-open").length <= 0 &&
      $("body").find(".site-nav--has-dropdown.site-nav--active-dropdown").length <= 0 &&
      $("body").find(".region-selector-options").attr("style") === "display: none;") {
      if (wasLight === true) { //originally is using light theme
        if ($("header.site-header").hasClass("dark-theme")) {
          $("header.site-header").removeClass("dark-theme");
          $("header.site-header").addClass("light-theme");
          $("body").find("#Desktop-Homepage, #White-Nav-Overlay, #White-Nav-Overlay #Group-3 #Fill-1, #White-Nav-Overlay #Group-6 #Fill-4").attr("fill", "#fff");
          $("#Bag-Icon path#Fill-1").css({"fill": "#fff"});
          $("body").find(".site-header__wishlist #White-Nav-Overlay, .site-header__menu #White-Nav-Overlay").attr("stroke", "#fff");
        } 
      }
      $("body").find(".on-scroll").hide();
      $("body").find(".on-scroll-top").show();
      $(".template-index header.site-header, .template-index .site-header__mobile-nav, .landing-page header.site-header, .landing-page .site-header__mobile-nav").removeAttr("style");
    }
  }

  function applyBlackSiteHeader(){
    $(".site-nav li button .site-nav__label, .site-nav li .site-nav__link--main .site-nav__label, .site-header__icon .region-selector-container span, .site-header__icon .icon__account-label").attr("style", "color: #fff !important;");
    $(".site-nav li button .site-nav__label, .site-nav li .site-nav__link--main .site-nav__label a").attr("style", "color: #fff !important;");
    $(".template-index .site-header__mobile-nav").attr("style", "background: #000;");
    $("body").find("#Desktop-Homepage, #White-Nav-Overlay, #White-Nav-Overlay #Group-3 #Fill-1, #White-Nav-Overlay #Group-6 #Fill-4").attr("fill", "#fff");
    $("#Bag-Icon path#Fill-1").css({"fill": "#fff"});
    $("#CartCount span").attr("style", "color: #fff !important;");
    $(".site-header__icon.search__submit *").attr("style", "fill: #fff !important;");
    $(".site-header__icon.site-header__wishlist .site-header__wishlist-hover-off *").attr("style", "fill: #fff !important; stroke: #fff !important");
    $(".site-header__icon.site-header__wishlist .site-header__wishlist-hover-on *").attr("style", "fill: #fff !important; stroke: #fff !important");
    $(".site-header__icon.site-header__account *").attr("style", "fill: #fff !important;");
    $(".site-header__icon.site-header__account span").attr("style", "color: #fff !important;");
    $(".site-header__icons-wrapper-left .site-header__icon.js-mobile-nav-toggle *").attr("style", "stroke: #fff !important;");
    $(".site-header__icons-wrapper-left .site-header__icon.site-header__search-toggle *").attr("style", "fill: #fff !important;");
    $(".site-header__logo *").attr("style", "fill: #fff !important;");
    $(".site-top-nav li.active .site-header__logo *").attr("style", "fill: #000 !important;");
    $("body").find(".site-header__wishlist #White-Nav-Overlay, .site-header__menu #White-Nav-Overlay").attr("stroke", "#fff");
  }

  function checkBrowser(){
    const c = navigator.userAgent.search('Chrome'),
          f = navigator.userAgent.search('Firefox'),
          e = navigator.userAgent.search('Edge'),
          m8 = navigator.userAgent.search('MSIE 8.0'),
          m9 = navigator.userAgent.search('MSIE 9.0'),
          s = navigator.userAgent.search('Safari');
    let browser = '';
    const $html = $('html');
    if (c > -1) {
      browser = 'chrome';
    } else if (e > -1) {
      browser = 'edge';
    } else if (f > -1) { 
      browser = 'firefox';
    } else if (m9 > -1) {
      browser = 'msei-9';
    } else if (m8 > -1) {
        browser = 'msei-8';
    } else if (s > -1) {
      browser = 'safari';
    }
    $html.addClass(browser);
  }
  checkBrowser();

  $(document).ready(function () {
    // check if page is on a product and load the size guide content with ajax
    if (/product/.test(self.location.href)) {
      $.ajax({
        url: '/pages/size-fit-guide',
        type: 'get',
        success: function(data){
          const sizeGuide = $(data).find('.size-guide');
          $('#size-guide').find('.size-guide').html(sizeGuide.html());
        }
      });

      //anchor scroll animation for product page, bundle product link
      $('.bundle-product-link a').on('click', function(event) {
        event.preventDefault();
        $('html,body').animate({scrollTop: $('#bundler-target-element').offset().top - ($('.site-header').outerHeight() + 50)},800);
      });
    }

    //anchor scroll animation for product page, product-info link
    $(".product-info-link").click(function(event) {
      event.preventDefault();
      $('html,body').animate({scrollTop: $('#product-info').offset().top - $('.site-header').outerHeight()},800);
    });
      
    // only show holiday gift link after bundles are present
    $(document).arrive('.bundler-target-element', function() {
      $('.bundle-product-link').show();
    });

    $(".site-header__wishlist").hover(function() {
      $(".site-header__wishlist-hover-off").hide();
      $(".site-header__wishlist-hover-on").show();
    }, function() {
      $(".site-header__wishlist-hover-off").show();
      $(".site-header__wishlist-hover-on").hide();
    });

    $("body").on("click", ".region-selector-container", function() {
      $(".region-selector-options").slideToggle();
    });

    $("body").on("click", ".mobile-nav--open:not(.mobile-nav--close)", function() {
      toDarkTheme();
     });
    
    $("body").on("click", ".mobile-nav--close", function() {
      revertToOriginal();
    });

    $(document).mouseup(function(e) {
      var container = $(".region-selector-container");
      // if the target of the click isn't the container nor a descendant of the container
      if ($(window).width() > 990 && !container.is(e.target) && container.has(e.target).length === 0) {
          $(".region-selector-options").slideUp();
      }
    });

    // add landing-page class to body on templates that has landing-page class for header styling
    if ($("[id*='shopify-section-page-']").hasClass("landing-page")) {
      $("body").addClass('landing-page');
    }

    if ($("body").hasClass("template-index")) {
      $("header.site-header").hover(function() {
        toDarkTheme();
      }, function() {
        if ($(window).scrollTop() == 0) {
          revertToOriginal();
        }
      });
      $("header.site-header").click(function() {
        toDarkTheme();
      });
    }

    if ($(window).scrollTop() > 0) {
      toDarkTheme();
    } else {
      revertToOriginal();
    }
    $(window).scroll(function() {
      if ($(this).scrollTop() > 0) {
        toDarkTheme();
      } else {
        revertToOriginal();
      }
      if ($("header.site-header").hasClass("black-background")) {
        applyBlackSiteHeader();
      }
    });

    //product details accordion - mobile
    $(".product-details-item-header").on("click", function() {
      $(this).parent(".product-details-item-block").toggleClass('active');
      $(this).siblings(".item-content").slideToggle( "0.2" );
    });

    // category filter panel control
    var filterPanel = $('.collection-product-filtering'),
        filterLabel = $('.filters-toolbar__label.filter'),
        filterClose = $('.filter-close');

    {% if shop.permanent_domain != 'a-j-e.myshopify.com' %}
      $('body').click(function (e) {
        if (!$(e.target).closest(filterLabel).length) {
          if (!$(e.target).closest(filterPanel).length) {
            if (!$(e.target).hasClass('bc-sf-filter-option-view-less') && !$(e.target).hasClass('bc-sf-filter-option-view-more')) {
              $('body').removeClass('scroll-lock')
              filterPanel.hide();
            }
          }
        }
      });
    {% endif %}

    filterClose.on('click', function(){
      filterPanel.hide();
      $('body').removeClass('scroll-lock')
      if ($(window).width() < 768) {
        $('body').css('position', '');
      }
    });

    filterLabel.on('click', function(){
      filterPanel.show();
      if ($(window).width() < 768) {
        $('body').css('position', 'fixed');
      }
    });


    $('.nav-our-story').click(function () {
      $('html, body').animate({
          scrollTop: $('.column-our-story').offset().top-50
      }, 500);
      return false;
    });

    $('.nav-arrow-down').click(function () {
      $('html, body').animate({
          scrollTop: $('.column-our-story').offset().top-50
      }, 500);
      return false;
    });

    $('.nav-our-craft').click(function () {
      $('html, body').animate({
          scrollTop: $('.column-our-craft').offset().top-60
      }, 500);
      return false;
    });

    $('.nav-our-boutiques').click(function () {
      $('html, body').animate({
          scrollTop: $('.section-visit-irl-heading').offset().top-60
      }, 500);
      return false;
    });


    $.ajax({
      method: "GET",
      url: "/"
    }).then(res => {
      const $errorContainer = $('.empty-page-clone');
      const $trending = $(res).find('.homepage-trending');
      const $tiles = $(res).find('.homepage-collection-tiles');
      $errorContainer.append($trending);
      $errorContainer.append($tiles);
    });

    //slick slider for homepage trending tags - mobile
    function homePageTrendingSlick() {
      $('.homepage-trending .collection-grid .grid--uniform').not('.slick-initialized').slick({
        responsive: [
          {
            breakpoint: 9999,
            settings: "unslick"
          },
          {
            breakpoint: 751,
            settings: {
              centerMode: false,
              variableWidth: true,
              arrows: false,
              draggable: true,
              swipe: true,
              infinite: false,
              dots: false,
            }
          }
        ]
    });
  }
  homePageTrendingSlick();
  $(window).resize($.debounce(50, homePageTrendingSlick));

  //slick slider for homepage usp - mobile
  function homePageUSPSlick() {
    $('.homepage-USP .grid').not('.slick-initialized').slick({
      responsive: [
        {
          breakpoint: 9999,
          settings: "unslick"
        },
        {
          breakpoint: 751,
          settings: {
            dots: false,
            arrows: false,
            infinite: true,
            mobileFirst: true,
            draggable: false,
            swipe: false,
            swipeToSlide: false,
            touchMove: false,
            autoplay: true,
            autoplaySpeed: 3000,
            fade: true,
            cssEase: "linear",
            slidesToShow: 1,
            slidesToScroll: 1
          }
        }
      ]
  });

  // slick slider for fading announcement bar
  function fadingAnnouncementBar() {
    $('.fading-annoucement-bar').not('.slick-initialized').slick({
      dots: false,
      arrows: false,
      infinite: true,
      mobileFirst: true,
      draggable: false,
      swipe: false,
      swipeToSlide: false,
      touchMove: false,
      autoplay: true,
      autoplaySpeed: 3000,
      fade: true,
      cssEase: "linear",
      slidesToShow: 1,
      slidesToScroll: 1
    });
  }
  fadingAnnouncementBar();
  $(window).resize($.debounce(50, fadingAnnouncementBar));
  
  /*==START - SWYM Wishslist Add to Cart Buttons==*/
  var productBtnMarkup = `
    <a href="" data-product-id="\{\{empi}}" data-url="\{\{du}}" data-variant-id="\{\{epi}}" class="add-to-cart">
	  \{\{#isInCart}}ADDED\{\{/isInCart}}
      \{\{^isInCart}}ADD TO BAG\{\{/isInCart}}
    </a>`;

  function swymCallbackFn(swat) {
    window._swat.fetchWrtEventTypeET(
      function(wishlistProducts) {
        wishlistProducts.forEach(function(wishlistProduct) {
          wishlistProduct.isInCart = _swat.platform.isInDeviceCart(wishlistProduct.epi);
          var renderedProductTile = SwymUtils.renderTemplateString(productBtnMarkup, wishlistProduct);
            $('.swym-item[data-epi="'+wishlistProduct.epi+'"]:not(.disabled) .swym-add-to-cart').html(renderedProductTile);
        });
        
        attachClickListeners();
      },
      window._swat.EventTypes.addToWishList
    );

    swat.evtLayer.addEventListener(swat.JSEvents.variantChanged, function(rawVariantChangeData){
      let newVariantId = rawVariantChangeData.detail.d.variant.id;
      let swymPdpBtn = document.querySelector(".template-product .grid.product-single .swym-button");
      let oldVariantId = swymPdpBtn.getAttribute("data-variant-id")
      if (newVariantId && oldVariantId != newVariantId) {
        swymPdpBtn.setAttribute("data-variant-id", newVariantId);
        swat.initializeActionButtons(".template-product .grid.product-single .product-details-wishlist");
      }
    })
  }

  setTimeout(function() {
    if(!window.SwymCallbacks && $('#swym-plugin-name').length) {
      window.SwymCallbacks = [];
    }
    if(window.SwymCallbacks) {
      window.SwymCallbacks.push(swymCallbackFn);
    }

    // wishlist icon safari fix
    if (navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1) {
      document.getElementById("safari-flasher-pre").innerHTML = '.swym-button.swym-add-to-wishlist{}';
    };
  }, 3000);

  function attachClickListeners(){
    $('.swym-item:not(.disabled) .add-to-cart').on('click', function(e){
      e.preventDefault();
      var productId = e.target.getAttribute('data-variant-id');
      var variantId = e.target.getAttribute('data-variant-id');
      var du = e.target.getAttribute('data-url');
      var $parent = $(e.target).closest('.swym-add-to-cart');
      $parent.addClass('swym-loading');
      window._swat.replayAddToCart(
        {empi: productId, du: du},
        variantId,
        function() {
          $(e.target).text('Added');
          $parent.removeClass('swym-loading');
          $('.site-header__icons-wrapper [data-show-minicart]').trigger('click');
        },
        function(e) {
          $(e.target).text('Error');
        }
      );
    }); 
  }
  /*==END - SWYM Wishslist Add to Cart Buttons==*/

}
homePageUSPSlick();
$(window).resize($.debounce(50, homePageUSPSlick));

    // Grid view
    const productViewBtn = $('.product-view-button');
    const twoColumnBtn = $('.product-view-two-column');
    const fourColumnBtn = $('.product-view-four-column');
    const collectionGrid = $('[data-collection-grid]');
    const showColoursBtn = $('.view-colours-link');
    
    // for Athletica
    const productViewLabel = $('.product-view-label');
    const productViewDropdownBtn = $('.view-dropdown a');

    twoColumnBtn.on('click', (e) => {
      const $this = $(e.target);
      $this.addClass('active');
      fourColumnBtn.removeClass('active');
      collectionGrid.addClass('two-column-view');
    });

    fourColumnBtn.on('click', (e) => {
      const $this = $(e.target);
      $this.addClass('active');
      twoColumnBtn.removeClass('active');
      collectionGrid.removeClass('two-column-view');
    });

    productViewBtn.on('click', (e) => {
      const $this = $(e.target);
      // $this.toggleClass('active');
      var toggleTxt = $this.text().toUpperCase().trim();
      if (toggleTxt === 'OUTFIT VIEW') {
        toggleTxt = 'PRODUCT VIEW';
      } else {
        toggleTxt = 'OUTFIT VIEW';
      }
      $this.text(toggleTxt);
      collectionGrid.toggleClass('show-product-images');
    });

    productViewLabel.on('click', (e) => {
      var $viewDropdown = $('.view-dropdown');
     if ($viewDropdown.is(':visible')) {
      $viewDropdown.hide();
     } else {
      $viewDropdown.show();
     }
    });

    productViewDropdownBtn.on('click', (e) => {
      const $this = $(e.target);
      var toggleTxt = $this.data('view');
      $('.view-dropdown a').removeClass('active');
      if (toggleTxt === 'outfit') {
        var toggleLabel = 'Outfit View';
        collectionGrid.removeClass('show-product-images');
        $('body').addClass('show-outfit-images-visible');
        $('.size-selected-image').addClass('visible');
        showSizeCollection();
      } else {
        var toggleLabel = 'Product View';
        collectionGrid.addClass('show-product-images');
        $('body').removeClass('show-outfit-images-visible');
        $('.size-selected-image').removeClass('visible');
      }
      $('.view-dropdown a[data-view="' + toggleTxt +'"]').addClass('active');
      $('.product-view-label').text(toggleLabel);
    });

    if (isAthleticaPage()) {
      $('body').click(function (event) {
        if(!$(event.target).closest('.bc-sf-filter-custom-sorting').length && !$(event.target).is('.bc-sf-filter-custom-sorting') && $('.bc-sf-filter-filter-dropdown').is(':visible')) {
          $(".bc-sf-filter-filter-dropdown").hide();
        }
        if(!$(event.target).closest('.product-view-label').length && !$(event.target).is('.product-view-label') && $('.product-view-label').is(':visible')) {
          $(".view-dropdown").hide();
        }
      });
    }
    
    showColoursBtn.on('click', (e) => {
      const $this = $(e.target);
      $this.closest('.grid-view-item').find('.grid-view-item__image-wrapper').toggleClass('show-variants');
    });

    // update cart page automatically on quantity selector click
    $('body').on('click', '.js-change-quantity', function() {
      var $this = $(this),
          $input = $(this).siblings('input'),
          val = parseInt($input.val()),
          valMax = 100000000000000000000000000000,
          valMin = $input.attr('min') || 0;
      if ($input.attr('max') != null){
        valMax = $input.attr('max');
      }
  
      if(isNaN(val) || val < valMin) {
          $input.val(valMin);
          return false;
      } else if (val > valMax) {
          $input.val(valMax);
          return false;
      }
  
      if($this.data('func') == 'plus') {
          if(val < valMax) $input.val(val + 1);
      } else {
          if(val > valMin) $input.val(val - 1);
      }
      $input.trigger('change');
    });

    //fixed product menu on product page
    if (/product/.test(self.location.href)) {
      let productAddToCartForm = $('.grid.product-single .product-add-to-cart-form');
      if ($("body").hasClass("template-collection") || $("body").hasClass("template-search")) {

      } else {
        $(window).scroll(() => {
          // $('.size-guide-link-mobile').removeClass('size-guide-reposition').appendTo('.product-options--mobile');

          //shift zendesk button & gorgias chat up when product floating bar is active
          if($(window).width() < 1478){
            if($('.fixed-product-menu.sticky').length > 0){
              if($('#launcher').length > 0){
                $('#launcher').addClass('shift-upward');
              }

              if($('#chat-button').length > 0){
                $('#chat-button').addClass('shift-upward');
              }

              if($('#chat-window').length > 0){
                $('#chat-window').addClass('shift-upward');
              }

              if($('#chat-campaigns').length > 0){
                $('#chat-campaigns').addClass('shift-upward');
              }
            }
            else{
              if($('#launcher.shift-upward').length > 0){
                $('#launcher').removeClass('shift-upward');
              }

              if($('#chat-button.shift-upward').length > 0){
                $('#chat-button').removeClass('shift-upward');
              }

              if($('#chat-window.shift-upward').length > 0){
                $('#chat-window').removeClass('shift-upward');
              }

              if($('#chat-campaigns.shift-upward').length > 0){
                $('#chat-campaigns').removeClass('shift-upward');
              }
            }
          }

          
          
        //mobile
        if ($(window).width() < 768) {

          //scroll more than product info
          if ($(window).scrollTop() + $('.site-header').height() > $('.product-single__meta').offset().top + $('.product-single__meta').height()) {
             //scroll less than newsletter subscription, add fixed product menu
            if ($(window).scrollTop() + $(window).height() < $('.site-footer__item-inner--newsletter').offset().top) {
              $('.fixed-product-menu').addClass('sticky');
              productAddToCartForm.insertAfter('.fixed-product-menu .title-and-price');
              $('.fixed-product-menu .size-guide-link-mobile').addClass('size-guide-reposition').prependTo('.grid.product-single .size-picker-swatch-wrapper');
              $('.fixed-product-menu .product-details-wishlist .swym-add-to-wishlist').appendTo('.grid.product-single .product-title-price-container .product-details-wishlist');
              swatchAppFixedMenu();
            }
            //scroll more than newsletter subscription, remove fixed product menu
            else{
              $('.fixed-product-menu').removeClass('sticky');
            }
          }
          else {
            resetFixedProductMenu();
          }
        }
          
          //desktop
          else{
            //scroll more than product info
            if ($(window).scrollTop() > $('.product-option-info').offset().top + $('.product-option-info').outerHeight()) {

              //scroll less than footer, add fixed product menu
              if ($(window).scrollTop() + $(window).height() < $('.site-footer').offset().top) {
                $('.fixed-product-menu').addClass('sticky');
                productAddToCartForm.insertAfter('.fixed-product-menu .title-and-price');
                $('.size-guide-link-mobile').addClass('size-guide-reposition').prependTo('.grid.product-single .size-picker-swatch-wrapper');
                $('.grid.product-single .product-title-price-container .product-details-wishlist .swym-add-to-wishlist').appendTo('.fixed-product-menu .product-details-wishlist');
                swatchAppFixedMenu();
              }
              //scroll more than footer, remove fixed product menu
              else{
                $('.fixed-product-menu').removeClass('sticky');
              }
            } else {
              $('.fixed-product-menu .product-details-wishlist .swym-add-to-wishlist').appendTo('.grid.product-single .product-title-price-container .product-details-wishlist');
              resetFixedProductMenu();
            }
        }
        });
      }

      //resize window width
      $(window).resize( ()=>{

        //desktop width
        if($(window).width() >= 768){

          //remove fixed product menu
          $('.fixed-product-menu').removeClass('sticky');
          productAddToCartForm.appendTo('#product-form');
        }
      });
  }
  
  function ifOnAthleticaPage() {
    var isAthletica = false;
    if ($('body.template-collection').hasClass('athletica')) {
      isAthletica = true;
    }
    return isAthletica;
  }

  function resetFixedProductMenu(){
    let productAddToCartForm = $('.fixed-product-menu .product-add-to-cart-form');

    $('.fixed-product-menu').removeClass('sticky');
    productAddToCartForm.appendTo('#product-form');

    $(".size-picker-section .icon-open-close").removeClass('active');
    $('.size-picker-section .size-picker-swatch-wrapper').removeClass('show');

    //move colour swatches back to position at the top of page when no floating bar
    // $('.dropup-content .content-container .swatch-view-custom-image').appendTo('.colour-swatches-group div[id*="swatch-group"] .swatch-view-stack');
  }

  function swatchAppFixedMenu(){
    $(document).arrive('div[id*="swatch-group"]', function() {
      var swatchList = $('.swatch-view-stack .swatch-view-custom-image');
      swatchList.appendTo($('.dropup-content .content-container'));
      $('div[current-product="true"] .star-set-image').each(function(){
        var currentSwatchImg = $(this).css('background-image').replace(/^url\(['"](.+)['"]\)/, '$1');
        var swatchName = $(this).parent().attr('data-value');
        var colourVal = 'url(' + currentSwatchImg + ')';
        $('.current-product-colour .colour-swatch').css('background', colourVal).attr('data-color-value', swatchName);
      })
    });
  }

    //product colour select section - fixed product menu
    $('.fixed-product-menu-display .current-product-colour').click(function() {
      $(this).find(".icon-open-close").toggleClass('active');
      $(this).siblings(".dropup-content").toggleClass('show');

      //close colour dropdown and show size dropdown
      if($('.dropup-content.show').length > 0){
        if($('.size-picker-swatch-wrapper.show').length > 0){
          $('.product-options-container .size-picker-section .current-size').trigger('click');
        }
      }
    });

    //product variant size select - fixed product menu
    $('.product-options-container .size-picker-section .fixed-product-menu-display').click(function() {
      $(this).find(".icon-open-close").toggleClass('active');
      $(this).siblings(".size-picker-swatch-wrapper").toggleClass('show');

      //hide size picker panel when a size is selected 
      if($('.size-picker-swatch-wrapper.show').length > 0){
        $('.size-picker-swatch-wrapper.show .size-picker').click(function(){
          $(".size-picker-section .icon-open-close").removeClass('active');
          $('.size-picker-swatch-wrapper.show').removeClass('show');
        });

        //close size dropdown and show colour dropdown
        if($('.dropup-content.show').length > 0){
          $('.fixed-product-menu-display .current-product-colour').trigger('click');
        }
      }
    });

    //product variant colour select panel width
    function productColourPanelWidth() {
      $(window).scroll(() => {
        if(($(window).width() >= 768) && ($('.fixed-product-menu.sticky').length > 0)){
          $('.fixed-product-menu.sticky .dropup-content').css({ 'width': $('.fixed-product-menu.sticky .colour-picker-section').outerWidth()+ 'px' });
        }
        else{
          $('.dropup-content').removeAttr("style");
        }
      })
    }
    productColourPanelWidth();
    $(window).resize($.debounce(50, productColourPanelWidth));

    // Lodash reinit after Cross App
    // Disabled as variant select is working. Enable when there's further issues
    
    // $(document).arrive('#cross-sells', function() {
    //   fetch('https://cdn.jsdelivr.net/npm/lodash@4.17.4/lodash.min.js')
    //   .then(response => response.text())
    //   .then(text => eval(text))
    // });

    //product variant size select panel width
    function productSizePanelWidth() {
      $(window).scroll(() => {
        if(($(window).width() >= 768) && ($('.fixed-product-menu.sticky').length > 0)){
          $('.fixed-product-menu.sticky .size-picker-swatch-wrapper').css({ 'width': 'calc(53% - ' + $('.fixed-product-menu.sticky .colour-picker-section').outerWidth()+ 'px)' });
        }
        else{
          $('.size-picker-swatch-wrapper').removeAttr("style");
        }
      })
    }
    productSizePanelWidth();
    $(window).resize($.debounce(50, productSizePanelWidth));

    //afterpay placement on product page
    $(window).resize( ()=>{
      if($(window).width() < 751){
        if (!$('.athletica-product-info').length) {
          $('.grid.product-single .product-afterpay-container').appendTo('.grid.product-single .product-option-info .product__price');
        }
      }
      // else{
      //   $('.product-afterpay-container').insertAfter('.product-option-info .product-title-price-container');
      // }
    }).resize();

    //product page - fix ‘View Details' link to bottom of screen if 'View Details' link is not visible on the screen
    $(window).scroll(() => {
      let bottomOfScreen = $(window).scrollTop() + $(window).innerHeight();
      let topOfScreen = $(window).scrollTop();

      if($('.product-single .product-single__meta').length > 0 && !$('.athletica-product-info').length){
        var boundaryPoint1 = $('.product-single .product-single__meta').offset().top + $('.product-single .product-single__meta').outerHeight();
        var boundaryPoint2 = $('.product-single .dummy-view-details-link').offset().top + $('.product-single .dummy-view-details-link').outerHeight();
      }

      if ((bottomOfScreen > boundaryPoint1) && (topOfScreen < boundaryPoint2) && ((bottomOfScreen + 25) < boundaryPoint2)){
          $('.product-single .product-view-details-link').addClass('sticky');
      } else {
        $('.product-single .product-view-details-link').removeClass('sticky');
      }
    }).scroll();

    //Product page mobile video
    function initPDPMobileVideo() {
      $(document).on('click', '.pdp-mobile-video .video-play-icon, .pdp-mobile-video svg', function(){
        if ( $(window).width() < 768 ) {
          document.querySelector('.pdp-mobile-video video').play();
          $('.pdp-mobile-video .video-play-icon svg').fadeOut();
        }
      });
    }
    initPDPMobileVideo();
    
    function blog_post_slider() {
      if($('.blog-shop-the-feature').length) {
        $('.shop-the-feature-wrapper').append($('.blog-shop-the-feature').find('.shg-category-col'));
        $('.shop-the-feature-wrapper').slick({
          dots: false,
          infinite: true,
          speed: 300,
          slidesToShow: 2,
          slidesToScroll: 1,
          rows: 1,
          autoplay: false,
          arrows: false,
          mobileFirst: true,
          variableWidth: true,
          responsive: [
            {
              breakpoint: 1024,
              settings: {
                slidesToShow: 5,
                slidesToScroll: 1,
                rows: 1
              }
            }
          ]
        });
      }
      $('.blog-shop-the-feature').css('display', 'none')
    };
    
    $('.featured-collection').css('display', 'none');
    function featuredCollectionSlider() {
      if($('.featured-collection').length) {
        $('.shop-the-feature-wrapper').append($('.featured-collection').find('.shg-category-col'));
        $('.shop-the-feature-wrapper').slick({
          dots: false,
          infinite: true,
          speed: 300,
          slidesToShow: 2,
          slidesToScroll: 1,
          rows: 1,
          autoplay: false,
          arrows: true,
          mobileFirst: true,
          variableWidth: true,
          prevArrow: '<button class="slick-prev" role="img" aria-label="prev"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-left-icon.svg" alt="icon left"/></button>',
          nextArrow: '<button class="slick-next" role="img" aria-label="next"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-right-icon.svg" alt="icon right"/></button>',
          responsive: [
            {
              breakpoint: 1024,
              settings: {
                slidesToScroll: 2,
                rows: 1
              }
            }
          ]
        });
      }
      $('.guide .shop-the-feature-wrapper .slick-next').click();
      $('.featured-collection').css('display', 'none');
    };

    // Instagram widget
    setTimeout(() => {
      if ( $('.instagram-widget').length ) {
        var instagramPics = $('.fs-timeline');
        instagramPics.slick({
          dots: false,
          infinite: true,
          speed: 300,
          slidesToShow: 2,
          slidesToScroll: 1,
          rows: 2,
          autoplay: false,
          arrows: true,
          mobileFirst: true,
          variableWidth: true,
          prevArrow: '<button class="slick-prev" role="img" aria-label="prev"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-left-icon.svg" alt="icon left"/></button>',
          nextArrow: '<button class="slick-next" role="img" aria-label="next"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-right-icon.svg" alt="icon right"/></button>',
          responsive: [
            {
              breakpoint: 1024,
              settings: {
                slidesToShow: 5,
                slidesToScroll: 1,
                rows: 1
              }
            }
          ]
        });
        $('.instagram-widget .slick-next').click();
        $('.instagram-widget').show();
      }
      blog_post_slider();
      featuredCollectionSlider();
    }, 5000);
    
    function store_details_slider() {
      $slide = $('.store-details-slider').find('.shg-sld-slides');
      
      if($slide.length) {
        $('.store-details-slick-wrapper').append($slide.find('.shg-c-lg-3'));
        $('.store-details-slick-wrapper').slick({
          dots: false,
          infinite: true,
          speed: 300,
          slidesToShow: 2,
          slidesToScroll: 1,
          rows: 0,
          slide: '.shg-c-lg-3',
          autoplay: false,
          arrows: true,
          mobileFirst: true,
          variableWidth: true,
          prevArrow: '<button class="slick-prev" role="img" aria-label="prev"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-left-icon.svg" alt="icon left"/></button>',
          nextArrow: '<button class="slick-next" role="img" aria-label="next"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-right-icon.svg" alt="icon right"/></button>',
          responsive: [
            {
              breakpoint: 1024,
              settings: {
                slidesToShow: 5,
                slidesToScroll: 1,
                rows: 0
              }
            }
          ]
        });
      }
    };
    store_details_slider();

    function store_locator_slider() {
      $store = $('.store-locator-store-wrapper');
      if($store.length) {
        $store.each(function() {
          $('.store-locator-slider').append('<div class="store-locator-slider-each">' + $(this).find('.shg-box-content')[0].outerHTML + '</div>');
        });
      };
      $('.store-locator-slider-each').each(function() {
        const $slickWrapper = $(this).find('.store-details-slick-wrapper');
        $(this).append('<div class="store-details-slick-wrapper"></div>');
        $(this).find('.shg-sld-item .shg-row > div').addClass('enabled-slide');

        if($(this).find('.shg-sld-item .shg-row .enabled-slide').length > 0){
          $(this).find('.shg-sld-item .shg-row .enabled-slide:empty').remove();
        }

        $(this).find('.store-details-slick-wrapper').append($(this).find('.enabled-slide'));
        $(this).find('.store-details-slick-wrapper').slick({
          dots: false,
          infinite: true,
          speed: 300,
          slidesToShow: 1,
          slidesToScroll: 1,
          rows: 0,
          slide: '.enabled-slide',
          autoplay: false,
          arrows: true,
          mobileFirst: true,
          variableWidth: true,
          prevArrow: '<button class="slick-prev" role="img" aria-label="prev"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-left-icon.svg" alt="icon left"/></button>',
          nextArrow: '<button class="slick-next" role="img" aria-label="next"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-right-icon.svg" alt="icon next"/></button>',
          responsive: [
            {
              breakpoint: 1440,
              settings: {
                slidesToShow: 4,
                slidesToScroll: 1,
                rows: 0
              }
            }
          ]
        });
      });
    };
    store_locator_slider();

    function heroImageLinkInit() {
      $('.desktop-image').click(function(e) {
      let link = $(".homepage-hero-link").attr('href');
      location.href=link;
      });
      $('.mobile-image').click(function(e) {
      let link = $(".homepage-hero-link").attr('href');
      location.href=link;
      });
    }
    heroImageLinkInit()

    // shop the latest
    setTimeout(() => {
      if ( $('.shop-latest-section').length ) {
        var shopLatest = $('.shop-latest');
        shopLatest.slick({
          dots: false,
          infinite: true,
          speed: 300,
          slidesToShow: 1,
          slidesToScroll: 1,
          autoplay: false,
          arrows: true,
          mobileFirst: true,
          variableWidth: true,
          prevArrow: '<button class="slick-prev" role="img" aria-label="prev"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-left-icon.svg" alt="icon left"/></button>',
          nextArrow: '<button class="slick-next" role="img" aria-label="next"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-right-icon.svg" alt="icon next"/></button>',
          responsive: [
            {
              breakpoint: 1024,
              settings: {
                slidesToShow: 5,
                slidesToScroll: 1,
                rows: 1
              }
            }
          ]
        });
      }
    }, 500);
  });

  /* Infinite Scroll Customisations */

  function sortBy(arg, sel, elem, order) {
    const $selector = $(sel);
    const $element = $(elem);
    $element.sort(function (a, b) {
      const an = parseInt(a.getAttribute(arg));
      const bn = parseInt(b.getAttribute(arg));
      if (order == "asc") {
        if (an > bn)
          return 1;
        if (an < bn)
          return -1;
      } else if (order == "desc") {
        if (an < bn)
          return 1;
        if (an > bn)
          return -1;
      }
      return 0;
    });
    $element.detach().insertBefore($selector);
  }
  
  let trackAll = 1;
  let trackLoadAll = 0;
  function loadUrlInAjax(url, nextPage) {
    $.ajax({
      type: 'GET',
      url: url,
      dataType: "html",
      beforeSend: function () {
        $(".inf-scr-fading-circle-container").show();
        $(".infinite-load-more").hide();
        $(".infinite-view-all").hide();
      },
      success: function (data) {
        $(".inf-scr-fading-circle-container").hide();
        const loadedData = $(data).find(".infinite-scroll-matrix");
        $(loadedData).attr("data-current-page", nextPage);
        if (parseInt(nextPage) > parseInt($(".infinite-view-all").attr("data-current-page"))) {
          $(".infinite-view-all").attr("data-current-page", nextPage);
          localStorage.setItem('infinite-current-page', nextPage);
          if ($("body").hasClass("template-search")) {
            window.history.replaceState({}, '', window.location.href.split("&page=")[0] + `&page=${nextPage}&scroll=true`);
          } else {
            window.history.replaceState({}, '', window.location.href.split('?')[0] + `?page=${nextPage}&scroll=true`);
          }
        }
        if ($("body").find(`ul[data-current-page=${nextPage}]`).length < 1) {
          $(loadedData).insertBefore($(".infinite-progress-bar"));
          // $("body").find("ul.infinite-scroll-matrix").each(function () {
          //   if (parseInt($(loadedData).data("current-page")) > parseInt($(this).data("current-page"))) {
          //     $(loadedData).insertAfter($(this));
          //   }
          // });
          if (trackAll === 1) {
            trackLoadAll = parseInt($(".infinite-view-all").data("total-pages")) - nextPage - 1;
          }
          trackAll++;
        }
        if (trackAll >= trackLoadAll) {
          sortBy("data-current-page", ".infinite-progress-bar", "ul.infinite-scroll-matrix", "asc");
          $(window).scrollTop(parseInt(localStorage.getItem('infinite-scroll-pos')));
          initInfiniteScroll();
        }
      }
    });
    const totalPages = $(".infinite-view-all").data("total-pages");
    if (nextPage + 1 <= totalPages) {
      loadAllPages(nextPage);
    }
  }

  function loadAllPages(currentPages=null) {
    if (currentPages === null) {
      currentPages = $(".infinite-view-all").data("current-page");
    }
    let nextPage = currentPages + 1;
    let loadMoreURL = "";
    if ($("body").hasClass("template-search")) {
      loadMoreURL = window.location.href.split("&page=")[0] + `&page=${nextPage}&scroll=true`;
    } else {
      loadMoreURL = window.location.href.split('?')[0] + `?page=${nextPage}&scroll=true`;
    }
    loadUrlInAjax(loadMoreURL, nextPage);
  }

  let trackAllPrev = 1;
  let trackLoadAllPrev = 0;
  let prevScrollPos = 0;
  function loadPrevAjax(url, prevPage) {
    $.ajax({
      type: 'GET',
      url: url,
      dataType: "html",
      beforeSend: function () {
        $(".inf-scr-fading-circle-container").show();
        $(".infinite-load-more").hide();
        $(".infinite-view-all").hide();
      },
      success: function (data) {
        $(".inf-scr-fading-circle-container").hide();

        const totalProducts = $('.infinite-scroll-matrix').data('total-products');
        const currentProducts = $('.infinite-product-card').length;
        if (currentProducts < totalProducts) {
          $(".infinite-load-more").show();
          $(".infinite-view-all").show();
        }
        let loadedPage = localStorage.getItem('infinite-current-page');
        const loadedData = $(data).find(".infinite-scroll-matrix");
        $(loadedData).attr("data-current-page", prevPage);
        if (parseInt(prevPage) < parseInt($(".infinite-view-all").attr("data-current-page"))) {
          $(".infinite-view-all").attr("data-current-page", loadedPage);
          if ($("body").hasClass("template-search")) {
            window.history.replaceState({}, '', window.location.href.split("&page=")[0] + `&page=${loadedPage}&scroll=true`);
          } else {
            window.history.replaceState({}, '', window.location.href.split('?')[0] + `?page=${loadedPage}&scroll=true`);
          }
        }
        if ($("body").find(`ul[data-current-page=${prevPage}]`).length < 1) {
          $(loadedData).insertBefore($(".infinite-progress-bar"));
          if (trackAllPrev === 1) {
            trackLoadAllPrev = parseInt(loadedPage) - 1;
          }
          trackAllPrev++;
        }
        // $("body").find("ul.infinite-scroll-matrix").each(function () {
        //   if (parseInt($(loadedData).data("current-page")) < parseInt($(this).data("current-page"))) {
        //     console.log(parseInt($(this).data("current-page")))
        //     $(loadedData).insertBefore($(this));
        //   }
        // });
        const sortByInterval = setInterval(() => {
          if ($("body").find('ul.infinite-scroll-matrix').length === parseInt(loadedPage)) {
            sortBy("data-current-page", ".infinite-progress-bar", "ul.infinite-scroll-matrix", "asc");
            // const scrollTimout = setTimeout(() => {
            $("body").removeAttr("style");
            $(window).scrollTop(prevScrollPos);
            $("ul.infinite-scroll-matrix:first-child").closest("div").removeAttr("style");
            // }, 1000);
            clearInterval(sortByInterval);
          }
        }, 500);
        initInfiniteScroll();
      }
    });
    if (prevPage > 0) {
      loadPrevPages(prevPage);
    }
  }

  function loadPrevPages(currentPage=null) {
    if (currentPage === null) {
      currentPage = parseInt(localStorage.getItem("infinite-current-page"));
    }
    let prevPage = currentPage - 1;
    if (prevPage > 0 ) {
      let loadMoreURL = "";
      if ($("body").hasClass("template-search")) {
        loadMoreURL = window.location.href.split("&page=")[0] + `&page=${prevPage}&scroll=true`;
      } else {
        loadMoreURL = window.location.href.split('?')[0] + `?page=${prevPage}&scroll=true`;
      }
      loadPrevAjax(loadMoreURL, prevPage);
    }
  }

  function updateInfiniteScrollProgress(current, total) {
    if (!$('.infinite-scroll-progress-container').length) {
      const $progressContainer = $('' +
        '<div class="infinite-scroll-progress-container">' +
        `<span class="infinite-scroll-progress-header">You\'ve viewed <span class="infinite-scroll-progress--current">${current}</span> of <span class="infinite-scroll-progress--total">${total}</span> products</span>` +
        '<div class="infinite-scroll-progress">' +
        '<div class="infinite-scroll-progress-inner"></div>' +
        '</div>' +
        '</div>'
      );
      $('.infinite-progress-bar').prepend($progressContainer);
    } else {
      $('.infinite-scroll-progress--current').text(current);
      total && $('.infinite-scroll-progress--total').text(total);
    }
    $('.infinite-scroll-progress-inner').css('width', `${+current / +$('.infinite-scroll-progress--total').text().trim() * 100}%`);
  }

  function infiniteScrollExecute() {
    const $loadMoreButton = $('.infinite-load-more');
    const loadMoreURL = $('.infinite-scroll-matrix').last().data("infinite-next");

    if ($loadMoreButton.length > 0 && $loadMoreButton.css('display') != 'none') {
      $.ajax({
          type: 'GET',
          url: loadMoreURL,
          dataType: "html",

          beforeSend: function () {
            $(".inf-scr-fading-circle-container").show();
            $(".infinite-load-more").hide();
            $(".infinite-view-all").hide();
          },
          success: function (data) {
            $(".inf-scr-fading-circle-container").hide();
            let nextPage = parseInt($(".infinite-view-all").data("current-page")) + 1;
            let localNext = parseInt(localStorage.getItem('infinite-current-page')) + 1;

            if (nextPage < localNext) {
              nextPage = localNext;
            }
            $(".infinite-view-all").attr("data-current-page", nextPage);
            
            localStorage.setItem('infinite-current-page', nextPage);
            
            const loadedData = $(data).find(".infinite-scroll-matrix");
            $(loadedData).attr("data-current-page", nextPage);
            $(loadedData).insertBefore($(".infinite-progress-bar"));

            if ($("body").hasClass("template-search")) {
              window.history.replaceState({}, '', window.location.href.split("&page=")[0] + `&page=${nextPage}&scroll=true`);
            } else {
              window.history.replaceState({}, '', window.location.href.split('?')[0] + `?page=${nextPage}&scroll=true`);
            }

            initInfiniteScroll();
          }
      });
    }
  }

  function attachClickEvent() {
    $('.infinite-load-more, .infinite-load-more a').click(function (event) {
      infiniteScrollExecute();
      event.stopPropagation();
    });

    $('.infinite-view-all, .infinite-view-all a').click(function () {
      loadAllPages();
    });
  }

  function initInfiniteScroll() {    
    if ($(".infinite-progress-bar").find(".inf-scr-fading-circle-container").length < 1) {
      const loadhtml = '<div class="inf-scr-fading-circle-container">' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '<div class="inf-scr-fading-circle"></div>' +
        '</div>';
      $(".infinite-progress-bar").append(loadhtml);
      $(".infinite-progress-bar").find(".inf-scr-fading-circle-container").hide();
    }

    const totalProducts = $('.infinite-scroll-matrix').data('total-products');
    const currentProducts = $('.infinite-product-card').length;
    updateInfiniteScrollProgress(currentProducts, totalProducts);

    if (currentProducts < totalProducts) {
      $(".infinite-load-more").show();
      $(".infinite-view-all").html(`<a>View All ${totalProducts} Products</a>`).show();
      attachClickEvent();
    } else {
      $(".infinite-load-more").hide();
      $(".infinite-view-all").hide();
    }
  }

  $(document).ready(function () {
    // Mega Menu Our World slider
    if ($('.mobile-nav-our-world-1').length) {
      const ourWorld = $('.mobile-nav-our-world-1');
      ourWorld.slick({
        dots: false,
        infinite: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: false,
        arrows: true,
        mobileFirst: true,
        prevArrow: '<button class="slick-prev" role="img" aria-label="prev"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-left-icon.svg" alt="icon left"/></button>',
        nextArrow: '<button class="slick-next" role="img" aria-label="next"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-right-icon.svg" alt="icon next"/></button>',
      });
      $(".mobile-nav-our-world-1").hide();
    }

     $("body").on("click", ".our-world-toggle", function () {
        $(".mobile-nav-our-world-1").slick("refresh");
     });

     $("body").on("click", ".mobile-nav__region-selector", function() {
      $(this).find(".mobile-nav__icon-plus, .mobile-nav__icon-minus").toggle();
     });

     if ($(".mobile-nav-wrapper").hasClass("js-menu--is-open")) {

     }

     if ($('.mobile-nav-our-world-2').length) {
       const ourWorld2 = $('.mobile-nav-our-world-2');
       ourWorld2.slick({
         dots: false,
         infinite: true,
         slidesToShow: 1,
         slidesToScroll: 1,
         autoplay: false,
         arrows: true,
         mobileFirst: true,
         prevArrow: '<button class="slick-prev" role="img" aria-label="prev"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-left-icon.svg" alt="icon left"/></button>',
         nextArrow: '<button class="slick-next" role="img" aria-label="next"><img src="//cdn.shopify.com/s/files/1/0259/3764/1543/t/5/assets/slider-right-icon.svg" alt="icon next"/></button>',
       });
       $(".mobile-nav-our-world-2").slick("refresh");
       $(".mobile-nav-our-world-2").show();
     }

  /**************************** Size Guide ****************************/
  // Wait for the kiwi size app element to load.
  $('.template-product').arrive('.ks-chart-modal-link', function () {
    formatProductFitTab();
    renameCentimeters();
    responsiveProductFitTab();
    bindSizeGuideEvents();
  });

  function formatProductFitTab() {
    const $divider = $('.ks-divider').first();
    if ($divider.length) {
      const title = $divider.hide().find('span').text();
      const $tabContents = $divider.nextAll('.ks-html-content');
      const $textBlock = $('.ks-tab-panel').first().find('.ks-image-and-caption-block .text-block').first();
      const $mainImage = $('.ks-tab-panel').first().find('.ks-image-and-caption-block > .image-block > img');
      const originalImageSrc = $mainImage.attr('data-src');
      
      // Build inner tab headers and contents.
      let innerTabHeaders = '';
      let innerTabPanels = '';
      $tabContents.each(function(index) {
        const tabText = $(this).find('h2').first().text();
        const activeClass = index == 0 ? ' active' : '';
        innerTabHeaders += `<a href="#" class="inner-tab-link${activeClass}" data-tab="${index}">${tabText}</a>`;

        // Get the image.
        const $image = $(this).find('img').first();
        $(this).find('img').hide();
        const sizeImage = $image.length ? $image.attr('src') : originalImageSrc;

        $(this).find('h2').hide();
        $(this).find('p:empty').hide();
        const panelsHtml = $(this).html();

        innerTabPanels += `<div class="inner-tab-panel${activeClass}" data-panel="${index}" data-size-image="${sizeImage}">${panelsHtml}</div>`;
        $(this).hide();
      });
      
      // Show the generated tab.
      const tabHtml = `<div id="inner-tab">
        <div class="inner-tab-header">
          <div class="inner-tab-title">${title}</div>
          <div class="inner-tab-links">${innerTabHeaders}</div>
        </div>
        <div class="inner-tab-panels">${innerTabPanels}</div>
      </div>`;
      $textBlock.append(tabHtml);

      // Update main image.
      $('.ks-chart-modal-link').on('click', function(e) {
        const $activePanel = $('.inner-tab-panel[data-panel="0"]');
        $mainImage.attr('data-src', $activePanel.attr('data-size-image'));
        $mainImage.attr('src', $activePanel.attr('data-size-image'));
      });

      // Inner tab functionality.
      $('.inner-tab-link').on('click', function(e) {
        e.preventDefault();
        const index = $(this).data('tab');
        $('.inner-tab-link.active, .inner-tab-panel.active').removeClass('active');
        $(this).addClass('active');

        const $activePanel = $('.inner-tab-panel[data-panel="' + index + '"]');
        $activePanel.addClass('active');

        const $mainImage = $('.ks-tab-panel').first().find('.ks-image-and-caption-block .image-block img');
        $mainImage.attr('src', $activePanel.attr('data-size-image'));
      });
    }
  }

  // Change the position of the inner tab on mobile/desktop.
  function responsiveProductFitTab() {
    const $textBlock = $('.ks-tab-panel').first().find('.ks-image-and-caption-block .text-block').first();
    if ($(window).width() > 750) {
      if (!$('#inner-tab').parent().hasClass('text-block')) {
        $('#inner-tab').detach().appendTo($textBlock);
      }
    } else {
      if (!$('#inner-tab').parent().hasClass('ks-image-and-caption-block')) {
        $('#inner-tab').detach().insertAfter($textBlock);
      }
    }
  }
  
  function bindSizeGuideEvents() {
    $(window).resize($.debounce(200, responsiveProductFitTab));

    $('.size-guide-link, .athletica-accordion-size-guide').on('click', function(e) {
      e.preventDefault();
      $('.ks-chart-modal-link')[0].click();
    });
  }

  function renameCentimeters() {
    $('.ks-unit-toggle-label').each(function() {
      if ($(this).text().trim() == 'cm') {
        $(this).text('Centimeters');
      }
    });
  };
  });
};

//Quick Add To Bag
// size selector event
$(document).on('click', '.product-card .add-to-bag', function(e) {
  var $this = $(this);
  var $sizeBarContainer = $this.closest('.product-card');
  if ($sizeBarContainer.find('.product-card-size-variants.quick-add').length && ($sizeBarContainer.find('.quick-buy.desktop .product-card-size-variants.quick-add a').length > 1)) {
    if ($sizeBarContainer.hasClass('show-quick-add')) {
      var ID = $this.closest('.product-card').find('.quick-buy .active').data('variant');
      quickAddToBag(ID, $this);
    } else {
      $('body').find('.product-card').removeClass('show-quick-add');
      $sizeBarContainer.addClass('show-quick-add');
    }
    
    // Copy quick buy content on separate container to fix position issue on mobile
    if ($this.closest('.athletica-our-favourites').length || $this.closest('.homepage-new-arrivals-container').length) {
      var quickBuyContent = $this.closest('.product-card').find('.quick-buy.mobile').html();
      $('body').find('.slider-quick-buy').html(quickBuyContent).addClass('visible');
    }
  } else {
    var ID = $this.closest('.product-card').find('[data-first-variant]').data('first-variant');
    quickAddToBag(ID, $this);
  }
});

$(document).on('click', '.slider-quick-buy .add-to-bag', function(e) {
  var $sizeToAdd = $('body').find('.slider-quick-buy a.active');
  $('body').find('.slider-quick-buy a').removeClass('active');
  $sizeToAdd.addClass('active');
  var ID = $sizeToAdd.data('variant');
  quickAddToBag(ID, $(this));
});

$(document).on('click', '.slider-quick-buy a:not([data-variant-out-of-stock])', function(e) {
  var $sizeToAdd = $(this);
  $('body').find('.slider-quick-buy a').removeClass('active');
  $sizeToAdd.addClass('active');
  var ID = $sizeToAdd.data('variant');
  quickAddToBag(ID, $(this));
});

$(document).on('click', '.variants.close-icon, .slider-quick-buy .close-icon', function(e) {
  $('body').find('.product-card').removeClass('show-quick-add');
  $('body').find('.slider-quick-buy').removeClass('visible');
});

$(document).on('click touch', '.athletica-page, .template-index, .template-collection', function(event) {
  if(!$(event.target).closest('.product-card').length &&
     !$(event.target).closest('.slider-quick-buy').length) {
    $('body').find('.grid-view-item').removeClass('show-quick-add');
    $('body').find('.slider-quick-buy').removeClass('visible');
  }
});

$(document).on('click', '.show-quick-add .quick-add a:not([data-variant-out-of-stock])', function(e) {
  e.preventDefault();
  $('body').find('.show-quick-add .quick-add a').removeClass('active');
  $(this).addClass('active');
  var ID = $(this).closest('.quick-buy a.active').data('variant');
  var href = $(this).closest('.quick-buy a.active').attr('href').split('/products');
  /* FIX THIS 
    Would splitting on just the ? make more sense? What if the first param wasn’t variant?
  */
  var nameProduct = href[1]?.split('?variant')
  var handle = nameProduct && `/products${nameProduct[0]}`
  $.ajax({ 
    url: handle + '?view=json', 
    dataType: 'html',
    async: true, 
    success: function(product){ 
      const productData = JSON.parse(product);
      if (!productData) {
        console.warn('No product data found')
        return
      } 

      const finalSaleTags = '{{ settings.finalsale_tag }}';
      let finalSale = false
      for (const tag of productData.tags) {
        if (finalSaleTags.includes(tag)) {
            finalSale = true
            break
        }
      }
      
      quickAddToBag(ID, $(this), finalSale);
    }, error: function (error) {
      console.warn('error getting product data', error)
      return
    } 
  });
});


function quickAddToBag(ID, $this, finalSale = false) {
  let finalSaleMsg = ''
  if (finalSale) {
    finalSaleMsg = {
      '{{ settings.finalsale_tag }}': '{{ settings.finalsale_msg }}'
    }
  }
  if (ID) {
    var $btn = $this.closest('.product-card').find('.add-to-bag');
    $.ajax({
      type: 'POST',
      url: '/cart/add.js',
      data: {
        quantity: 1,
        id: ID,
        properties: finalSaleMsg
      },
      dataType: 'json', 
      beforeSend : function() {
        $btn.find('span').text('Adding To Bag');
        $('.slider-quick-buy .add-to-bag span').text('Adding To Bag');
      },
      error : function(data) {
        if (data.responseJSON.status == 422) {
          var quantity = data.responseJSON.description.split(' ')[1].split(' ')[0]; // Get quantity in between two space characters
          var qText = quantity > 1 ? 'You have added ' + quantity + ' units to your bag' : 'You have added ' + quantity + ' unit to your bag';
          $btn.find('span').text('You have added ' + quantity + ' unit to your bag');
        } else {
          var qText = data.responseJSON.description;
        }
        $btn.addClass('failed').find('span').text(qText);
        $('.slider-quick-buy .add-to-bag').find('span').text(qText);
      },
      success: function () {
        $btn.find('span').text('Added To Bag');
        $('.slider-quick-buy .add-to-bag span').text('Added To Bag');
        $('.site-header__icons-wrapper [data-show-minicart]').trigger('click');
        
        
       
        // if(location.pathname == '/cart'){
        //   //$("#shopify-section-cart-template").load(location.href+" #shopify-section-cart-template>*", "");
        //   //location.reload();
        // }


      },
      complete: function () { 
        setTimeout(() => {
          $btn.removeClass('failed').find('span').text('Add To Bag');
          $('.slider-quick-buy').removeClass('visible');
          $('body').find('.product-card').removeClass('show-quick-add');
          $('body').find('.product-card-size-variants a').removeClass('active');
        }, 2000); 
      }
    });
  }
}


// return policy page

function returnPolicy() {
  $('#shogun-wrap .shogun-tab-title a').each(function() {
    $(this).on('click', (e)=> {
      console.log($(this).attr('href'));
      e.preventDefault();

      if ( $(this).attr('href') === '#section2' ) {
        $('#section1').fadeOut();
        $('#section2').fadeIn();
        $('#section2 .image-text-section').css({ 'border-top': 0, 'padding-top': 0 });
        $('#section3 .image-text-section').css({ 'border-top': 'solid 1px #b3b4b3', 'padding-top': '112px' });
        // $( this ).closest('ul').find( 'li.shogun-tab-active' ).removeClass( 'shogun-tab-active' );
        // $(this).closest('li').addClass('shogun-tab-active');
      } else if ( $(this).attr('href') === '#section3' ) {
        $('#section1').fadeOut();
        $('#section2').fadeOut();
        $('#section3 .image-text-section').css({ 'border-top': 0, 'padding-top': 0 });
      } else {
        $('#section1').fadeIn();
        $('#section2').fadeIn();
        $('#section2 .image-text-section').css({ 'border-top': 'solid 1px #b3b4b3', 'padding-top': '112px' });
        $('#section3 .image-text-section').css({ 'border-top': 'solid 1px #b3b4b3', 'padding-top': '112px' });
      }
    });
  });
}

function toggleRp() {
  $( '#shogun-wrap ul.shogun-tabs li a' ).on( 'click', function() {
      $( this ).closest('ul').find( 'li.shogun-tab-active' ).removeClass( 'shogun-tab-active' );
      $(this).closest('li').addClass('shogun-tab-active');
  });
}

function isAthleticaPage() {
  var isAthletica = false;
  if ($('body.template-collection').hasClass('athletica')) {
    isAthletica = true;
  }
  return isAthletica;
}

function autoplayHomePageVideo() {
  const video = document.querySelector('.video-wrapper video');
  if (video) {
    document.addEventListener('DOMContentLoaded', function(){
      document.querySelector('.video-wrapper video').play();
    });
  }
}

//Set Emarsys checkout tag when checkout button is clicked
function emarsysCheckoutTag(){
  $('input[name="checkout"]').on('click', () => {
    ScarabQueue.push(['tag', 'checkout']);
    ScarabQueue.push(['go']);
  });
}

//clear cart when customer logged out
$(document).ready(function(){
 var logoutBtn = document.querySelector('a[href^="/account/logout"]');
  if(logoutBtn) {
    logoutBtn.addEventListener('click', function() {
      document.cookie.split(";").forEach(function (cookie) {
        document.cookie = cookie.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
      });
    })
  }
});

if ($('body').hasClass("template-index")) {
  if($('.site-header').hasClass('white-background')){
    $('.homepage-hero-banner .mobile-image').addClass('opaque-header-background');
    $('.homepage-hero-banner .desktop-image').addClass('opaque-header-background');

    $('.homepage-video .video-wrapper').addClass('opaque-header-background');
  }

  if($('.site-header').hasClass('black-background')){
    $('.homepage-hero-banner .mobile-image').addClass('opaque-header-background');
    $('.homepage-hero-banner .desktop-image').addClass('opaque-header-background');
    
    $('.homepage-video .video-wrapper').addClass('opaque-header-background');
  }
}

$("[closeModalAddToCart]").on('click',() => {
  $("#popup-add-to-cart .MagicToolboxContainer").remove()
  $("#popup-add-to-cart").modal('hide')
})

$('.modal-cart-update').on('click', function(e) {
  if (e.target !== this)
    return;
  $("#popup-add-to-cart .MagicToolboxContainer").remove()
  $("#popup-cart-update .MagicToolboxContainer").remove()
});

// remove emoji from text inputs
$('input').focusout(function(){
  let inputType = $(this).attr('type');
  if((inputType == 'text') || (inputType == 'email') || (inputType == 'tel')) {
    $(this).val($(this).val().replaceAll(/([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g,''));
  }
});

$(".modal-header__close").on('click',() => {
  $("#popup-add-to-cart .MagicToolboxContainer").remove()
  $("#popup-cart-update").modal('hide')
})

//Updates for "Sold out" variant. Customer woudnt see badge until they click on variant
$('.product-form__item').on('change', 'input', function() {
  if ($(this).is(':radio')) {
    $('.size-picker-swatch-wrapper').removeClass('radio-checked');
    if ($(this).is(':checked')) {
      $('.size-picker-swatch-wrapper').addClass('radio-checked');
    }
  }
});

// Style Gorgias Live Chat
const initGorgiasChatPromise = (window.GorgiasChat) ? window.GorgiasChat.init() : new Promise(function (resolve) { window.addEventListener('gorgias-widget-loaded', function () { resolve();})});
initGorgiasChatPromise.then(function() {
  const cookieBar = document.querySelector('.pd-cookie-banner-window');
  if (!cookieBar) return
  
  function styleChatButton() {
    if (!cookieBar.classList.contains('cc-floating') || (cookieBar.classList.contains('cc-floating') && window.innerWidth <= 767)) {
      document.querySelector('#chat-button').style.bottom = 20 + cookieBar.offsetHeight + 'px';
    } else {
      document.querySelector('#chat-button').style.bottom = '20px';
    }
  }

  function styleChatCampaign() {
    if (document.querySelector('#chat-campaigns')) {
      if (!cookieBar.classList.contains('cc-floating') || (cookieBar.classList.contains('cc-floating') && window.innerWidth <= 767)) {
        document.querySelector('#chat-campaigns').style.bottom = 90 + cookieBar.offsetHeight + 'px';
      } else {
        document.querySelector('#chat-campaigns').style.bottom = '90px';
      }
    }
  }

  function styleChatWindow() {
    if (document.querySelector('#chat-window')) {
      if (!cookieBar.classList.contains('cc-floating') || (cookieBar.classList.contains('cc-floating') && window.innerWidth <= 767)) {
        document.querySelector('#chat-window').style.bottom = 90 + cookieBar.offsetHeight + 'px';
      } else {
        document.querySelector('#chat-window').style.bottom = '90px';
      }

      if($(window).width() < 1478){
        if($('.fixed-product-menu.sticky').length > 0){
          $('#chat-window').addClass('shift-upward');
        }
        else{
          if($('#chat-window.shift-upward').length > 0){
            $('#chat-window').removeClass('shift-upward');
          }
        }
      }
    }
  }

  const timer = setInterval(function() {
    const chatButtonHead = document.querySelector('#gorgias-chat-container')?.querySelector('#chat-button')?.contentWindow.document.querySelector('head');
    if (!chatButtonHead || ![...chatButtonHead?.children].some(x => x.getAttribute('data-emotion'))) {
      return;
    }
    clearInterval(timer);
    styleChatButton();
  }, 50);

  GorgiasChat.on('widget:opened', function() {
    const timer = setInterval(function() {
      const chatWindowHead = document.querySelector('#gorgias-chat-container')?.querySelector('#chat-window')?.contentWindow.document.querySelector('head');
      if (![...chatWindowHead?.children].some(x => x.getAttribute('data-emotion'))) {
        return;
      }
      clearInterval(timer);
      styleChatWindow();
    }, 50);
  });

  window.addEventListener('resize', () => {
    styleChatButton();
    styleChatCampaign();
    styleChatWindow();
  });

  cookieBar.querySelector('.cc-btn').addEventListener('click', () => {
    document.querySelector('#chat-button').style.bottom = '20px';
    if (document.querySelector('#chat-campaigns')) {
      document.querySelector('#chat-campaigns').style.bottom = '90px';
    }
    if (document.querySelector('#chat-window')) {
      document.querySelector('#chat-window').style.bottom = '90px';
    }
  });
});

autoplayHomePageVideo();
toggleRp();
returnPolicy();
emarsysCheckoutTag();
$(theme.init);
Arrive.unbindAllArrive();

// Functions to save giftwrap checkbox value
function syncGiftWrapStatus() {
  const isChecked = localStorage.getItem('giftWrapChecked') === "true";
  $('.gift-wrap_checkbox').prop('checked', isChecked); 
}

$(window).on('load', function() {
  syncGiftWrapStatus();
  
  $('.gift-wrap_checkbox').on('change', function() {
      if ($(this).is(':checked')) {
          localStorage.setItem('giftWrapChecked', "true");
      } else {
          localStorage.setItem('giftWrapChecked', "false");
      }
  });
});





// Do not add further scripts below this line